{"version":3,"sources":["features/Profile/Profile.module.css","features/Packs/Packs.module.css","features/Forgot/Forgot.module.css","features/SetPassword/SetPassword.module.css","features/Modals/AddItemModal/AddItemModal.module.css","features/Register/Register.module.css","features/Modals/DeleteItemModal/DeleteItemModal.module.css","features/Modals/UpdateItemModal/UpdateItemModal.module.css","common/DoubleRange/DoubleRange.module.css","api/api.ts","features/Forgot/forgot-reducer.ts","features/Forgot/Forgot.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","features/Register/register-reducer.ts","features/Register/Register.tsx","features/SetPassword/set-password-reducer.ts","features/SetPassword/SetPassword.tsx","common/ImageEditor/ImageEditor.tsx","common/Modal/Modal.tsx","features/Modals/DeleteItemModal/DeleteItemModal.tsx","features/Profile/Profile.tsx","features/Header/Header.tsx","features/Packs/packs-reducer.ts","common/DoubleRange/DoubleRange.tsx","features/Paginator/Paginator.tsx","features/Modals/AddItemModal/AddItemModal.tsx","features/Modals/UpdateItemModal/UpdateItemModal.tsx","features/Packs/PacksTable.tsx","features/Packs/Packs.tsx","features/Cards/cards-reducer.ts","features/Cards/CardsTable.tsx","features/Cards/Cards.tsx","app/app-reducer.ts","utils/get-random-card.ts","features/Learn/Learn.tsx","features/Modals/ScrollUpModal/ScrollUpModal.tsx","assets/images/maria.jpg","assets/images/leonid.jpg","assets/images/anton.png","preloader/TeamPresentation/TeamPresentation.tsx","app/App.tsx","reportWebVitals.ts","features/Profile/profile-reducer.ts","app/store.ts","index.tsx","common/styles/error.module.css","features/Login/Login.module.css","features/Header/Header.module.css","features/Learn/Learn.module.css","preloader/TeamPresentation/TeamPresentation.module.css","features/Cards/Cards.module.css"],"names":["module","exports","SortDirections","instance","axios","create","withCredentials","baseURL","authAPI","post","loginData","regData","delete","newUserData","put","email","from","message","resetPassData","packsAPI","params","nameToSearch","maxCardsCount","minCardsCount","page","pageCount","sortDirection","propToSortBy","userId","get","packName","sortPacks","min","max","user_id","name","isPrivate","deckCover","cardsPack","private","packId","_id","cardsAPI","question","answer","minGrade","maxGrade","cardsPack_id","cardQuestion","cardAnswer","sortCards","grade","shots","rating","answerImg","questionImg","questionVideo","answerVideo","type","card","cardId","comments","card_id","initialState","requestStatus","error","info","setRequestStatusAC","Forgot","useSelector","state","forgot","dispatch","useDispatch","useState","setEmail","className","style","loading","commonStyle","value","onChange","e","currentTarget","trim","onClick","then","res","data","catch","response","setErrorAC","sendEmailToResetPassTC","disabled","to","activeClassName","active","avatar","isLoggedIn","setAuthUserDataAC","payload","updateUserDataTC","newData","getState","auth","updatedUser","setTimeout","Login","formik","useFormik","validate","values","password","initialValues","rememberMe","onSubmit","PATH","PROFILE","handleSubmit","login","Item","notice","REGISTER","getFieldProps","errors","checked","color","responseText","isRegistration","setResponseTextAC","text","setRegistrationAC","Register","register","emailValue","setEmailValue","setPassword","confirmPassword","setConfirmPassword","errorPassword","setErrorPassword","clearError","placeholder","onKeyPress","length","err","requestRegister","SetPassword","token","useParams","password1","setPassword1","password2","setPassword2","localError","setLocalError","resetPasswordToken","ImageEditor","React","memo","children","inputRef","useRef","reader","FileReader","multiple","accept","ref","display","target","files","readAsDataURL","imageURL","window","URL","createObjectURL","onloadend","newBase64","result","size","toString","alert","current","click","Modal","enableBackground","backgroundOnClick","modalWidthPx","modalHeightPx","modalStyle","modalOnClick","show","top","left","position","width","height","background","opacity","zIndex","flexFlow","alignItems","justifyContent","backgroundColor","borderRadius","DeleteItemModal","itemToDelete","setShow","onDeleteBtnClick","deleteBlock","buttons","Profile","Paragraph","Typography","showDeleteItemModal","setShowDeleteItemModal","onImageEditorClick","useCallback","base64","onDeleteAvatarClick","isToBeDeleted","onNewNameSubmit","newName","profile","avatarContainer","src","avatarButtons","EditTwoTone","fontSize","icon","DeleteTwoTone","shape","ghost","UserOutlined","right","PlusSquareTwoTone","editable","LOGIN","Header","header","FORGOT","SET_PASSWORD","PACKS","CARDS","cardPacks","cardPacksTotalCount","sortParams","Down","undefined","setPacksAC","setSortParamsAC","getPacksTC","packs","DoubleRange","minRangeLimit","maxRangeLimit","minValue","maxValue","onValuesChange","setMin","setMax","onSliderValuesChange","onMouseUpHandler","rangeBlock","range","draggableTrack","onAfterChange","tooltipVisible","Paginator","props","showQuickJumper","total","pageSize","AddItemModal","inputLabels","filesToUpload","itemToAdd","onAddBtnClick","Array","initialFileData","fileURL","fileName","setValues","fileData","setFileData","onImageUpload","index","map","d","i","addBlock","l","v","onChangeHandler","f","UploadOutlined","previews","alt","UpdateItemModal","inputValues","itemToUpdate","onUpdateBtnClick","updateBlock","valuesCopy","PacksTable","authUserId","showAddItemModal","setShowAddItemModal","showUpdateItemModal","setShowUpdateItemModal","currentPackID","setCurrentPackID","currentPackName","setCurrentPackName","onAddPackClick","onDeleteClick","onUpdateClick","updatePackTC","p","key","cardsCount","updated","createdBy","user_name","packUserId","columns","title","dataIndex","sorter","render","LEARN","dataSource","pagination","filters","columnKey","order","Up","tableLayout","Packs","searchByName","setSearchByName","useEffect","onCardsCountChange","paginatorPage","filter","rangeContainer","cards","cardsTotalCount","setCardsAC","getCardsTC","CardsTable","currentCardID","setCurrentCardID","setQuestion","setAnswer","onAddCardClick","addCardTC","deleteCardTC","updateCardTC","c","Cards","onGradeRangeChange","isPackFound","some","status","isInitialized","setAppStatusAC","setAppErrorAC","setIsInitializedAC","getRandomCard","cardsCopy","totalSum","reduce","acc","random","Math","sum","Learn","history","useHistory","showAnswer","setShowAnswer","isFirstCard","setIsFirstCard","created","Date","setCard","onGradeBtnClick","setNewGradeAC","updatedGrade","updateGradeTC","push","learn","section","dataset","data-grade","ScrollUpModal","addEventListener","handleScroll","pageYOffset","singleScrollLength","lastScrollPosition","timer","setInterval","clearInterval","scroll","border","boxShadow","cursor","TeamPresentation","teamPresentation","avatars","maria","backgroundImage","leonid","anton","App","app","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.5fcc7602.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__OylV9\",\"loading\":\"Profile_loading__1TdAz\",\"avatarContainer\":\"Profile_avatarContainer__2g1TC\",\"avatarButtons\":\"Profile_avatarButtons__aCraQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packs\":\"Packs_packs__11aat\",\"filter\":\"Packs_filter__3-7jv\",\"rangeContainer\":\"Packs_rangeContainer__1utv6\",\"pagination\":\"Packs_pagination__3tqEx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgot\":\"Forgot_forgot__3iT7N\",\"loading\":\"Forgot_loading__2vdJ9\",\"error\":\"Forgot_error__2B138\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setPassword\":\"SetPassword_setPassword__ji0HF\",\"loading\":\"SetPassword_loading__2N13G\",\"error\":\"SetPassword_error__8FOW9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addBlock\":\"AddItemModal_addBlock__1Lc0x\",\"previews\":\"AddItemModal_previews__cne1L\",\"buttons\":\"AddItemModal_buttons__eAz8j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Register_register__298wP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteBlock\":\"DeleteItemModal_deleteBlock__1Z1lq\",\"buttons\":\"DeleteItemModal_buttons__18GCg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"updateBlock\":\"UpdateItemModal_updateBlock__1jU3R\",\"buttons\":\"UpdateItemModal_buttons__11I2E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rangeBlock\":\"DoubleRange_rangeBlock__eFtuj\"};","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/'\r\n}) //перед каждым pushем на gitHub менять baseURL с http://localhost:7542/2.0/ на https://neko-back.herokuapp.com/2.0/ !\r\n\r\nexport const authAPI = {\r\n    me() { // проверка на залогиненность\r\n        return instance.post<AuthUserData>(`auth/me`)\r\n    },\r\n    login(loginData: LoginDataType) {\r\n        return instance.post<AuthUserData>(`auth/login`, loginData)\r\n    },\r\n    register(regData: RegDataType) {\r\n        return instance.post<{ addedUser: AuthUserData, error?: string }>(`auth/register`, regData)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/me`)\r\n    },\r\n    updateUserData(newUserData: NewUserDataType) { // обновление name или аватарки юзера\r\n        return instance.put<{ updatedUser: AuthUserData, error?: string }>(`auth/me`, newUserData)\r\n    },\r\n    sendEmailToResetPass(email: string) { // отправляем емайл, если забыл пароль, со страницы Forgot\r\n        return instance.post<ResponseType>(`auth/forgot`, {\r\n            email,\r\n            from: \"test-front-admin <ai73a@yandex.by>\",\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\n                 password recovery link:\r\n                 <a href='http://marygrishchuk.github.io/cards-by-dream-team/#/set-new-password/$token$'>\r\n                 Reset Password</a></div>`\r\n        })\r\n    },\r\n    resetPassword(resetPassData: ResetPassDataType) { // отправка нового пароля со страницы Set New Password\r\n        return instance.post<ResponseType>(`auth/set-new-password`, resetPassData)\r\n    }\r\n}\r\n\r\nexport const packsAPI = {\r\n    getPacks(params: GetSortedPacksType = {}) { // получение колод\r\n        const {\r\n            nameToSearch, maxCardsCount, minCardsCount, page, pageCount, sortDirection = '', propToSortBy = '', userId\r\n        } = params\r\n        return instance.get<GetPackResponseType>(`cards/pack`, {params: {packName: nameToSearch,\r\n                sortPacks: sortDirection + propToSortBy, min: minCardsCount, max: maxCardsCount, page, pageCount,\r\n                user_id: userId}})\r\n    },\r\n    addPack(name?: string, isPrivate?: boolean, deckCover?: string) {  // добавление (создание) колоды\r\n        return instance.post<AddPackResponseType>(`cards/pack`, {cardsPack: {name, private: isPrivate, deckCover}})\r\n    },\r\n    deletePack(packId: string) { //удаление колоды\r\n        return instance.delete<DeletePackResponseType>(`cards/pack?id=${packId}`)\r\n    },\r\n    updatePack(packId: string, params: NewPackType = {}) { //изменение колоды\r\n        const {name, deckCover, private: isPrivate} = params\r\n        return instance.put<UpdatePackResponseType>(`cards/pack`, {cardsPack: {_id: packId, name, deckCover, isPrivate}})\r\n    },\r\n}\r\n\r\nexport const cardsAPI = {\r\n    getCards(packId: string, params: GetSortedCardsType = {}) { // получение карточек по id колоды\r\n        const {question, answer, sortDirection = '', propToSortBy = '', minGrade, maxGrade, page, pageCount} = params\r\n        return instance.get<GetCardsResponseType>(`cards/card`, {params: {cardsPack_id: packId, cardQuestion: question,\r\n                cardAnswer: answer, sortCards: sortDirection + propToSortBy, min: minGrade, max: maxGrade, page, pageCount}})\r\n    },\r\n    addCard(packId: string, params: NewCardDataType = {}) {  // добавление (создание) карточки\r\n        const {\r\n            question, answer, grade, shots, rating, answerImg, questionImg,\r\n            questionVideo, answerVideo, type\r\n        } = params\r\n        return instance.post<AddCardResponseType>(`cards/card`, {\r\n            card: {\r\n                cardsPack_id: packId, question, answer, grade, shots,\r\n                rating, answerImg, questionImg, questionVideo, answerVideo, type\r\n            }\r\n        })\r\n    },\r\n    deleteCard(cardId: string) { //удаление карточки\r\n        return instance.delete<DeleteCardResponseType>(`cards/card?id=${cardId}`)\r\n    },\r\n    updateCard(cardId: string, params: NewCardDataType = {}, comments?: string) { //изменение карточки\r\n        const {\r\n            question, answer, grade, shots, rating, answerImg, questionImg,\r\n            questionVideo, answerVideo, type\r\n        } = params\r\n        return instance.put<UpdateCardResponseType>(`cards/card`, {\r\n            card: {\r\n                _id: cardId, question, answer, grade, shots,\r\n                rating, answerImg, questionImg, questionVideo, answerVideo, type, comments\r\n            }\r\n        })\r\n    },\r\n    updateGrade(grade: number, card_id: string) {\r\n        return instance.put<UpdateGradeResponseType>(`cards/grade`, {grade, card_id})\r\n    }\r\n}\r\n\r\n//types\r\nexport type LoginDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type RegDataType = {\r\n    email: string\r\n    password: string\r\n}\r\nexport type NewUserDataType = {\r\n    name: string\r\n    avatar?: string\r\n}\r\nexport type ResetPassDataType = {\r\n    password: string\r\n    resetPasswordToken: string | undefined\r\n}\r\nexport type AuthUserData = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\nexport type ResponseType = {\r\n    info: string\r\n    error?: string\r\n}\r\n\r\nexport type GetPackResponseType = {\r\n    cardPacks: Array<PackDataType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n\r\n}\r\n\r\nexport type PackDataType = {\r\n    _id: string\r\n    name: string\r\n    cardsCount: number\r\n    created: Date\r\n    updated: Date\r\n    user_id: string\r\n    user_name: string\r\n    deckCover: string\r\n    grade: number\r\n    path: string\r\n    private: boolean\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n}\r\n\r\nexport type NewPackType = {\r\n    name?: string\r\n    deckCover?: string\r\n    private?: boolean\r\n}\r\n\r\nexport type AddPackResponseType = {\r\n    newCardsPack: PackDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type DeletePackResponseType = {\r\n    deletedCardsPack: PackDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type UpdatePackResponseType = {\r\n    updatedCardsPack: PackDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport type GetCardsResponseType = {\r\n    cards: Array<CardDataType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\n\r\nexport type CardDataType = {\r\n    _id: string\r\n    question: string\r\n    answer: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: Date\r\n    updated: Date\r\n    comments: string\r\n}\r\n\r\nexport enum SortDirections {\r\n    Up = 0,\r\n    Down = 1,\r\n}\r\n\r\nexport type GetSortedPacksType = {\r\n    nameToSearch?: string\r\n    minCardsCount?: number\r\n    maxCardsCount?: number\r\n    sortDirection?: SortDirections\r\n    propToSortBy?: \"name\" | \"cardsCount\" | \"updated\"\r\n    page?: number\r\n    pageCount?: number\r\n    userId?: string\r\n\r\n}\r\nexport type GetSortedCardsType = {\r\n    question?: string\r\n    answer?: string\r\n    sortDirection?: SortDirections\r\n    propToSortBy?: \"grade\" | \"updated\"\r\n    minGrade?: number\r\n    maxGrade?: number\r\n    page?: number\r\n    pageCount?: number\r\n}\r\n\r\nexport type NewCardDataType = {\r\n    question?: string\r\n    answer?: string\r\n    grade?: 0 | 1 | 2 | 3 | 4 | 5\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n    type?: \"card\"\r\n}\r\n\r\nexport type AddCardResponseType = {\r\n    newCard: CardDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type DeleteCardResponseType = {\r\n    deletedCard: CardDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type UpdateCardResponseType = {\r\n    updatedCard: CardDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type UpdateGradeResponseType = {\r\n    updatedGrade: UpdateGradeType\r\n}\r\nexport type UpdateGradeType = {\r\n    _id: string\r\n    cardsPack_id: string\r\n    card_id: string\r\n    user_id: string\r\n    grade: number\r\n    shots: number\r\n}","import {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../api/api\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - \"неактивный\"\r\n    error: '',\r\n    info: ''\r\n}\r\n\r\nexport const forgotReducer = (state: InitialForgotStateType = initialState, action: ActionsType): InitialForgotStateType => {\r\n    switch (action.type) {\r\n        case 'FORGOT/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'FORGOT/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                info: ''\r\n            }\r\n        }\r\n        case 'FORGOT/SET-INFO': {\r\n            return {\r\n                ...state,\r\n                info: action.info,\r\n                error: ''\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'FORGOT/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'FORGOT/SET-ERROR', error} as const)\r\nconst setInfoAC = (info: string) => ({type: 'FORGOT/SET-INFO', info} as const)\r\n\r\n//thunk\r\nexport const sendEmailToResetPassTC = (email: string) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.sendEmailToResetPass(email)\r\n        .then(res => {\r\n            dispatch(setInfoAC(res.data.info))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialForgotStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setInfoAC>\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {ChangeEvent, useState} from \"react\";\r\nimport style from \"./Forgot.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {InitialForgotStateType, sendEmailToResetPassTC} from \"./forgot-reducer\";\r\nimport commonStyle from \"../../common/styles/error.module.css\";\r\n\r\nexport const Forgot = () => {\r\n    const {requestStatus, error, info} = useSelector<AppRootStateType, InitialForgotStateType>(state => state.forgot)\r\n    const dispatch = useDispatch()\r\n\r\n    const [email, setEmail] = useState('')\r\n\r\n    const onEmailInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value.trim())\r\n    }\r\n    const onSendBtnClick = () => {\r\n        dispatch(sendEmailToResetPassTC(email))\r\n    }\r\n\r\n    return (\r\n        <div className={style.forgot}>\r\n            Please enter your email, and we'll send you a link to reset your password.\r\n            {requestStatus === 'loading'\r\n                ? <div className={style.loading}>loading...</div>\r\n                : info && <i>{info}</i>}\r\n            <div className={error && commonStyle.error}>{error}</div>\r\n            <input type=\"email\" value={email} onChange={onEmailInput}/>\r\n            <button onClick={onSendBtnClick} disabled={requestStatus === 'loading'}>Send</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI, LoginDataType} from \"../../api/api\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\nconst initialState = {\r\n    _id: \"\",\r\n    email: \"\",\r\n    name: \"\",\r\n    avatar: \"\" as string | undefined,\r\n    error: \"\",\r\n    isLoggedIn: false,\r\n    requestStatus: 'idle' as RequestStatusType //изначально статус запроса - \"неактивный\"\r\n}\r\n\r\nexport const authReducer = (state: InitialAuthStateType = initialState, action: ActionsType): InitialAuthStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET-AUTH-USER-DATA': {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        case 'AUTH/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'AUTH/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nexport const setAuthUserDataAC = (_id: string, email: string, name: string, avatar: string | undefined, isLoggedIn: boolean) => ({\r\n    type: 'AUTH/SET-AUTH-USER-DATA',\r\n    payload: {_id, email, name, avatar, isLoggedIn}\r\n} as const)\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'AUTH/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\n\r\nconst setErrorAC = (error: string) => ({type: 'AUTH/SET-ERROR', error} as const)\r\n\r\n\r\n//thunks\r\nexport const loginTC = (loginData: LoginDataType) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.login(loginData)\r\n        .then((res) => {\r\n            dispatch(setAuthUserDataAC(res.data._id, res.data.email, res.data.name, res.data.avatar, true))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(() => {\r\n            dispatch(setAuthUserDataAC(\"\", \"\", \"\", \"\", false))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\nexport const updateUserDataTC = (newData: { name?: string, avatar?: string }) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>,\r\n                                                                                  getState: () => AppRootStateType) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.updateUserData({\r\n        name: newData.name || getState().auth.name,\r\n        avatar: newData.avatar || getState().auth.avatar\r\n    })\r\n        .then(res => {\r\n            dispatch(setAuthUserDataAC(res.data.updatedUser._id, res.data.updatedUser.email,\r\n                res.data.updatedUser.name, res.data.updatedUser.avatar, getState().auth.isLoggedIn))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialAuthStateType = typeof initialState\r\nexport type RequestStatusType = 'idle' | 'loading' | 'success' | 'failed'\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setAuthUserDataAC>\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React from \"react\";\r\nimport style from \"./Login.module.css\"\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {InitialAuthStateType, loginTC} from \"./auth-reducer\";\r\nimport {PATH} from \"../../app/App\";\r\nimport { Form } from \"antd\";\r\nimport commonStyle from \"../../common/styles/error.module.css\";\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {isLoggedIn, requestStatus, error} = useSelector<AppRootStateType, InitialAuthStateType>(state => state.auth)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: \"Email is required\"\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: \"Password is required\"\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n\r\n                <div className={style.login}>\r\n                    <Form.Item className={style.notice}>\r\n                        <p>To log in, please get registered\r\n                            <NavLink to={PATH.REGISTER} activeClassName={style.active}> here,</NavLink>\r\n                        </p>\r\n                        <p>or please use common test account credentials:</p>\r\n                        <p>Email: nya-admin@nya.nya</p>\r\n                        <p>Password: 1qazxcvBG</p>\r\n                    </Form.Item>\r\n                    {requestStatus === 'loading' && <div className={style.loading}>loading...</div>}\r\n                    <div className={error && commonStyle.error}>{error}</div>\r\n                    <label>Email</label>\r\n                    <input type=\"email\" {...formik.getFieldProps(\"email\")}/>\r\n                    {formik.errors.email ? <div className={style.error}>{formik.errors.email}</div> : null}\r\n\r\n                    <label>Password</label>\r\n                    <input type=\"password\" {...formik.getFieldProps(\"password\")}/>\r\n                    {formik.errors.password ? <div className={style.error}>{formik.errors.password}</div> : null}\r\n\r\n                    <NavLink to=\"/forgot\" activeClassName={style.active}>Forgot password?</NavLink>\r\n\r\n                    <label>Remember Me<input type=\"checkbox\" {...formik.getFieldProps(\"rememberMe\")}\r\n                                             checked={formik.values.rememberMe}/></label>\r\n\r\n                    <button type={'submit'} color={'primary'}>Login</button>\r\n                    <NavLink to=\"/register\" activeClassName={style.active}>Registration</NavLink>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}","import {authAPI, RegDataType} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nconst initialState = {\r\n    responseText: '',\r\n    isRegistration: false\r\n}\r\n\r\nexport const registerReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        //cases\r\n        case \"REGISTER/SUCCESS_REGISTER\": {\r\n            return {...state, responseText: action.text}\r\n        }\r\n        case \"REGISTER/SET-REGISTRATION\": {\r\n            return {\r\n                ...state, isRegistration: action.isRegistration,\r\n                responseText: state.isRegistration === true ? '' : state.responseText\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\n// export const setSomethingAC = () => ({type: 'REGISTER/SET-SOMETHING'} as const)\r\nconst setResponseTextAC = (text: string) => ({type: 'REGISTER/SUCCESS_REGISTER', text} as const)\r\nconst setRegistrationAC = (isRegistration: boolean) => ({type: 'REGISTER/SET-REGISTRATION', isRegistration} as const)\r\n//thunk\r\n// export const doSomethingTC = () => (dispatch: ThunkDispatch) => {\r\n//\r\n// }\r\nexport const requestRegister = (regData: RegDataType) => (dispatch: ThunkCustomDispatch) => {\r\n    authAPI.register(regData)\r\n        .then((res) => {\r\n            dispatch(setResponseTextAC('success'))\r\n\r\n            setTimeout(() => {\r\n                dispatch(setRegistrationAC(true))\r\n                dispatch(setRegistrationAC(false))\r\n            }, 1000)\r\n\r\n        })\r\n        .catch((err) => {\r\n\r\n            dispatch(setResponseTextAC(err.response.data.error))\r\n            setTimeout(() => {\r\n                dispatch(setResponseTextAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n//types\r\nexport type InitialStateType = typeof initialState\r\n//объединение типов actionов:\r\n// export type ActionsType = ReturnType<typeof setSomethingAC>\r\ntype ActionsType = ReturnType<typeof setResponseTextAC> | ReturnType<typeof setRegistrationAC>\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {useState} from \"react\";\r\nimport style from \"./Register.module.css\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {requestRegister} from \"./register-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport commonStyle from \"../../common/styles/error.module.css\";\r\n\r\nexport const Register = () => {\r\n    const text = useSelector<AppRootStateType, string>(state => state.register.responseText)\r\n    const isRegistration = useSelector<AppRootStateType, boolean>(state => state.register.isRegistration)\r\n\r\n    const dispatch = useDispatch()\r\n    const [emailValue, setEmailValue] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [errorPassword, setErrorPassword] = useState('')\r\n\r\n    const regData = {email: emailValue, password: password}\r\n    const setRegister = () => {\r\n        if (password === confirmPassword && password.length >= 8) {\r\n            dispatch(requestRegister(regData))\r\n        } else if (password !== confirmPassword) {\r\n            setErrorPassword(\"Passwords don't match.\")\r\n        } else if (password.length < 8 || confirmPassword.length < 8) {\r\n            setErrorPassword(\"Password must contain at least 8 characters.\")\r\n        }\r\n    }\r\n    const clearError = () => {\r\n        setErrorPassword('')\r\n    }\r\n\r\n\r\n    if (isRegistration) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.register}>\r\n            <h3>{text}</h3>\r\n            Register\r\n            <input type=\"email\" placeholder={'email'} onChange={(e) => setEmailValue(e.currentTarget.value)}\r\n                   onKeyPress={clearError}/>\r\n            <input type=\"password\" placeholder={'password'} onChange={(e) => setPassword(e.currentTarget.value)}\r\n                   onKeyPress={clearError}/>\r\n            <input type=\"password\" placeholder={'confirm password'} onKeyPress={clearError}\r\n                   onChange={(e) => setConfirmPassword(e.currentTarget.value)}/>\r\n            <div className={errorPassword && commonStyle.error}>{errorPassword}</div>\r\n            <button onClick={setRegister}>Register</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import {authAPI} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - \"неактивный\"\r\n    error: '',\r\n    info: ''\r\n}\r\n\r\nexport const setPasswordReducer = (state: SetPasswordStateType = initialState, action: ActionsType): SetPasswordStateType => {\r\n    switch (action.type) {\r\n        case 'SET-PASSWORD/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'SET-PASSWORD/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                info: ''\r\n            }\r\n        }\r\n        case 'SET-PASSWORD/SET-INFO': {\r\n            return {\r\n                ...state,\r\n                info: action.info,\r\n                error: ''\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'SET-PASSWORD/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'SET-PASSWORD/SET-ERROR', error} as const)\r\nconst setInfoAC = (info: string) => ({type: 'SET-PASSWORD/SET-INFO', info} as const)\r\n\r\n//thunk\r\nexport const resetPasswordTC = (password: string, resetPasswordToken: string | undefined) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.resetPassword({password, resetPasswordToken})\r\n        .then(res => {\r\n            dispatch(setInfoAC(res.data.info))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\n//types\r\nexport type SetPasswordStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setInfoAC>\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {ChangeEvent, useState} from \"react\";\r\nimport style from \"./SetPassword.module.css\";\r\nimport {NavLink, Redirect, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {resetPasswordTC, SetPasswordStateType} from \"./set-password-reducer\";\r\nimport commonStyle from \"../../common/styles/error.module.css\";\r\n\r\nexport const SetPassword = () => {\r\n    const {requestStatus, error, info} = useSelector<AppRootStateType, SetPasswordStateType>(state => state.setPassword)\r\n    const dispatch = useDispatch()\r\n    const {token} = useParams<{ token?: string }>()\r\n\r\n    const [password1, setPassword1] = useState('')\r\n    const [password2, setPassword2] = useState('')\r\n    const [localError, setLocalError] = useState('')\r\n\r\n    const onPassword1Input = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword1(e.currentTarget.value)\r\n    }\r\n    const onPassword2Input = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword2(e.currentTarget.value)\r\n    }\r\n    const onSubmit = () => {\r\n        if (password1 === password2 && password1.length >= 8) {\r\n            dispatch(resetPasswordTC(password1, token))\r\n        } else if (password1 !== password2) {\r\n            setLocalError(\"Passwords don't match.\")\r\n        } else if (password1.length < 8 || password2.length < 8) {\r\n            setLocalError(\"Password must contain at least 8 characters.\")\r\n        }\r\n    }\r\n    if (requestStatus === 'success') return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={style.setPassword}>\r\n            Please enter your new password in each field.\r\n            {requestStatus === 'loading'\r\n                ? <div className={style.loading}>loading...</div>\r\n                : info && <i>{info}</i>}\r\n            <div className={error && commonStyle.error}>{error}</div>\r\n            {localError && !error && <div className={commonStyle.error}>{localError}</div>}\r\n            <input type=\"password\" value={password1} onChange={onPassword1Input}\r\n                   onKeyPress={() => setLocalError(\"\")}/>\r\n            <input type=\"password\" value={password2} onChange={onPassword2Input}\r\n                   onKeyPress={() => setLocalError(\"\")}/>\r\n            <button onClick={onSubmit} disabled={requestStatus === 'loading'}>Submit</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import React, {ChangeEvent, CSSProperties, useRef} from \"react\";\r\nimport {Button} from \"antd\";\r\n\r\ntype ImageEditorPropsType = {\r\n    style?: CSSProperties\r\n    onClick: (base64: string, fileURL?: string, fileName?: string) => void\r\n}\r\n\r\nexport const ImageEditor: React.FC<ImageEditorPropsType> = React.memo(({\r\n                                                                           style,\r\n                                                                           onClick,\r\n                                                                           children\r\n                                                                       }) => {\r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n    const reader = new FileReader()\r\n\r\n    const uploadImage = (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.target.files !== null && reader.readAsDataURL(e.target.files[0])\r\n        const imageURL = window.URL.createObjectURL(e.target.files !== null && e.target.files[0])\r\n        reader.onloadend = () => {\r\n            const newBase64 = reader.result\r\n            if (e.target.files && e.target.files[0].size < 2097152) {\r\n                if (newBase64) onClick(newBase64.toString(), imageURL, e.target.files[0].name)\r\n            } else if (e.target.files && e.target.files[0].size > 2097152) {\r\n                alert('Image size should be less than 2MB.')\r\n            }\r\n        }\r\n    }\r\n\r\n    return <span style={{...style}}>\r\n        <input type=\"file\" multiple={false} accept={'.jpg, .jpeg, .png'} ref={inputRef} style={{display: 'none'}}\r\n               onChange={uploadImage}/>\r\n        <Button onClick={() => inputRef && inputRef.current && inputRef.current.click()}\r\n                type={'link'}>\r\n            {children}\r\n        </Button>\r\n    </span>\r\n})","import React, {CSSProperties} from \"react\";\r\n\r\ntype ModalPropsType = {\r\n    enableBackground?: boolean\r\n    backgroundOnClick?: () => void\r\n    modalWidthPx: number\r\n    modalHeightPx: number\r\n    modalStyle?: CSSProperties\r\n    modalOnClick?: () => void\r\n    show: boolean\r\n}\r\n\r\nexport const Modal: React.FC<ModalPropsType> = React.memo((\r\n    {\r\n        enableBackground,\r\n        backgroundOnClick = () => {},\r\n        modalWidthPx,\r\n        modalHeightPx,\r\n        modalStyle,\r\n        modalOnClick = () => {},\r\n        show,\r\n        children,\r\n    }\r\n) => {\r\n    const top = `calc(50vh - ${modalHeightPx / 2}px)`\r\n    const left = `calc(50vw - ${modalWidthPx / 2}px)`\r\n\r\n    if (!show) return null;\r\n\r\n    return (\r\n        <>\r\n            {enableBackground && <div\r\n                style={{\r\n                    position: 'fixed',\r\n                    top: '0px',\r\n                    left: '0px',\r\n                    width: '100vw',\r\n                    height: '100vh',\r\n                    background: 'black',\r\n                    opacity: 0.6,\r\n                    zIndex: 20,\r\n                }}\r\n                onClick={backgroundOnClick}\r\n            />}\r\n            <div\r\n                style={{\r\n                    position: 'fixed',\r\n                    top,\r\n                    left,\r\n                    width: modalWidthPx,\r\n                    height: modalHeightPx,\r\n                    display: 'flex',\r\n                    flexFlow: 'column',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    backgroundColor: '#fafafa',\r\n                    borderRadius: '2px',\r\n                    zIndex: 21,\r\n                    ...modalStyle,\r\n                }}\r\n                onClick={modalOnClick}\r\n            >\r\n                {children}\r\n            </div>\r\n        </>\r\n    )\r\n})","import React from \"react\";\r\nimport style from \"./DeleteItemModal.module.css\";\r\nimport {Modal} from \"../../../common/Modal/Modal\";\r\n\r\ntype DeleteItemModalPropsType = {\r\n    itemToDelete: 'pack' | 'card' | 'image'\r\n    show: boolean\r\n    setShow: (show: boolean) => void\r\n    onDeleteBtnClick: (isToBeDeleted: boolean) => void\r\n}\r\n\r\nexport const DeleteItemModal: React.FC<DeleteItemModalPropsType> = React.memo(({\r\n                                                                                   itemToDelete,\r\n                                                                                   show,\r\n                                                                                   setShow,\r\n                                                                                   onDeleteBtnClick\r\n                                                                               }) => {\r\n\r\n    return <Modal enableBackground modalHeightPx={250} modalWidthPx={395} show={show}\r\n                  backgroundOnClick={() => setShow(false)}>\r\n        <div className={style.deleteBlock}>\r\n            <h4>Are you sure you want to delete this {itemToDelete}?</h4>\r\n            <div className={style.buttons}>\r\n                <button onClick={() => onDeleteBtnClick(true)}>Yes</button>\r\n                <button onClick={() => setShow(false)}>No</button>\r\n            </div>\r\n        </div>\r\n    </Modal>\r\n})\r\n","import React, {useCallback, useState} from \"react\";\r\nimport style from \"./Profile.module.css\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {InitialAuthStateType, logoutTC, updateUserDataTC} from \"../Login/auth-reducer\";\r\nimport {Avatar, Button, Typography} from 'antd';\r\nimport {DeleteTwoTone, EditTwoTone, PlusSquareTwoTone, UserOutlined} from '@ant-design/icons';\r\nimport {PATH} from \"../../app/App\";\r\nimport commonStyle from \"../../common/styles/error.module.css\";\r\nimport {ImageEditor} from \"../../common/ImageEditor/ImageEditor\";\r\nimport {DeleteItemModal} from \"../Modals/DeleteItemModal/DeleteItemModal\";\r\n\r\nexport const Profile = () => {\r\n    const {\r\n        email,\r\n        name,\r\n        error,\r\n        avatar,\r\n        isLoggedIn,\r\n        requestStatus\r\n    } = useSelector<AppRootStateType, InitialAuthStateType>(state => state.auth)\r\n    const dispatch = useDispatch()\r\n    const {Paragraph} = Typography;\r\n    const [showDeleteItemModal, setShowDeleteItemModal] = useState<boolean>(false)\r\n\r\n    const onImageEditorClick = useCallback((base64: string) => {\r\n        dispatch(updateUserDataTC({avatar: base64}))\r\n    },[dispatch])\r\n    const onDeleteAvatarClick = useCallback((isToBeDeleted: boolean) => {\r\n        if (isToBeDeleted) {\r\n            dispatch(updateUserDataTC({avatar: \"0\"}))\r\n            setShowDeleteItemModal(false)\r\n        }\r\n    },[dispatch])\r\n    const onNewNameSubmit = useCallback((newName: string) => {\r\n        dispatch(updateUserDataTC({name: newName}))\r\n    },[dispatch])\r\n    const onLogoutClick = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isLoggedIn) return <Redirect to={PATH.LOGIN}/>\r\n\r\n    return (\r\n        <div className={style.profile}>\r\n            Welcome!\r\n            {requestStatus === 'loading' && <div className={style.loading}>loading...</div>}\r\n            <div className={error && commonStyle.error}>{error}</div>\r\n            <div className={style.avatarContainer}>\r\n                {avatar !== '0' ? <>\r\n                        <Avatar src={avatar} size={64}/>\r\n                        <div className={style.avatarButtons}>\r\n                            <ImageEditor onClick={onImageEditorClick}>\r\n                                <EditTwoTone style={{fontSize: '16px'}}/>\r\n                            </ImageEditor>\r\n                            <div>\r\n                                <Button onClick={() => {\r\n                                    setShowDeleteItemModal(true)\r\n                                }} icon={<DeleteTwoTone style={{fontSize: '16px'}}/>} shape=\"circle\" ghost/>\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                    : <>\r\n                        <Avatar size={64} icon={<UserOutlined/>}/>\r\n                        <ImageEditor onClick={onImageEditorClick} style={{position: \"absolute\", top: \"30%\", right: \"0\"}}>\r\n                            <PlusSquareTwoTone style={{fontSize: '16px'}}/>\r\n                        </ImageEditor>\r\n                    </>}\r\n            </div>\r\n            <Paragraph editable={{onChange: onNewNameSubmit}}>{name}</Paragraph>\r\n            <div>{email}</div>\r\n            <button onClick={onLogoutClick} disabled={requestStatus === 'loading'}>Log out</button>\r\n            {/*появляющаяся модалка для удаления аватара*/}\r\n            {showDeleteItemModal &&\r\n            <DeleteItemModal itemToDelete={'image'} onDeleteBtnClick={onDeleteAvatarClick}\r\n                             setShow={setShowDeleteItemModal}\r\n                             show={showDeleteItemModal}/>}\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport style from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../app/App\";\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div className={style.header}>\r\n            <NavLink to={PATH.LOGIN} activeClassName={style.active}>Login</NavLink>\r\n            <NavLink to={PATH.REGISTER} activeClassName={style.active}>Register</NavLink>\r\n            <NavLink to={PATH.FORGOT} activeClassName={style.active}>Forgot</NavLink>\r\n            <NavLink to={PATH.SET_PASSWORD} activeClassName={style.active}>Set New Password</NavLink>\r\n            <NavLink to={PATH.PROFILE} activeClassName={style.active}>Profile</NavLink>\r\n            <NavLink to={PATH.PACKS} activeClassName={style.active}>Packs</NavLink>\r\n            <NavLink to={PATH.CARDS} activeClassName={style.active}>Cards</NavLink>\r\n        </div>\r\n    );\r\n}","import {GetSortedPacksType, NewPackType, PackDataType, packsAPI, SortDirections} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\n\r\nconst initialState = {\r\n    cardPacks: [] as Array<PackDataType>,\r\n    requestStatus: 'idle' as RequestStatusType,\r\n    error: \"\",\r\n    cardPacksTotalCount: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    sortParams: {\r\n        nameToSearch: '',\r\n        minCardsCount: 0,\r\n        maxCardsCount: 100,\r\n        sortDirection: SortDirections.Down,\r\n        propToSortBy: undefined,\r\n        page: 1,\r\n        pageCount: 10,\r\n        userId: ''\r\n    } as GetSortedPacksType\r\n}\r\n\r\nexport const packsReducer = (state = initialState, action: ActionsType): PacksStateType => {\r\n    switch (action.type) {\r\n        case 'PACKS/SET-PACKS': {\r\n            return {\r\n                ...state,\r\n                cardPacks: action.cardPacks,\r\n                cardPacksTotalCount: action.cardPacksTotalCount,\r\n                page: action.page,\r\n                pageCount: action.pageCount\r\n            }\r\n        }\r\n        case 'PACKS/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'PACKS/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        case 'PACKS/SET-SORT-PARAMS': {\r\n            return {\r\n                ...state,\r\n                sortParams: {...state.sortParams, ...action.sortParams}\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setPacksAC = (cardPacks: Array<PackDataType>, cardPacksTotalCount: number, page: number, pageCount: number) => ({\r\n    type: 'PACKS/SET-PACKS',\r\n    cardPacks, cardPacksTotalCount,\r\n    page, pageCount\r\n} as const)\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'PACKS/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\n\r\nconst setErrorAC = (error: string) => ({type: 'PACKS/SET-ERROR', error} as const)\r\nconst setSortParamsAC = (sortParams: GetSortedPacksType) => ({type: 'PACKS/SET-SORT-PARAMS', sortParams} as const)\r\n\r\n\r\n//thunk\r\nexport const getPacksTC = (params: GetSortedPacksType = {}) => (dispatch: ThunkCustomDispatch, getState: () => AppRootStateType) => {\r\n    if (params) dispatch(setSortParamsAC(params))\r\n    const sortParams = getState().packs.sortParams\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.getPacks(sortParams)\r\n        .then(res => {\r\n            dispatch(setPacksAC(res.data.cardPacks, res.data.cardPacksTotalCount, res.data.page, res.data.pageCount))\r\n            dispatch(setRequestStatusAC('success'))\r\n\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const addPackTC = (name?: string, deckCover?: string, isPrivate?: boolean) => (\r\n    dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.addPack(name, isPrivate, deckCover)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const deletePackTC = (packId: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.deletePack(packId)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const updatePackTC = (packId: string, params: NewPackType = {}) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.updatePack(packId, params)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type PacksStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setPacksAC>\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setSortParamsAC>\r\n\r\n\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {useCallback, useState} from \"react\";\r\nimport {Slider} from 'antd';\r\nimport style from \"./DoubleRange.module.css\";\r\n\r\ntype DoubleRangePropsType = {\r\n    minRangeLimit?: number\r\n    maxRangeLimit?: number\r\n    minValue: number | undefined\r\n    maxValue: number | undefined\r\n    onValuesChange: ([minValue, maxValue]: Array<number | undefined>) => void\r\n}\r\nexport const DoubleRange = React.memo(({\r\n                                           minRangeLimit = 0,\r\n                                           maxRangeLimit = 100,\r\n                                           minValue,\r\n                                           maxValue,\r\n                                           onValuesChange\r\n                                       }: DoubleRangePropsType) => {\r\n\r\n    const [min, setMin] = useState(minValue || 0)\r\n    const [max, setMax] = useState(maxValue || 5)\r\n\r\n    const onSliderValuesChange = useCallback((values: Array<number>) => {\r\n        setMin(values[0])\r\n        setMax(values[1])\r\n    }, [setMin, setMax])\r\n\r\n    const onMouseUpHandler = useCallback(() => {\r\n        onValuesChange([min, max])\r\n    }, [onValuesChange, min, max])\r\n\r\n    return <span className={style.rangeBlock}>\r\n        <Slider range={{draggableTrack: true}} value={[min, max]} min={minRangeLimit} max={maxRangeLimit}\r\n                onChange={onSliderValuesChange}\r\n                onAfterChange={onMouseUpHandler}\r\n                tooltipVisible\r\n        />\r\n    </span>\r\n})","import {Pagination} from 'antd';\r\nimport React from 'react';\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\n\r\ntype PaginatorType = {\r\n    onChange: (page: number, pageCount: number | undefined, packId?: string) => void\r\n    current: number\r\n    total: number\r\n    pageCount: number\r\n    requestStatus: RequestStatusType\r\n}\r\n\r\nexport const Paginator = (props: PaginatorType) => {\r\n\r\n    return <div>\r\n        <Pagination showQuickJumper current={props.current} total={props.total} onChange={props.onChange}\r\n                    pageSize={props.pageCount} disabled={props.requestStatus === 'loading'}/>\r\n    </div>\r\n\r\n}\r\n","import React, {ChangeEvent, useCallback, useState} from \"react\";\r\nimport style from \"./AddItemModal.module.css\";\r\nimport {Modal} from \"../../../common/Modal/Modal\";\r\nimport {Button} from 'antd';\r\nimport {UploadOutlined} from '@ant-design/icons';\r\nimport {ImageEditor} from \"../../../common/ImageEditor/ImageEditor\";\r\n\r\nexport type UploadedFileType = {\r\n    base64: string\r\n    fileURL: string | undefined\r\n    fileName: string | undefined\r\n}\r\n\r\ntype AddItemModalPropsType = {\r\n    inputLabels: Array<'Name: ' | 'Question: ' | 'Answer: '>\r\n    filesToUpload: Array<'deck cover' | 'question pic' | 'answer pic'>\r\n    itemToAdd: 'pack' | 'card'\r\n    show: boolean\r\n    setShow: (show: boolean) => void\r\n    onAddBtnClick: (values: Array<string>, fileData: Array<UploadedFileType>) => void\r\n}\r\n\r\nexport const AddItemModal: React.FC<AddItemModalPropsType> = React.memo(({\r\n                                                                             inputLabels,\r\n                                                                             filesToUpload,\r\n                                                                             itemToAdd,\r\n                                                                             show,\r\n                                                                             setShow,\r\n                                                                             onAddBtnClick\r\n                                                                         }) => {\r\n    //создаем массив initialValues с пустыми строками, кол-во которых совпадает с кол-вом лейблов в inputLabels\r\n    const initialValues = Array.from(inputLabels, () => \"\")\r\n    const initialFileData = Array.from(filesToUpload, () => ({base64: '', fileURL: '', fileName: ''}))\r\n    const [values, setValues] = useState<Array<string>>(initialValues)\r\n    const [fileData, setFileData] = useState<Array<UploadedFileType>>(initialFileData)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>, index: number) => {\r\n        setValues(values.map((v, i) => i === index ? e.currentTarget.value : v))\r\n    }\r\n    const onImageUpload = useCallback((base64: string, fileURL?: string, fileName?: string, index?: number) => {\r\n        setFileData(fileData.map((d, i) => i === index ? ({...d, base64, fileURL, fileName}) : d))\r\n    }, [fileData])\r\n    const onAddClick = () => {\r\n        onAddBtnClick(values, fileData)\r\n        setShow(false)\r\n    }\r\n\r\n    return <Modal enableBackground modalHeightPx={400} modalWidthPx={450} show={show}\r\n                  backgroundOnClick={() => setShow(false)}>\r\n        <div className={style.addBlock}>\r\n            <h4>Add new {itemToAdd}:</h4>\r\n            {inputLabels.map((l, i) => <div key={i}>\r\n                <label>\r\n                    <div>{l}</div>\r\n                    <textarea value={values[i]} onChange={(e) => onChangeHandler(e, i)}/></label>\r\n            </div>)}\r\n            <div>\r\n                {filesToUpload.map((f, i) => <ImageEditor key={i} onClick={(\r\n                    base64: string, fileURL?: string, fileName?: string) => onImageUpload(base64, fileURL, fileName, i)}>\r\n                    <Button icon={<UploadOutlined/>}>Upload {f}</Button>\r\n                </ImageEditor>)}\r\n            </div>\r\n            <div className={style.previews}>\r\n                {fileData.map(f => f.fileURL ? <img src={f.fileURL} alt=\"preview\"/> : null)}\r\n            </div>\r\n            <div className={style.buttons}>\r\n                <button onClick={() => setShow(false)}>Cancel</button>\r\n                <button onClick={onAddClick}>Add</button>\r\n            </div>\r\n        </div>\r\n    </Modal>\r\n})\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Modal} from \"../../../common/Modal/Modal\";\r\nimport style from \"./UpdateItemModal.module.css\";\r\n\r\ntype UpdateItemModalPropsType = {\r\n    inputValues: Array<string>\r\n    inputLabels: Array<'Name: ' | 'Question: ' | 'Answer: '>\r\n    itemToUpdate: 'pack' | 'card'\r\n    show: boolean\r\n    setShow: (show: boolean) => void\r\n    onUpdateBtnClick: (values: Array<string>) => void\r\n}\r\n\r\nexport const UpdateItemModal: React.FC<UpdateItemModalPropsType> = React.memo(({\r\n                                                                                   inputValues,\r\n                                                                                   inputLabels,\r\n                                                                                   itemToUpdate,\r\n                                                                                   show,\r\n                                                                                   setShow,\r\n                                                                                   onUpdateBtnClick\r\n                                                                               }) => {\r\n\r\n    const [values, setValues] = useState<Array<string>>(inputValues)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>, index: number) => {\r\n        let valuesCopy = [...values]\r\n        setValues(valuesCopy.map((v, i) => i === index ? e.currentTarget.value : v))\r\n    }\r\n    const onUpdateClick = () => {\r\n        onUpdateBtnClick(values)\r\n        setShow(false)\r\n    }\r\n\r\n    return <Modal enableBackground modalHeightPx={400} modalWidthPx={450} show={show}\r\n                  backgroundOnClick={() => setShow(false)}>\r\n        <div className={style.updateBlock}>\r\n            <h4>Update {itemToUpdate}:</h4>\r\n            <div>\r\n                {inputLabels.map((l, i) => <div>\r\n                    <label><div>{l}</div><textarea value={values[i]} onChange={(e) => onChangeHandler(e, i)}/></label>\r\n                </div>)}\r\n            </div>\r\n            <div className={style.buttons}>\r\n                <button onClick={() => setShow(false)}>Cancel</button>\r\n                <button onClick={onUpdateClick}>Update</button>\r\n            </div>\r\n        </div>\r\n    </Modal>\r\n})\r\n","import {PackDataType, SortDirections} from \"../../api/api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addPackTC, deletePackTC, getPacksTC, updatePackTC} from \"./packs-reducer\";\r\nimport {ColumnsType, FilterValue} from \"antd/es/table/interface\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Button, Table, TablePaginationConfig} from \"antd\";\r\nimport {DeleteTwoTone, EditTwoTone, PlusSquareTwoTone} from '@ant-design/icons';\r\nimport {SorterResult} from \"antd/lib/table/interface\";\r\nimport React, {useCallback, useState} from \"react\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {AddItemModal, UploadedFileType} from \"../Modals/AddItemModal/AddItemModal\";\r\nimport {PATH} from \"../../app/App\";\r\nimport {DeleteItemModal} from \"../Modals/DeleteItemModal/DeleteItemModal\";\r\nimport {UpdateItemModal} from \"../Modals/UpdateItemModal/UpdateItemModal\";\r\n\r\ntype PacksTablePropsType = {\r\n    cardPacks: Array<PackDataType>\r\n    authUserId: string\r\n    requestStatus: RequestStatusType\r\n}\r\ntype ButtonsDataType = {\r\n    packId: string\r\n    packUserId: string\r\n    cardsCount: number\r\n    packName: string\r\n}\r\ntype PackType = {\r\n    key: string,\r\n    name: string,\r\n    cardsCount: number,\r\n    updated: Date,\r\n    createdBy: string,\r\n    buttons: ButtonsDataType\r\n}\r\nexport const PacksTable = React.memo(({cardPacks, authUserId, requestStatus}: PacksTablePropsType) => {\r\n    const [showAddItemModal, setShowAddItemModal] = useState<boolean>(false)\r\n    const [showDeleteItemModal, setShowDeleteItemModal] = useState<boolean>(false)\r\n    const [showUpdateItemModal, setShowUpdateItemModal] = useState<boolean>(false)\r\n    const [currentPackID, setCurrentPackID] = useState<string>('')\r\n    const [currentPackName, setCurrentPackName] = useState<string>('')\r\n    const dispatch = useDispatch()\r\n\r\n    const onAddPackClick = useCallback((values: Array<string>, fileData: Array<UploadedFileType>) => {\r\n        //values содержатся в массиве в том порядке, в котором передаем inputLabels в AddItemModal\r\n        dispatch(addPackTC(values[0], fileData[0].base64))\r\n    }, [dispatch])\r\n\r\n    const onDeleteClick = useCallback((isToBeDeleted: boolean) => {\r\n        if (isToBeDeleted) {\r\n            dispatch(deletePackTC(currentPackID))\r\n            setShowDeleteItemModal(false)\r\n        }\r\n    }, [dispatch, currentPackID])\r\n\r\n    const onUpdateClick = useCallback((values: Array<string>) => {\r\n        //values содержатся в массиве в том порядке, в котором передаем inputLabels и inputValues в UpdateItemModal\r\n        dispatch(updatePackTC(currentPackID, {name: values[0]}))\r\n    }, [dispatch, currentPackID])\r\n\r\n    const data: Array<PackType> = cardPacks.map(p => ({\r\n        key: p._id,\r\n        name: p.name,\r\n        cardsCount: p.cardsCount,\r\n        updated: p.updated,\r\n        createdBy: p.user_name,\r\n        buttons: {packId: p._id, packUserId: p.user_id, cardsCount: p.cardsCount, packName: p.name}\r\n    }))\r\n\r\n    const columns: ColumnsType<PackType> = [\r\n        {title: 'Name', dataIndex: 'name', key: 'name', sorter: true},\r\n        {title: 'Cards Count', dataIndex: 'cardsCount', key: 'cardsCount', sorter: true},\r\n        {title: 'Last Update', dataIndex: 'updated', key: 'updated'},\r\n        {title: 'Created by', dataIndex: 'createdBy', key: 'createdBy'},\r\n        {\r\n            title: () => <Button onClick={() => setShowAddItemModal(true)} type={'ghost'} size={'large'}\r\n                                 icon={<PlusSquareTwoTone style={{fontSize: '16px'}}/>}/>,\r\n            dataIndex: 'buttons',\r\n            key: 'buttons',\r\n            render: ({packId, packUserId, cardsCount, packName}: ButtonsDataType) => <>\r\n                {packUserId === authUserId && <>\r\n                    <Button onClick={() => {\r\n                        setCurrentPackID(packId)\r\n                        setShowDeleteItemModal(true)\r\n                    }} icon={<DeleteTwoTone style={{fontSize: '16px'}}/>} shape=\"circle\" ghost/>\r\n                    <Button onClick={() => {\r\n                        setCurrentPackID(packId)\r\n                        setCurrentPackName(packName)\r\n                        setShowUpdateItemModal(true)\r\n                    }} icon={<EditTwoTone style={{fontSize: '16px'}}/>} shape=\"circle\" ghost/>\r\n                </>}\r\n                {packUserId === authUserId || cardsCount > 0\r\n                    ? <span><NavLink to={`${PATH.CARDS}/${packId}`}> 👁️ Cards </NavLink></span>\r\n                    : null}\r\n                {cardsCount > 0 &&\r\n                <span><span> | </span><NavLink to={`${PATH.LEARN}/${packId}`}> 🎓 Learn </NavLink></span>}\r\n            </>,\r\n        },\r\n    ];\r\n\r\n    const onChange = (pagination: TablePaginationConfig, filters: Record<string, FilterValue | null>,\r\n                      sorter: SorterResult<PackType> | any) => {\r\n        if (sorter.columnKey === 'name' && sorter.order === 'ascend') {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Down, propToSortBy: 'name'}))\r\n        } else if (sorter.columnKey === 'name' && sorter.order === 'descend') {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Up, propToSortBy: 'name'}))\r\n        } else if (sorter.columnKey === 'name' && sorter.order === undefined) {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Up, propToSortBy: 'updated'}))\r\n        }\r\n        if (sorter.columnKey === 'cardsCount' && sorter.order === 'ascend') {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Down, propToSortBy: \"cardsCount\"}))\r\n        } else if (sorter.columnKey === 'cardsCount' && sorter.order === 'descend') {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Up, propToSortBy: \"cardsCount\"}))\r\n        } else if (sorter.columnKey === 'cardsCount' && sorter.order === undefined) {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Up, propToSortBy: 'updated'}))\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <Table columns={columns} dataSource={data} onChange={onChange} pagination={false} style={{width: '100%'}}\r\n               size={'small'} loading={requestStatus === 'loading'} tableLayout={'fixed'}/>\r\n        {/*модалка для добавления колоды*/}\r\n        {showAddItemModal &&\r\n        <AddItemModal show={showAddItemModal} setShow={setShowAddItemModal} inputLabels={[\"Name: \"]}\r\n                      itemToAdd={'pack'} filesToUpload={['deck cover']} onAddBtnClick={onAddPackClick}/>}\r\n        {/*модалка для удаления колоды*/}\r\n        {showDeleteItemModal && <DeleteItemModal show={showDeleteItemModal} setShow={setShowDeleteItemModal}\r\n                                                 itemToDelete={'pack'} onDeleteBtnClick={onDeleteClick}/>}\r\n        {/*модалка для редактирования колоды*/}\r\n        {showUpdateItemModal && <UpdateItemModal show={showUpdateItemModal} setShow={setShowUpdateItemModal}\r\n                                                 itemToUpdate={'pack'} onUpdateBtnClick={onUpdateClick}\r\n                                                 inputLabels={[\"Name: \"]} inputValues={[currentPackName]}/>}\r\n    </>\r\n})","import React, {ChangeEvent, KeyboardEvent, useCallback, useEffect, useState} from \"react\";\r\nimport style from \"./Packs.module.css\";\r\nimport commonStyle from \"../../common/styles/error.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getPacksTC, PacksStateType} from \"./packs-reducer\";\r\nimport {GetSortedPacksType} from \"../../api/api\";\r\nimport {DoubleRange} from \"../../common/DoubleRange/DoubleRange\";\r\nimport {Paginator} from \"../Paginator/Paginator\";\r\nimport {PATH} from \"../../app/App\";\r\nimport {PacksTable} from \"./PacksTable\";\r\n\r\nexport const Packs = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const authUserId = useSelector<AppRootStateType, string>(state => state.auth._id)\r\n    const error = useSelector<AppRootStateType, string>(state => state.packs.error)\r\n    const {\r\n        cardPacksTotalCount,\r\n        page,\r\n        cardPacks,\r\n        pageCount,\r\n        requestStatus\r\n    } = useSelector<AppRootStateType, PacksStateType>(state => state.packs)\r\n\r\n    const {\r\n        minCardsCount,\r\n        maxCardsCount,\r\n        userId\r\n    } = useSelector<AppRootStateType, GetSortedPacksType>(state => state.packs.sortParams)\r\n    const dispatch = useDispatch()\r\n\r\n    const [searchByName, setSearchByName] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) dispatch(getPacksTC())\r\n    }, [])\r\n\r\n    const onPrivatePacksSearch = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.checked) {\r\n            dispatch(getPacksTC({userId: authUserId, page: 1}))\r\n        } else {\r\n            dispatch(getPacksTC({userId: '', page: 1}))\r\n        }\r\n    }\r\n\r\n    const onSearchByName = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            dispatch(getPacksTC({nameToSearch: searchByName}))\r\n        }\r\n    }\r\n    const onCardsCountChange = useCallback(([minValue, maxValue]: Array<number | undefined>) => {\r\n        dispatch(getPacksTC({minCardsCount: minValue, maxCardsCount: maxValue}))\r\n    }, [dispatch])\r\n\r\n    const paginatorPage = useCallback((page: number, pageCount: number | undefined) => {\r\n        dispatch(getPacksTC({page, pageCount}))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) return <Redirect to={PATH.LOGIN}/>\r\n\r\n    return (\r\n        <div className={style.packs}>\r\n            <h2>Packs</h2>\r\n            <div className={style.filter}>\r\n                {/*поиск приватных колод*/}\r\n                <label><input type=\"checkbox\" checked={!!userId} onChange={onPrivatePacksSearch}/>\r\n                    My packs</label>\r\n                {/*фильтр по названию колоды*/}\r\n                <label>Search packs by name: <input placeholder={'Press Enter to search'}\r\n                                                    onKeyPress={onSearchByName}\r\n                                                    value={searchByName}\r\n                                                    onChange={e => setSearchByName(e.currentTarget.value)}\r\n                /></label>\r\n\r\n                {/*двойной range для сортировки по кол-ву карточек в колоде*/}\r\n                <div className={style.rangeContainer}>\r\n                    Search packs by cards count:\r\n                    <DoubleRange minValue={minCardsCount} maxValue={maxCardsCount} onValuesChange={onCardsCountChange}\r\n                                 maxRangeLimit={200}/>\r\n                </div>\r\n            </div>\r\n            <div className={error && commonStyle.error}>{error}</div>\r\n            {/*таблица с колодами*/}\r\n            <PacksTable cardPacks={cardPacks} authUserId={authUserId} requestStatus={requestStatus}/>\r\n            {/*Pagination*/}\r\n            <div className={style.pagination}>\r\n                <Paginator current={page}\r\n                           pageCount={pageCount}\r\n                           total={cardPacksTotalCount}\r\n                           onChange={paginatorPage}\r\n                           requestStatus={requestStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {CardDataType, cardsAPI, GetSortedCardsType, NewCardDataType, SortDirections} from \"../../api/api\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - 'idle' (неактивный)\r\n    error: '',\r\n    cards: [] as Array<CardDataType>,\r\n    packUserId: \"\",\r\n    cardsTotalCount: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    sortParams: {\r\n        question: '',\r\n        answer: '',\r\n        sortDirection: SortDirections.Down,\r\n        propToSortBy: undefined,\r\n        minGrade: 0,\r\n        maxGrade: 5,\r\n        page: 1,\r\n        pageCount: 10\r\n    } as GetSortedCardsType,\r\n}\r\n\r\nexport const cardsReducer = (state = initialState, action: ActionsType): CardsStateType => {\r\n    switch (action.type) {\r\n        case 'CARDS/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'CARDS/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        case 'CARDS/SET-SORT-PARAMS': {\r\n            return {\r\n                ...state,\r\n                sortParams: {...state.sortParams, ...action.sortParams}\r\n            }\r\n        }\r\n        case 'CARDS/SET-CARDS': {\r\n            return {\r\n                ...state,\r\n                cards: action.cards,\r\n                packUserId: action.packUserId,\r\n                page: action.page,\r\n                cardsTotalCount: action.cardsTotalCount,\r\n                pageCount: action.pageCount\r\n            }\r\n        }\r\n        case 'CARDS/SET-NEW-GRADE': {\r\n            return {\r\n                ...state,\r\n                cards: state.cards.map(c => c._id === action.cardId ? {...c, grade: action.grade} : c)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'CARDS/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'CARDS/SET-ERROR', error} as const)\r\nconst setSortParamsAC = (sortParams: GetSortedCardsType) => ({type: 'CARDS/SET-SORT-PARAMS', sortParams} as const)\r\nexport const setCardsAC = (cards: Array<CardDataType>, packUserId: string, page: number, cardsTotalCount: number, pageCount: number) =>\r\n    ({type: 'CARDS/SET-CARDS', cards, packUserId, page, cardsTotalCount, pageCount} as const)\r\nexport const setNewGradeAC = (grade: number, cardId: string) => ({type: 'CARDS/SET-NEW-GRADE', grade, cardId} as const)\r\n\r\n//thunk\r\nexport const getCardsTC = (packId: string, params: GetSortedCardsType = {}) => (dispatch: ThunkCustomDispatch,\r\n                                                                                getState: () => AppRootStateType) => {\r\n    if (params) dispatch(setSortParamsAC(params))\r\n    const sortParams = getState().cards.sortParams\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.getCards(packId, sortParams)\r\n        .then(res => {\r\n            dispatch(setCardsAC(res.data.cards, res.data.packUserId, res.data.page, res.data.cardsTotalCount, res.data.pageCount))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const addCardTC = (packId: string, params: NewCardDataType = {}) => (\r\n    dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.addCard(packId, params)\r\n        .then(() => {\r\n            dispatch(getCardsTC(packId))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const deleteCardTC = (packId: string, cardId: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.deleteCard(cardId)\r\n        .then(() => {\r\n            dispatch(getCardsTC(packId))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const updateCardTC = (packId: string, cardId: string, params: NewCardDataType = {}, comments?: string) => (\r\n    dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.updateCard(cardId, params, comments)\r\n        .then(() => {\r\n            dispatch(getCardsTC(packId))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const updateGradeTC = (grade: number, cardId: string) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.updateGrade(grade, cardId)\r\n        .then(res => {\r\n            dispatch(setNewGradeAC(res.data.updatedGrade.grade, res.data.updatedGrade.card_id))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type CardsStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setSortParamsAC>\r\n    | ReturnType<typeof setCardsAC>\r\n    | ReturnType<typeof setNewGradeAC>\r\n\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import {CardDataType} from \"../../api/api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {ColumnsType} from \"antd/es/table/interface\";\r\nimport {Button, Table} from \"antd\";\r\nimport {DeleteTwoTone, EditTwoTone, PlusSquareTwoTone} from '@ant-design/icons';\r\nimport React, {useCallback, useState} from \"react\";\r\nimport {addCardTC, deleteCardTC, updateCardTC} from \"./cards-reducer\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {AddItemModal, UploadedFileType} from \"../Modals/AddItemModal/AddItemModal\";\r\nimport {UpdateItemModal} from \"../Modals/UpdateItemModal/UpdateItemModal\";\r\nimport {DeleteItemModal} from \"../Modals/DeleteItemModal/DeleteItemModal\";\r\n\r\ntype CardsTablePropsType = {\r\n    cards: Array<CardDataType>\r\n    packId: string\r\n    packUserId: string\r\n    authUserId: string\r\n    requestStatus: RequestStatusType\r\n}\r\ntype ButtonsDataType = {\r\n    cardId: string\r\n    question: string\r\n    answer: string\r\n}\r\ntype CardType = {\r\n    key: string\r\n    question: string\r\n    answer: string\r\n    grade: number\r\n    updated: Date\r\n    packId: string\r\n    buttons: ButtonsDataType\r\n}\r\n\r\nexport const CardsTable = React.memo(({cards, packId, packUserId, authUserId, requestStatus}: CardsTablePropsType) => {\r\n    const [showAddItemModal, setShowAddItemModal] = useState<boolean>(false)\r\n    const [currentCardID, setCurrentCardID] = useState<string>(\"\")\r\n    const [question, setQuestion] = useState<string>(\"\")\r\n    const [answer, setAnswer] = useState<string>(\"\")\r\n    const [showUpdateItemModal, setShowUpdateItemModal] = useState<boolean>(false)\r\n    const [showDeleteItemModal, setShowDeleteItemModal] = useState<boolean>(false)\r\n    const dispatch = useDispatch()\r\n\r\n    const onAddCardClick = useCallback((values: Array<string>, fileData: Array<UploadedFileType>) => {\r\n        //values содержатся в массиве в том порядке, в котором передаем inputLabels в AddItemModal\r\n        dispatch(addCardTC(packId, {\r\n            question: values[0],\r\n            answer: values[1],\r\n            questionImg: fileData[0].base64,\r\n            answerImg: fileData[1].base64\r\n        }))\r\n    }, [dispatch, packId])\r\n\r\n    const onDeleteClick = useCallback((isToBeDeleted: boolean) => {\r\n        if (isToBeDeleted) {\r\n            dispatch(deleteCardTC(packId, currentCardID))\r\n            setShowDeleteItemModal(false)\r\n        }\r\n    }, [dispatch, packId, currentCardID])\r\n\r\n    const onUpdateClick = useCallback((values: Array<string>) => {\r\n        //values содержатся в массиве в том порядке, в котором передаем inputLabels и inputValues в UpdateItemModal\r\n        dispatch(updateCardTC(packId, currentCardID, {question: values[0], answer: values[1]}))\r\n    }, [dispatch, packId, currentCardID])\r\n\r\n    const data: Array<CardType> = cards.map(c => ({\r\n        key: c._id,\r\n        question: c.question,\r\n        answer: c.answer,\r\n        grade: c.grade,\r\n        updated: c.updated,\r\n        packId: c.cardsPack_id,\r\n        buttons: {cardId: c._id, question: c.question, answer: c.answer}\r\n    }))\r\n\r\n    const columns: ColumnsType<CardType> = [\r\n        {title: 'Question', dataIndex: 'question', key: 'question'},\r\n        {title: 'Answer', dataIndex: 'answer', key: 'answer'},\r\n        {title: 'Grade', dataIndex: 'grade', key: 'grade'},\r\n        {title: 'Last Update', dataIndex: 'updated', key: 'updated'},\r\n        {title: 'Pack ID', dataIndex: 'packId', key: 'packId'},\r\n        {\r\n            title: () => <Button onClick={() => setShowAddItemModal(true)} disabled={packUserId !== authUserId}\r\n                                 type={'ghost'} size={'large'}\r\n                                 icon={<PlusSquareTwoTone style={{fontSize: '16px'}}/>}/>,\r\n            dataIndex: 'buttons',\r\n            key: 'buttons',\r\n            render: ({cardId, question, answer}: ButtonsDataType) => <>\r\n                {packUserId === authUserId && <>\r\n                    <Button onClick={() => {\r\n                        setCurrentCardID(cardId)\r\n                        setShowDeleteItemModal(true)\r\n                    }} icon={<DeleteTwoTone style={{fontSize: '16px'}}/>} shape=\"circle\" ghost/>\r\n                    <Button onClick={() => {\r\n                        setCurrentCardID(cardId)\r\n                        setQuestion(question)\r\n                        setAnswer(answer)\r\n                        setShowUpdateItemModal(true)\r\n                    }} icon={<EditTwoTone style={{fontSize: '16px'}}/>} shape=\"circle\" ghost/>\r\n                </>}\r\n            </>,\r\n        },\r\n    ];\r\n\r\n    return <>\r\n        <Table columns={columns} dataSource={data} pagination={false} style={{width: '100%'}}\r\n               size={'small'} loading={requestStatus === 'loading'} tableLayout={'fixed'}/>\r\n        {/*модалка для добавления карточки*/}\r\n        {showAddItemModal &&\r\n        <AddItemModal show={showAddItemModal} setShow={setShowAddItemModal} inputLabels={[\"Question: \", \"Answer: \"]}\r\n                      itemToAdd={'card'} filesToUpload={['question pic', 'answer pic']}\r\n                      onAddBtnClick={onAddCardClick}/>}\r\n        {/*модалка для удаления карточки*/}\r\n        {showDeleteItemModal && <DeleteItemModal show={showDeleteItemModal} setShow={setShowDeleteItemModal}\r\n                                                 itemToDelete={'pack'} onDeleteBtnClick={onDeleteClick}/>}\r\n        {/*модалка для редактирования карточки*/}\r\n        {showUpdateItemModal && <UpdateItemModal show={showUpdateItemModal} setShow={setShowUpdateItemModal}\r\n                                                 itemToUpdate={'card'} onUpdateBtnClick={onUpdateClick}\r\n                                                 inputLabels={[\"Question: \", \"Answer: \"]}\r\n                                                 inputValues={[question, answer]}/>}\r\n    </>\r\n})","import React, {KeyboardEvent, useCallback, useEffect, useState} from \"react\";\r\nimport style from \"./Cards.module.css\";\r\nimport {NavLink, Redirect, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {GetSortedCardsType, PackDataType} from \"../../api/api\";\r\nimport {DoubleRange} from \"../../common/DoubleRange/DoubleRange\";\r\nimport {CardsStateType, getCardsTC, setCardsAC} from \"./cards-reducer\";\r\nimport {Paginator} from \"../Paginator/Paginator\";\r\nimport {PATH} from \"../../app/App\";\r\nimport {CardsTable} from \"./CardsTable\";\r\nimport commonStyle from \"../../common/styles/error.module.css\";\r\n\r\n\r\nexport const Cards = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const authUserId = useSelector<AppRootStateType, string>(state => state.auth._id)\r\n    const {packId} = useParams<{ packId?: any }>()    //читаем id колоды из URL\r\n    const {minGrade, maxGrade} = useSelector<AppRootStateType, GetSortedCardsType>(state => state.cards.sortParams)\r\n    const {\r\n        cards,\r\n        packUserId,\r\n        cardsTotalCount,\r\n        page,\r\n        pageCount,\r\n        error,\r\n        requestStatus\r\n    } = useSelector<AppRootStateType, CardsStateType>(state => state.cards)\r\n    const packs = useSelector<AppRootStateType, Array<PackDataType>>(state => state.packs.cardPacks)\r\n    const dispatch = useDispatch()\r\n\r\n    const [answer, setAnswer] = useState<string>(\"\")\r\n    const [question, setQuestion] = useState<string>(\"\")\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn && packId) dispatch(getCardsTC(packId))   //запрашиваем карточки, если залогинен и есть packId\r\n        //зачищаем карточки при выходе со страницы Cards, чтобы во время запроса новых карточек в Cards не просвечивались старые\r\n        return () => {\r\n            dispatch(setCardsAC([], \"\", 1, 0, 10))\r\n        }\r\n    }, [])\r\n\r\n    const onGradeRangeChange = useCallback(([minValue, maxValue]: Array<number | undefined>) => {\r\n        dispatch(getCardsTC(packId, {minGrade: minValue, maxGrade: maxValue}))\r\n    }, [packId, dispatch])\r\n\r\n    const onSearchByQuestion = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            dispatch(getCardsTC(packId, {question: question}))\r\n        }\r\n    }\r\n    const onSearchByAnswer = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            dispatch(getCardsTC(packId, {answer: answer}))\r\n        }\r\n    }\r\n    const paginatorPage = useCallback((page: number, pageCount: number | undefined) => {\r\n        dispatch(getCardsTC(packId, {page, pageCount}))\r\n    }, [packId, dispatch])\r\n    //защита от попытки открыть Learn с выдуманным packId в url\r\n    let isPackFound = packs.some(p => p._id === packId)\r\n\r\n    if (!isLoggedIn) return <Redirect to={PATH.LOGIN}/>\r\n    if (isLoggedIn && !packId || isLoggedIn && !isPackFound) return <Redirect to={PATH.PACKS}/>\r\n\r\n    return (\r\n        <div className={style.cards}>\r\n            <h2><NavLink to={PATH.PACKS} activeClassName={style.active}>⏴ Packs</NavLink></h2>\r\n            <div className={style.filter}>\r\n                {/*фильтр карточек по вопросу*/}\r\n                <label>Search cards by question: <input placeholder={'Press Enter to search'}\r\n                                                        onKeyPress={onSearchByQuestion}\r\n                                                        value={question}\r\n                                                        onChange={e => setQuestion(e.currentTarget.value)}/></label>\r\n                {/*фильтр карточек по ответу*/}\r\n                <label>Search cards by answer: <input placeholder={'Press Enter to search'}\r\n                                                      onKeyPress={onSearchByAnswer}\r\n                                                      value={answer}\r\n                                                      onChange={e => setAnswer(e.currentTarget.value)}/></label>\r\n                {/*двойной range для сортировки по оценкам (grade)*/}\r\n                <div className={style.rangeContainer}>Search cards by grade:\r\n                    <DoubleRange minValue={minGrade} maxValue={maxGrade} onValuesChange={onGradeRangeChange}\r\n                                 maxRangeLimit={5}/></div>\r\n            </div>\r\n            <div className={error && commonStyle.error}>{error}</div>\r\n            {/*таблица с карточками*/}\r\n            <CardsTable cards={cards} packId={packId} packUserId={packUserId} authUserId={authUserId} requestStatus={requestStatus}/>\r\n            {/*Pagination*/}\r\n            <div className={style.pagination}>\r\n                <Paginator current={page}\r\n                           pageCount={pageCount}\r\n                           total={cardsTotalCount}\r\n                           onChange={paginatorPage}\r\n                           requestStatus={requestStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {RequestStatusType, setAuthUserDataAC} from \"../features/Login/auth-reducer\";\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialAppStateType = initialState, action: AppActionsType): InitialAppStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {type: 'APP/SET-STATUS', status} as const\r\n}\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {type: 'APP/SET-ERROR', error} as const\r\n}\r\nexport const setIsInitializedAC = (isInitialized: boolean) => {\r\n    return {type: 'APP/SET-INITIALIZED', isInitialized} as const\r\n}\r\n\r\n//thunk\r\nexport const initializeAppTC = () => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.me()\r\n        .then(res => {\r\n            dispatch(setAuthUserDataAC(res.data._id, res.data.email, res.data.name, res.data.avatar, true))\r\n            dispatch(setAppStatusAC('success'))\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setAppErrorAC(error))\r\n            dispatch(setAppStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setAppErrorAC(''))\r\n            }, 3000)\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialAppStateType = typeof initialState\r\n\r\nexport type AppActionsType =\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setIsInitializedAC>\r\n\r\ntype ThunkCustomDispatch = Dispatch<AppActionsType | ReturnType<typeof setAuthUserDataAC>>","import {CardDataType} from \"../api/api\";\r\n\r\nexport const getRandomCard = (cards: Array<CardDataType>): CardDataType => {\r\n    let cardsCopy = [...cards]\r\n    let totalSum = cardsCopy.reduce((acc, card) => acc + ((6 - card.grade)**2), 0)\r\n    let random = Math.random() * totalSum\r\n    let i = 0\r\n    let sum = 0\r\n    while (sum < random) {\r\n        sum += (6 - cardsCopy[i].grade)**2\r\n        i++\r\n    }\r\n    return cardsCopy[i-1]\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport style from \"./Learn.module.css\";\r\nimport {NavLink, Redirect, useHistory, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {CardDataType, PackDataType} from \"../../api/api\";\r\nimport {CardsStateType, getCardsTC, setCardsAC, updateGradeTC} from \"../Cards/cards-reducer\";\r\nimport {PATH} from \"../../app/App\";\r\nimport {Modal} from \"../../common/Modal/Modal\";\r\nimport {getRandomCard} from \"../../utils/get-random-card\";\r\nimport commonStyle from \"../../common/styles/error.module.css\";\r\n\r\n\r\nexport const Learn = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const history = useHistory()\r\n    const [showAnswer, setShowAnswer] = useState<boolean>(false)\r\n    const {packId} = useParams<{ packId?: any }>()    //читаем id колоды из URL\r\n    const {\r\n        cards,\r\n        error,\r\n    } = useSelector<AppRootStateType, CardsStateType>(state => state.cards)\r\n    const packs = useSelector<AppRootStateType, Array<PackDataType>>(state => state.packs.cardPacks)\r\n    const dispatch = useDispatch()\r\n    const [isFirstCard, setIsFirstCard] = useState<boolean>(true);\r\n    const [card, setCard] = useState<CardDataType>({\r\n        _id: '',\r\n        user_id: '',\r\n        cardsPack_id: '',\r\n        answer: '',\r\n        question: '',\r\n        grade: 0,\r\n        shots: 0,\r\n        type: 'card',\r\n        rating: 0,\r\n        comments: '',\r\n        created: new Date(),\r\n        updated: new Date(),\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        if (isFirstCard) {\r\n            dispatch(getCardsTC(packId)); //запрашиваем карточки\r\n            setIsFirstCard(false);\r\n        }\r\n        if (cards.length > 0 && card._id === '') setCard(getRandomCard(cards))\r\n    }, [dispatch, packId, cards, card, isFirstCard])\r\n\r\n    useEffect(() => {\r\n        //зачищаем карточки при выходе со страницы Learn, чтобы во время запроса новых карточек в Cards не просвечивались старые\r\n        return () => {\r\n            dispatch(setCardsAC([], \"\", 1, 0, 10))\r\n        }\r\n    }, [])\r\n\r\n    const onGradeBtnClick = (grade: string | undefined) => {\r\n        dispatch(updateGradeTC(grade && +grade || 0, card._id))\r\n        setCard(getRandomCard(cards))\r\n        setShowAnswer(false)\r\n    }\r\n    const onNextClick = () => {\r\n        setCard(getRandomCard(cards))\r\n        setShowAnswer(false)\r\n    }\r\n\r\n    //защита от попытки открыть Learn с выдуманным packId в url\r\n    let isPackFound = packs.some(p => p._id === packId)\r\n\r\n    if (!isLoggedIn) return <Redirect to={PATH.LOGIN}/>\r\n    if (!isPackFound) return <Redirect to={PATH.PACKS}/>\r\n\r\n    return <Modal show enableBackground modalWidthPx={800} modalHeightPx={600}\r\n                  backgroundOnClick={() => history.push(PATH.PACKS)}>\r\n        <div className={error && commonStyle.error}>{error}</div>\r\n        {/*вопрос*/}\r\n        <div className={style.learn}>\r\n            <div className={style.section}>\r\n                <h4>Question: </h4>\r\n                <p className={style.text}>{card.question}</p>\r\n            </div>\r\n            {!showAnswer && <button className={style.section} onClick={() => setShowAnswer(true)}>Check answer</button>}\r\n            {/*ответ*/}\r\n            {showAnswer && <>\r\n                <div className={style.section}>\r\n                    <h4>Answer: </h4>\r\n                    <p className={style.text}>{card.answer}</p>\r\n                </div>\r\n                <div className={style.buttons}>\r\n                    <button onClick={e => onGradeBtnClick(e.currentTarget.dataset.grade)} data-grade={'1'}>\r\n                        Не знал/<br/>Didn’t know\r\n                    </button>\r\n                    <button onClick={e => onGradeBtnClick(e.currentTarget.dataset.grade)} data-grade={'2'}>\r\n                        Забыл/<br/>Forgot\r\n                    </button>\r\n                    <button onClick={e => onGradeBtnClick(e.currentTarget.dataset.grade)} data-grade={'3'}>\r\n                        Долго думал/<br/>Thought too long\r\n                    </button>\r\n                    <button onClick={e => onGradeBtnClick(e.currentTarget.dataset.grade)} data-grade={'4'}>\r\n                        Почти угадал/<br/>Nearly guessed\r\n                    </button>\r\n                    <button onClick={e => onGradeBtnClick(e.currentTarget.dataset.grade)} data-grade={'5'}>\r\n                        Знал/<br/>I knew it\r\n                    </button>\r\n                </div>\r\n            </>\r\n            }\r\n            <div className={style.buttons}>\r\n                <NavLink to={PATH.PACKS}> Cancel </NavLink>\r\n                <button onClick={onNextClick}>Next</button>\r\n            </div>\r\n        </div>\r\n    </Modal>\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {Modal} from \"../../../common/Modal/Modal\";\r\n\r\ntype ScrollUpModalPropsType = {}\r\n\r\nexport const ScrollUpModal: React.FC<ScrollUpModalPropsType> = React.memo(({}) => {\r\n    const [show, setShow] = useState(false)\r\n    let scrollSpeed = 10 // пауза между интервалами: 50мс, поэтому 10 здесь означает, что полный скролл займёт 500мс (полсекунды)\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', handleScroll)\r\n    }, [])\r\n\r\n    const handleScroll = () => { //условия появления модалки\r\n        if (window.pageYOffset > 400) {\r\n            setShow(true)\r\n        } else {\r\n            setShow(false)\r\n        }\r\n    }\r\n\r\n    const scroll = () => {\r\n        const singleScrollLength = window.pageYOffset / scrollSpeed //отрезок, проскролленый за 1 интервал (ниже)\r\n        let lastScrollPosition = window.pageYOffset // позиция скролла во время предыдущего интервала (ниже)\r\n\r\n        const timer = setInterval(() => {\r\n            if (lastScrollPosition < window.pageYOffset) { //остановить скролл, если юзер скроллит вниз во время скролла вверх\r\n                clearInterval(timer)\r\n            } else {\r\n                lastScrollPosition = window.pageYOffset //иначе обновляем значение предыдущей позиции скролла\r\n            }\r\n\r\n            window.scroll(0, lastScrollPosition - singleScrollLength) //скроллим на 1 отрезок вверх\r\n            if (window.pageYOffset === 0) clearInterval(timer) //остановить скролл, если находимся в самом верху\r\n        }, 50)\r\n    }\r\n\r\n    return <Modal enableBackground={false} modalHeightPx={50} modalWidthPx={50} show={show}\r\n                  modalOnClick={scroll} modalStyle={{\r\n        top: '85vh',\r\n        left: '60px',\r\n        border: '1px solid #d9d9d9',\r\n        borderRadius: '2px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        backgroundColor: '#fafafa',\r\n        boxShadow: '5px 5px 5px grey',\r\n        opacity: '0.5',\r\n        cursor: 'pointer'\r\n    }}>\r\n        <h2>⏶</h2>\r\n    </Modal>\r\n})\r\n","export default __webpack_public_path__ + \"static/media/maria.0fbd0c09.jpg\";","export default __webpack_public_path__ + \"static/media/leonid.50e258e4.jpg\";","export default __webpack_public_path__ + \"static/media/anton.01b75db7.png\";","import React from \"react\";\r\nimport style from \"./TeamPresentation.module.css\";\r\nimport maria from \"../../assets/images/maria.jpg\";\r\nimport leonid from \"../../assets/images/leonid.jpg\";\r\nimport anton from \"../../assets/images/anton.png\";\r\n\r\nexport const TeamPresentation = React.memo(() => {\r\n\r\n    return (\r\n        <div className={style.teamPresentation}>\r\n            <div className={style.section}>Dream Team</div>\r\n            <div className={style.avatars}>\r\n                <div className={style.maria} style={{backgroundImage: `url(${maria})`}}> </div>\r\n                <div className={style.leonid} style={{backgroundImage: `url(${leonid})`}}> </div>\r\n                <div className={style.anton} style={{backgroundImage: `url(${anton})`}}> </div>\r\n            </div>\r\n            <div className={style.section}>Presents...</div>\r\n        </div>\r\n    );\r\n})","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Forgot} from \"../features/Forgot/Forgot\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Register} from \"../features/Register/Register\";\r\nimport {SetPassword} from \"../features/SetPassword/SetPassword\";\r\nimport {Profile} from \"../features/Profile/Profile\";\r\nimport {Header} from \"../features/Header/Header\";\r\nimport {Packs} from \"../features/Packs/Packs\";\r\nimport {Cards} from \"../features/Cards/Cards\";\r\nimport {initializeAppTC} from \"./app-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {Learn} from \"../features/Learn/Learn\";\r\nimport {ScrollUpModal} from '../features/Modals/ScrollUpModal/ScrollUpModal';\r\nimport {TeamPresentation} from \"../preloader/TeamPresentation/TeamPresentation\";\r\n\r\nexport const PATH = {\r\n    LOGIN: \"/login\",\r\n    REGISTER: \"/register\",\r\n    FORGOT: \"/forgot\",\r\n    SET_PASSWORD: \"/set-new-password\",\r\n    PROFILE: \"/profile\",\r\n    PACKS: \"/packs\",\r\n    CARDS: \"/cards\",\r\n    LEARN: \"/learn\",\r\n}\r\n\r\nconst App = () => {\r\n    let isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    let dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <TeamPresentation/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <Switch>\r\n                <Route exact path={['/', `${PATH.PROFILE}`]} render={() => <Profile/>}/>\r\n                <Route path={PATH.REGISTER} render={() => <Register/>}/>\r\n                <Route path={PATH.FORGOT} render={() => <Forgot/>}/>\r\n                <Route path={`${PATH.SET_PASSWORD}/:token?`} render={() => <SetPassword/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.PACKS} render={() => <Packs/>}/>\r\n                <Route path={`${PATH.CARDS}/:packId?`} render={() => <Cards/>}/>\r\n                <Route path={`${PATH.LEARN}/:packId?`} render={() => <Learn/>}/>\r\n                <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                <Redirect from={'*'} to={'/404'}/>\r\n            </Switch>\r\n            {/*кнопка для скролла вверх появится только, если юзер промотал вниз на 400px*/}\r\n            <ScrollUpModal/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    //\r\n}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        //cases\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\n// export const setSomethingAC = () => ({type: 'PROFILE/SET-SOMETHING'} as const)\r\n\r\n//thunk\r\n// export const doSomethingTC = () => (dispatch: ThunkDispatch) => {\r\n//\r\n// }\r\n\r\n//types\r\nexport type InitialStateType = typeof initialState\r\n//объединение типов actionов:\r\n// export type ActionsType = ReturnType<typeof setSomethingAC>\r\n// тип диспатча:\r\n// type ThunkDispatch = Dispatch<ReturnType<typeof setSomethingAC>>","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {registerReducer} from \"../features/Register/register-reducer\";\r\nimport {setPasswordReducer} from \"../features/SetPassword/set-password-reducer\";\r\nimport {profileReducer} from \"../features/Profile/profile-reducer\";\r\nimport {forgotReducer} from \"../features/Forgot/forgot-reducer\";\r\nimport {packsReducer} from \"../features/Packs/packs-reducer\";\r\nimport {cardsReducer} from \"../features/Cards/cards-reducer\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n// комбайним редюсеры\r\nconst rootReducer = combineReducers({  //стейт\r\n    auth: authReducer,\r\n    register: registerReducer,\r\n    forgot: forgotReducer,\r\n    setPassword: setPasswordReducer,\r\n    profile: profileReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer,\r\n    app: appReducer\r\n})\r\n//создаем store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n//тип стейта\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// для вызова store из консоли\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"error_error__yFEcl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2ck6i\",\"notice\":\"Login_notice__3_Xcq\",\"loading\":\"Login_loading__1oP3o\",\"error\":\"Login_error__1oq8R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__10VB5\",\"active\":\"Header_active__3B1Kt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"learn\":\"Learn_learn__14aic\",\"text\":\"Learn_text__1YGOt\",\"section\":\"Learn_section__2rsjK\",\"buttons\":\"Learn_buttons__w58Zp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"teamPresentation\":\"TeamPresentation_teamPresentation__4hEdD\",\"section\":\"TeamPresentation_section__34MZX\",\"avatars\":\"TeamPresentation_avatars__2UZnj\",\"maria\":\"TeamPresentation_maria__1JPVL\",\"leonid\":\"TeamPresentation_leonid__1ONdJ\",\"anton\":\"TeamPresentation_anton__2_K7M\",\"oneAvatarAnimation\":\"TeamPresentation_oneAvatarAnimation__17Hsj\",\"twoAvatarsAnimation\":\"TeamPresentation_twoAvatarsAnimation__2r1dO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cards\":\"Cards_cards__1nz5C\",\"filter\":\"Cards_filter__3iNkp\",\"rangeContainer\":\"Cards_rangeContainer__1ny9W\",\"error\":\"Cards_error__2Xcy8\",\"pagination\":\"Cards_pagination__34Qpn\"};"],"sourceRoot":""}