{"version":3,"sources":["features/Header/Header.module.css","features/Packs/Packs.module.css","features/Login/Login.module.css","features/Cards/Cards.module.css","features/Forgot/Forgot.module.css","features/Register/Register.module.css","features/SetPassword/SetPassword.module.css","common/DoubleRange/DoubleRange.module.css","features/Packs/Pack/Pack.module.css","features/Profile/Profile.module.css","api/api.ts","features/Forgot/forgot-reducer.ts","features/Forgot/Forgot.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","features/Register/register-reducer.ts","features/Register/Register.tsx","features/SetPassword/set-password-reducer.ts","features/SetPassword/SetPassword.tsx","features/Profile/Profile.tsx","features/Header/Header.tsx","common/SortButtons/SortButtons.tsx","features/Packs/packs-reducer.ts","common/DoubleRange/DoubleRange.tsx","features/Packs/Pack/Pack.tsx","features/Packs/Packs.tsx","features/Cards/Cards.tsx","app/App.tsx","reportWebVitals.ts","features/Profile/profile-reducer.ts","features/Cards/cards-reducer.ts","app/store.ts","index.tsx"],"names":["module","exports","SortDirections","instance","axios","create","withCredentials","baseURL","authAPI","post","loginData","regData","delete","email","from","message","resetPassData","packsAPI","params","nameToSearch","maxCardsCount","minCardsCount","page","pageCount","sortDirection","propToSortBy","userId","get","name","isPrivate","deckCover","cardsPack","private","packId","put","_id","initialState","requestStatus","error","info","setRequestStatusAC","type","Forgot","useSelector","state","forgot","dispatch","useDispatch","useState","setEmail","className","style","color","value","onChange","e","currentTarget","trim","onClick","then","res","data","catch","response","setErrorAC","sendEmailToResetPassTC","disabled","to","activeClassName","active","isLoggedIn","setAuthUserDataAC","payload","getAuthUserDataTC","Login","auth","formik","useFormik","validate","values","password","initialValues","rememberMe","onSubmit","handleSubmit","login","getFieldProps","errors","checked","responseText","isRegistration","setResponseTextAC","text","setRegistrationAC","Register","register","emailValue","setEmailValue","setPassword","confirmPassword","setConfirmPassword","failedPassword","placeholder","setTimeout","err","requestRegister","SetPassword","token","useParams","password1","setPassword1","password2","setPassword2","localError","setLocalError","onKeyPress","resetPasswordToken","Profile","useEffect","profile","Header","header","PATH","LOGIN","REGISTER","FORGOT","SET_PASSWORD","PROFILE","PACKS","CARDS","SortButtons","React","memo","margin","Up","Down","cardPacks","sortParams","undefined","setPacksAC","setSortParamsAC","getPacksTC","getState","packs","DoubleRange","minRangeLimit","maxRangeLimit","minValue","maxValue","onValuesChange","min","setMin","max","setMax","toString","rangeBlock","doubleRange","onMouseUp","Pack","pack","row","cardsCount","updated","Packs","authUserId","onCardsCountChange","useCallback","onSortByName","onSortByCardsCount","filter","key","width","cellPadding","table","outline","cellWithButtons","map","p","pagination","Cards","cards","minGrade","maxGrade","onSortByGrade","onGradeRangeChange","App","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","question","answer","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.49766102.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__10VB5\",\"active\":\"Header_active__3B1Kt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packs\":\"Packs_packs__11aat\",\"filter\":\"Packs_filter__3-7jv\",\"table\":\"Packs_table__3gfqm\",\"cellWithButtons\":\"Packs_cellWithButtons__i3Ikn\",\"pagination\":\"Packs_pagination__3tqEx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2ck6i\",\"error\":\"Login_error__1oq8R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cards\":\"Cards_cards__1nz5C\",\"filter\":\"Cards_filter__3iNkp\",\"table\":\"Cards_table__39AGJ\",\"cellWithButtons\":\"Cards_cellWithButtons__1wX-M\",\"pagination\":\"Cards_pagination__34Qpn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgot\":\"Forgot_forgot__3iT7N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Register_register__298wP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setPassword\":\"SetPassword_setPassword__ji0HF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rangeBlock\":\"DoubleRange_rangeBlock__eFtuj\",\"doubleRange\":\"DoubleRange_doubleRange__24NqG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Pack_row__1vaZe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__OylV9\"};","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/'\r\n}) //перед каждым pushем на gitHub менять baseURL с http://localhost:7542/2.0/ на https://neko-back.herokuapp.com/2.0/ !\r\n\r\nexport const authAPI = {\r\n    me() { // проверка на залогиненность\r\n        return instance.post<AuthUserData>(`auth/me`)\r\n    },\r\n    login(loginData: LoginDataType) {\r\n        return instance.post<AuthUserData>(`auth/login`, loginData)\r\n    },\r\n    register(regData: RegDataType) {\r\n        return instance.post<{ addedUser: {}, error?: string }>(`auth/register`, regData)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/me`)\r\n    },\r\n    updateUserData(newUserData: NewUserDataType) { // обновление name или аватарки юзера\r\n        return instance.put<{ updatedUser: {}, error?: string }>(`auth/me`, newUserData)\r\n    },\r\n    sendEmailToResetPass(email: string) { // отправляем емайл, если забыл пароль, со страницы Forgot\r\n        return instance.post<ResponseType>(`auth/forgot`, {\r\n            email,\r\n            from: \"test-front-admin <ai73a@yandex.by>\",\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\n                 password recovery link:\r\n                 <a href='http://marygrishchuk.github.io/cards-by-dream-team/#/set-new-password/$token$'>\r\n                 Reset Password</a></div>`\r\n        })\r\n    },\r\n    resetPassword(resetPassData: ResetPassDataType) { // отправка нового пароля со страницы Set New Password\r\n        return instance.post<ResponseType>(`auth/set-new-password`, resetPassData)\r\n    }\r\n}\r\n\r\nexport const packsAPI = {\r\n    getPacks(params: GetSortedPacksType = {}) { // получение колод\r\n        const {\r\n            nameToSearch = '', maxCardsCount = '', minCardsCount = '', page = '', pageCount = '',\r\n            sortDirection = '', propToSortBy = '', userId = ''\r\n        } = params\r\n        return instance.get<GetPackResponseType>(`cards/pack?packName=${nameToSearch}&sortPacks=${sortDirection}` +\r\n            `${propToSortBy}&min=${minCardsCount}&max=${maxCardsCount}&page=${page}&pageCount=${pageCount}&user_id=${userId}`)\r\n    },\r\n    addPack(name?: string, isPrivate?: boolean, deckCover?: string) {  // добавление (создание) колоды\r\n        return instance.post<AddPackResponseType>(`cards/pack`, {cardsPack: {name, private: isPrivate, deckCover}})\r\n    },\r\n    deletePack(packId: string) { //удаление колоды\r\n        return instance.delete<DeletePackResponseType>(`cards/pack?id=${packId}`)\r\n    },\r\n    updatePack(packId: string, name?: string) { //изменение колоды\r\n        return instance.put<UpdatePackResponseType>(`cards/pack`, {cardsPack: {_id: packId, name}})\r\n    },\r\n}\r\n\r\nexport const cardsAPI = {\r\n    getCards(packId: string, params: GetSortedCardsType = {}) { // получение карточек по id колоды\r\n        const {\r\n            question = '', answer = '', sortDirection = '', propToSortBy = '', minGrade = '',\r\n            maxGrade = '', page = '', pageCount = ''\r\n        } = params\r\n        return instance.get<GetCardsResponseType>(`cards/card?cardsPack_id=${packId}&cardQuestion=${question}` +\r\n            `&cardAnswer=${answer}&sortCards=${sortDirection}${propToSortBy}&min=${minGrade}&max=${maxGrade}` +\r\n            `&page=${page}&pageCount=${pageCount}\r\n`)\r\n    },\r\n    addCard(packId: string, params: NewCardDataType = {}) {  // добавление (создание) карточки\r\n        const {\r\n            question, answer, grade, shots, rating, answerImg, questionImg,\r\n            questionVideo, answerVideo, type\r\n        } = params\r\n        return instance.post(`cards/card`, {\r\n            card: {\r\n                cardsPack_id: packId, question, answer, grade, shots,\r\n                rating, answerImg, questionImg, questionVideo, answerVideo, type\r\n            }\r\n        })\r\n    },\r\n    deleteCard(cardId: string) { //удаление карточки\r\n        return instance.delete(`cards/card?id=${cardId}`)\r\n    },\r\n    updateCard(cardId: string, params: NewCardDataType = {}, comments?: string) { //изменение карточки\r\n        const {\r\n            question, answer, grade, shots, rating, answerImg, questionImg,\r\n            questionVideo, answerVideo, type\r\n        } = params\r\n        return instance.put(`cards/card`, {\r\n            card: {\r\n                _id: cardId, question, answer, grade, shots,\r\n                rating, answerImg, questionImg, questionVideo, answerVideo, type, comments\r\n            }\r\n        })\r\n    },\r\n}\r\n\r\n//types\r\nexport type LoginDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type RegDataType = {\r\n    email: string\r\n    password: string\r\n}\r\nexport type NewUserDataType = {\r\n    name: string\r\n    avatar?: string\r\n}\r\nexport type ResetPassDataType = {\r\n    password: string\r\n    resetPasswordToken: string | undefined\r\n}\r\nexport type AuthUserData = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\nexport type ResponseType = {\r\n    info: string\r\n    error?: string\r\n}\r\n\r\nexport type GetPackResponseType = {\r\n    cardPacks: Array<PackDataType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n\r\n}\r\n\r\nexport type PackDataType = {\r\n    _id: string\r\n    name: string\r\n    cardsCount: number\r\n    created: Date\r\n    updated: Date\r\n    user_id: string\r\n    user_name: string\r\n    deckCover: string\r\n    grade: number\r\n    path: string\r\n    private: boolean\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n}\r\n\r\nexport type NewPackType = {\r\n    name?: string\r\n    deckCover?: string\r\n    private?: boolean\r\n}\r\n\r\nexport type AddPackResponseType = {\r\n    newCardsPack: PackDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type DeletePackResponseType = {\r\n    deletedCardsPack: PackDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type UpdatePackResponseType = {\r\n    updatedCardsPack: PackDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport type GetCardsResponseType = {\r\n    cards: Array<CardDataType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\n\r\nexport type CardDataType = {\r\n    _id: string\r\n    question: string\r\n    answer: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: Date\r\n    updated: Date\r\n}\r\n\r\nexport enum SortDirections {\r\n    Up = 0,\r\n    Down = 1,\r\n}\r\n\r\nexport type GetSortedPacksType = {\r\n    nameToSearch?: string\r\n    minCardsCount?: string\r\n    maxCardsCount?: string\r\n    sortDirection?: SortDirections\r\n    propToSortBy?: \"name\" | \"cardsCount\"\r\n    page?: number\r\n    pageCount?: number\r\n    userId?: string\r\n}\r\nexport type GetSortedCardsType = {\r\n    question?: string\r\n    answer?: string\r\n    sortDirection?: SortDirections\r\n    propToSortBy?: \"grade\"\r\n    minGrade?: string\r\n    maxGrade?: string\r\n    page?: number\r\n    pageCount?: number\r\n}\r\n\r\nexport type NewCardDataType = {\r\n    question?: string\r\n    answer?: string\r\n    grade?: 0 | 1 | 2 | 3 | 4 | 5\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n    type?: \"card\"\r\n}\r\n","import {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../api/api\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - \"неактивный\"\r\n    error: '',\r\n    info: ''\r\n}\r\n\r\nexport const forgotReducer = (state: InitialForgotStateType = initialState, action: ActionsType): InitialForgotStateType => {\r\n    switch (action.type) {\r\n        case 'FORGOT/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'FORGOT/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                info: ''\r\n            }\r\n        }\r\n        case 'FORGOT/SET-INFO': {\r\n            return {\r\n                ...state,\r\n                info: action.info,\r\n                error: ''\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'FORGOT/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'FORGOT/SET-ERROR', error} as const)\r\nconst setInfoAC = (info: string) => ({type: 'FORGOT/SET-INFO', info} as const)\r\n\r\n//thunk\r\nexport const sendEmailToResetPassTC = (email: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.sendEmailToResetPass(email)\r\n        .then(res => {\r\n            dispatch(setInfoAC(res.data.info))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialForgotStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setInfoAC>\r\n// тип диспатча:\r\ntype ThunkDispatch = Dispatch<ActionsType>","import React, {ChangeEvent, useState} from \"react\";\r\nimport style from \"./Forgot.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {InitialForgotStateType, sendEmailToResetPassTC} from \"./forgot-reducer\";\r\n\r\nexport const Forgot = () => {\r\n    const {requestStatus, error, info} = useSelector<AppRootStateType, InitialForgotStateType>(state => state.forgot)\r\n    const dispatch = useDispatch()\r\n\r\n    const [email, setEmail] = useState('')\r\n\r\n    const onEmailInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value.trim())\r\n    }\r\n    const onSendBtnClick = () => {\r\n        dispatch(sendEmailToResetPassTC(email))\r\n    }\r\n\r\n    return (\r\n        <div className={style.forgot}>\r\n            Please enter your email, and we'll send you a link to reset your password.\r\n            {requestStatus === 'loading'\r\n                ? <div style={{color: 'green'}}>loading...</div>\r\n                : info && <i>{info}</i>}\r\n            {error && <div style={{color: 'red'}}>{error}</div>}\r\n            <input type=\"email\" value={email} onChange={onEmailInput}/>\r\n            <button onClick={onSendBtnClick} disabled={requestStatus === 'loading'}>Send</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI, LoginDataType} from \"../../api/api\";\r\n\r\nconst initialState = {\r\n    _id: \"\",\r\n    email: \"\",\r\n    name: \"\",\r\n    error: \"\",\r\n    isLoggedIn: false,\r\n    requestStatus: 'idle' as RequestStatusType //изначально статус запроса - \"неактивный\"\r\n}\r\n\r\nexport const authReducer = (state: InitialAuthStateType = initialState, action: ActionsType): InitialAuthStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET-AUTH-USER-DATA': {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        case 'AUTH/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'AUTH/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setAuthUserDataAC = (_id: string, email: string, name: string, isLoggedIn: boolean) => ({\r\n    type: 'AUTH/SET-AUTH-USER-DATA',\r\n    payload: {_id, email, name, isLoggedIn}\r\n} as const)\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'AUTH/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\n\r\nconst setErrorAC = (error: string) => ({type: 'AUTH/SET-ERROR', error} as const)\r\n\r\n\r\n//thunks\r\nexport const loginTC = (loginData: LoginDataType) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.login(loginData)\r\n        .then((res) => {\r\n            dispatch(setAuthUserDataAC(res.data._id, res.data.email, res.data.name, true))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(() => {\r\n            dispatch(setAuthUserDataAC(\"\", \"\", \"\", false))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const getAuthUserDataTC = () => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.me()\r\n        .then(res => {\r\n            dispatch(setAuthUserDataAC(res.data._id, res.data.email, res.data.name, true))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialAuthStateType = typeof initialState\r\nexport type RequestStatusType = 'idle' | 'loading' | 'success' | 'failed'\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setAuthUserDataAC>\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React from \"react\";\r\nimport style from \"./Login.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {InitialAuthStateType, loginTC} from \"./auth-reducer\";\r\nimport {Simulate} from \"react-dom/test-utils\";\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {isLoggedIn, requestStatus, error} = useSelector<AppRootStateType, InitialAuthStateType>(state => state.auth)\r\n\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: \"Email is required\"\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: \"Password is required\"\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n\r\n                <div className={style.login}>\r\n                    {requestStatus === 'loading' && <div style={{color: 'green'}}>loading...</div>}\r\n                    {error && <div style={{color: 'red'}}>{error}</div>}\r\n                    <label>Email</label>\r\n                    <input type=\"email\" {...formik.getFieldProps(\"email\")}/>\r\n                    {formik.errors.email ? <div className={style.error}>{formik.errors.email}</div> : null}\r\n\r\n                    <label>Password</label>\r\n                    <input type=\"password\" {...formik.getFieldProps(\"password\")}/>\r\n                    {formik.errors.password ? <div className={style.error}>{formik.errors.password}</div> : null}\r\n\r\n                    <NavLink to=\"/forgot\" activeClassName={style.active}>Forgot password?</NavLink>\r\n\r\n                    <label>Remember Me<input type=\"checkbox\" {...formik.getFieldProps(\"rememberMe\")}\r\n                                             checked={formik.values.rememberMe}/></label>\r\n\r\n                    <button type={'submit'} color={'primary'}>Login</button>\r\n                    <NavLink to=\"/register\" activeClassName={style.active}>Registration</NavLink>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}","import {authAPI, RegDataType} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nconst initialState = {\r\n    responseText: '',\r\n    isRegistration: false\r\n}\r\n\r\nexport const registerReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        //cases\r\n        case \"REGISTER/SUCCESS_REGISTER\": {\r\n            return {...state, responseText: action.text}\r\n        }\r\n        case \"REGISTER/SET-REGISTRATION\": {\r\n            return {...state, isRegistration: action.isRegistration}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\n// export const setSomethingAC = () => ({type: 'REGISTER/SET-SOMETHING'} as const)\r\nconst setResponseTextAC = (text: string) => ({type: 'REGISTER/SUCCESS_REGISTER', text} as const)\r\nconst setRegistrationAC = (isRegistration: boolean) => ({type: 'REGISTER/SET-REGISTRATION', isRegistration} as const)\r\n//thunk\r\n// export const doSomethingTC = () => (dispatch: ThunkDispatch) => {\r\n//\r\n// }\r\nexport const requestRegister = (regData: RegDataType) => (dispatch: ThunkCustomDispatch) => {\r\n    authAPI.register(regData)\r\n        .then((res) => {\r\n            dispatch(setResponseTextAC('success'))\r\n\r\n            setTimeout(() => {\r\n                dispatch(setRegistrationAC(true))\r\n                dispatch(setResponseTextAC(''))\r\n                dispatch(setRegistrationAC(false))\r\n            }, 1000)\r\n\r\n        })\r\n        .catch((err) => {\r\n\r\n            dispatch(setResponseTextAC(err.response.data.error))\r\n            setTimeout(() => {\r\n                dispatch(setResponseTextAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n//types\r\nexport type InitialStateType = typeof initialState\r\n//объединение типов actionов:\r\n// export type ActionsType = ReturnType<typeof setSomethingAC>\r\ntype ActionsType = ReturnType<typeof setResponseTextAC> | ReturnType<typeof setRegistrationAC>\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {useState} from \"react\";\r\nimport style from \"./Register.module.css\";\r\nimport {NavLink, Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {requestRegister} from \"./register-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\nexport const Register = () => {\r\n    const text = useSelector<AppRootStateType, string>(state => state.register.responseText)\r\n    const isRegistration = useSelector<AppRootStateType, boolean>(state => state.register.isRegistration)\r\n\r\n    const dispatch = useDispatch()\r\n    const [emailValue, setEmailValue] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const regData = {email: emailValue, password: password}\r\n    const setRegister = () => {\r\n        dispatch(requestRegister(regData))\r\n    }\r\n\r\n    const failedPassword = password !== confirmPassword ? true : false\r\n\r\n    if (isRegistration) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.register}>\r\n            <h1>{text}</h1>\r\n            Register\r\n            <input type=\"email\" placeholder={'email'} onChange={(e) => setEmailValue(e.currentTarget.value)}/>\r\n            <input type=\"password\" placeholder={'password'} onChange={(e) => setPassword(e.currentTarget.value)}/>\r\n            <input type=\"password\" placeholder={'confirm password'}\r\n                   onChange={(e) => setConfirmPassword(e.currentTarget.value)}/>\r\n            <button onClick={setRegister} disabled={failedPassword}>Register</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import {authAPI} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - \"неактивный\"\r\n    error: '',\r\n    info: ''\r\n}\r\n\r\nexport const setPasswordReducer = (state: SetPasswordStateType = initialState, action: ActionsType): SetPasswordStateType => {\r\n    switch (action.type) {\r\n        case 'SET-PASSWORD/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'SET-PASSWORD/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                info: ''\r\n            }\r\n        }\r\n        case 'SET-PASSWORD/SET-INFO': {\r\n            return {\r\n                ...state,\r\n                info: action.info,\r\n                error: ''\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'SET-PASSWORD/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'SET-PASSWORD/SET-ERROR', error} as const)\r\nconst setInfoAC = (info: string) => ({type: 'SET-PASSWORD/SET-INFO', info} as const)\r\n\r\n//thunk\r\nexport const resetPasswordTC = (password: string, resetPasswordToken: string | undefined) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.resetPassword({password, resetPasswordToken})\r\n        .then(res => {\r\n            dispatch(setInfoAC(res.data.info))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type SetPasswordStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setInfoAC>\r\n// тип диспатча:\r\ntype ThunkDispatch = Dispatch<ActionsType>","import React, {ChangeEvent, useState} from \"react\";\r\nimport style from \"./SetPassword.module.css\";\r\nimport {NavLink, Redirect, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {resetPasswordTC, SetPasswordStateType} from \"./set-password-reducer\";\r\n\r\nexport const SetPassword = () => {\r\n    const {requestStatus, error, info} = useSelector<AppRootStateType, SetPasswordStateType>(state => state.setPassword)\r\n    const dispatch = useDispatch()\r\n    const {token} = useParams<{ token?: string }>()\r\n\r\n    const [password1, setPassword1] = useState('')\r\n    const [password2, setPassword2] = useState('')\r\n    const [localError, setLocalError] = useState('')\r\n\r\n    const onPassword1Input = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword1(e.currentTarget.value)\r\n    }\r\n    const onPassword2Input = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword2(e.currentTarget.value)\r\n    }\r\n    const onSubmit = () => {\r\n        if (password1 === password2) {\r\n            dispatch(resetPasswordTC(password1, token))\r\n        } else {\r\n            setLocalError(\"Passwords don't match.\")\r\n        }\r\n    }\r\n    if (requestStatus === 'success') return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={style.setPassword}>\r\n            Please enter your new password in each field.\r\n            {requestStatus === 'loading'\r\n                ? <div style={{color: 'green'}}>loading...</div>\r\n                : info && <i>{info}</i>}\r\n            {error && <div style={{color: 'red'}}>{error}</div>}\r\n            {localError && <div style={{color: 'red'}}>{localError}</div>}\r\n            <input type=\"password\" value={password1} onChange={onPassword1Input}\r\n                   onKeyPress={() => setLocalError(\"\")}/>\r\n            <input type=\"password\" value={password2} onChange={onPassword2Input}\r\n                   onKeyPress={() => setLocalError(\"\")}/>\r\n            <button onClick={onSubmit} disabled={requestStatus === 'loading'}>Submit</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import React, {useEffect} from \"react\";\r\nimport style from \"./Profile.module.css\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {getAuthUserDataTC, InitialAuthStateType, logoutTC} from \"../Login/auth-reducer\";\r\n\r\nexport const Profile = () => {\r\n    const {\r\n        email,\r\n        name,\r\n        error,\r\n        isLoggedIn,\r\n        requestStatus\r\n    } = useSelector<AppRootStateType, InitialAuthStateType>(state => state.auth)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) return\r\n        dispatch(getAuthUserDataTC())\r\n    }, [])\r\n\r\n    const onLogoutClick = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isLoggedIn) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={style.profile}>\r\n            Welcome!\r\n            {requestStatus === 'loading' && <div style={{color: 'green'}}>loading...</div>}\r\n            {error && <div style={{color: 'red'}}>{error}</div>}\r\n            <div>{name}</div>\r\n            <div>{email}</div>\r\n            <button onClick={onLogoutClick} disabled={requestStatus === 'loading'}>Log out</button>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport style from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../app/App\";\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div className={style.header}>\r\n            <NavLink to={PATH.LOGIN} activeClassName={style.active}>Login</NavLink>\r\n            <NavLink to={PATH.REGISTER} activeClassName={style.active}>Register</NavLink>\r\n            <NavLink to={PATH.FORGOT} activeClassName={style.active}>Forgot</NavLink>\r\n            <NavLink to={PATH.SET_PASSWORD} activeClassName={style.active}>Set New Password</NavLink>\r\n            <NavLink to={PATH.PROFILE} activeClassName={style.active}>Profile</NavLink>\r\n            <NavLink to={PATH.PACKS} activeClassName={style.active}>Packs</NavLink>\r\n            <NavLink to={PATH.CARDS} activeClassName={style.active}>Cards</NavLink>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport {SortDirections} from \"../../api/api\";\r\n\r\ntype SortButtonsProps = {\r\n    onClick: (sortDirection: SortDirections) => void //сообщаем родителю направление сортировки\r\n}\r\n\r\nexport const SortButtons = React.memo(({onClick}: SortButtonsProps) => {\r\n\r\n    const onUpClick = () => {\r\n        onClick(SortDirections.Up)\r\n    }\r\n    const onDownClick = () => {\r\n        onClick(SortDirections.Down)\r\n    }\r\n\r\n    return <span style={{margin: '0 5px'}}>\r\n        <div>\r\n            <button onClick={onUpClick}>↑</button>\r\n        </div>\r\n        <div>\r\n            <button onClick={onDownClick}>↓</button>\r\n        </div>\r\n    </span>\r\n})","import {GetSortedPacksType, PackDataType, packsAPI, SortDirections} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\nconst initialState = {\r\n    cardPacks: [] as Array<PackDataType>,\r\n    requestStatus: 'idle' as RequestStatusType,\r\n    error: \"\",\r\n    sortParams: {\r\n        nameToSearch: '',\r\n        minCardsCount: '0',\r\n        maxCardsCount: '100',\r\n        sortDirection: SortDirections.Down,\r\n        propToSortBy: undefined,\r\n        page: 1,\r\n        pageCount: 10,\r\n        userId: ''\r\n    } as GetSortedPacksType\r\n}\r\n\r\nexport const packsReducer = (state = initialState, action: ActionsType): PacksStateType => {\r\n    switch (action.type) {\r\n        case 'PACKS/SET-PACKS': {\r\n            return {\r\n                ...state,\r\n                cardPacks: action.cardPacks\r\n            }\r\n        }\r\n        case 'PACKS/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'PACKS/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        case 'PACKS/SET-SORT-PARAMS': {\r\n            return {\r\n                ...state,\r\n                sortParams: {...state.sortParams, ...action.sortParams}\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setPacksAC = (cardPacks: Array<PackDataType>) => ({\r\n    type: 'PACKS/SET-PACKS',\r\n    cardPacks\r\n} as const)\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'PACKS/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\n\r\nconst setErrorAC = (error: string) => ({type: 'PACKS/SET-ERROR', error} as const)\r\nconst setSortParamsAC = (sortParams: GetSortedPacksType) => ({type: 'PACKS/SET-SORT-PARAMS', sortParams} as const)\r\n\r\n//thunk\r\nexport const getPacksTC = (params: GetSortedPacksType = {}) => (dispatch: ThunkCustomDispatch, getState: () => AppRootStateType) => {\r\n    if (params) dispatch(setSortParamsAC(params))\r\n    const sortParams = getState().packs.sortParams\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.getPacks(sortParams)\r\n        .then(res => {\r\n            dispatch(setPacksAC(res.data.cardPacks))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const addPackTC = (name?: string, isPrivate?: boolean, deckCover?: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.addPack(name, isPrivate, deckCover)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const deletePackTC = (packId: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.deletePack(packId)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const updatePackTC = (packId: string, name?: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.updatePack(packId, name)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type PacksStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setPacksAC>\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setSortParamsAC>\r\n\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {ChangeEvent, MouseEventHandler, useEffect, useState} from \"react\";\r\nimport style from \"./DoubleRange.module.css\";\r\n\r\ntype DoubleRangePropsType = {\r\n    minRangeLimit?: string\r\n    maxRangeLimit: string\r\n    minValue: string | undefined\r\n    maxValue: string | undefined\r\n    onValuesChange: ([minValue, maxValue]: Array<string | undefined>) => void\r\n}\r\nexport const DoubleRange = React.memo(({\r\n                                           minRangeLimit = '0',\r\n                                           maxRangeLimit,\r\n                                           minValue,\r\n                                           maxValue,\r\n                                           onValuesChange\r\n                                       }: DoubleRangePropsType) => {\r\n\r\n    const [min, setMin] = useState(minValue)\r\n    const [max, setMax] = useState(maxValue)\r\n\r\n    useEffect(() => {\r\n        if (min === max && max === maxRangeLimit) {\r\n            setMin(state => state && (+state - 1).toString())\r\n        } else if (minValue === maxValue) {\r\n            setMax(state => state && (+state + 1).toString())\r\n        }\r\n    }, [min, max, maxRangeLimit])\r\n\r\n    const onRangeValuesChange = () => {\r\n        onValuesChange([min, max])\r\n    }\r\n\r\n    return <>\r\n        <div className={style.rangeBlock}>\r\n            {min}\r\n            <span className={style.doubleRange} onMouseUp={onRangeValuesChange}>\r\n                    <input type=\"range\" min={minRangeLimit} value={min} onChange={e => setMin(e.currentTarget.value)}\r\n                           max={maxRangeLimit}/>\r\n                    <input type=\"range\" min={minRangeLimit} value={max} onChange={e => setMax(e.currentTarget.value)}\r\n                           max={maxRangeLimit}/>\r\n                </span>\r\n            {max}\r\n        </div>\r\n    </>\r\n})","import {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {PackDataType} from \"../../../api/api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {deletePackTC, updatePackTC} from \"../packs-reducer\";\r\nimport style from \"./Pack.module.css\";\r\n\r\ntype PackPropsType = {\r\n    pack: PackDataType\r\n}\r\nexport const Pack = ({pack}: PackPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onDeleteClick = () => {\r\n        dispatch(deletePackTC(pack._id))\r\n    }\r\n\r\n    const onUpdateClick = () => {\r\n        dispatch(updatePackTC(pack._id))\r\n    }\r\n\r\n    return <tr className={style.row}>\r\n        <td>{pack.name}</td>\r\n        <td>{pack.cardsCount}</td>\r\n        <td>{pack.updated}</td>\r\n        <td>string</td>\r\n        <td>\r\n            <button onClick={onDeleteClick}>Delete</button>\r\n            <button onClick={onUpdateClick}>Update</button>\r\n            <NavLink to={`/cards/${pack._id}`} activeClassName={style.active}>Cards</NavLink>\r\n        </td>\r\n    </tr>\r\n}","import React, {ChangeEvent, KeyboardEvent, useCallback, useEffect} from \"react\";\r\nimport style from \"./Packs.module.css\";\r\nimport {SortButtons} from \"../../common/SortButtons/SortButtons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {getAuthUserDataTC} from \"../Login/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {addPackTC, getPacksTC} from \"./packs-reducer\";\r\nimport {GetSortedPacksType, PackDataType, SortDirections} from \"../../api/api\";\r\nimport {DoubleRange} from \"../../common/DoubleRange/DoubleRange\";\r\nimport {Pack} from \"./Pack/Pack\";\r\n\r\nexport const Packs = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const authUserId = useSelector<AppRootStateType, string>(state => state.auth._id)\r\n    const packs = useSelector<AppRootStateType, Array<PackDataType>>(state => state.packs.cardPacks)\r\n    const error = useSelector<AppRootStateType, string>(state => state.packs.error)\r\n    const {\r\n        minCardsCount,\r\n        maxCardsCount,\r\n        userId\r\n    } = useSelector<AppRootStateType, GetSortedPacksType>(state => state.packs.sortParams)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) dispatch(getPacksTC())\r\n        if (!isLoggedIn) dispatch(getAuthUserDataTC())\r\n    }, [])\r\n\r\n    const onPrivatePacksSearch = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.checked) {\r\n            dispatch(getPacksTC({userId: authUserId}))\r\n        } else {\r\n            dispatch(getPacksTC({userId: ''}))\r\n        }\r\n    }\r\n\r\n    const onSearchByName = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n\r\n        }\r\n    }\r\n    const onCardsCountChange = useCallback(([minValue, maxValue]: Array<string | undefined>) => {\r\n        dispatch(getPacksTC({minCardsCount: minValue, maxCardsCount: maxValue}))\r\n    }, [dispatch])\r\n\r\n    const onSortByName = useCallback((sortDirection: SortDirections) => {\r\n        dispatch(getPacksTC({sortDirection, propToSortBy: \"name\"}))\r\n    }, [dispatch])\r\n\r\n    const onSortByCardsCount = useCallback((sortDirection: SortDirections) => {\r\n        dispatch(getPacksTC({sortDirection, propToSortBy: \"cardsCount\"}))\r\n    }, [dispatch])\r\n\r\n    const onAddBtnClick = () => {\r\n        dispatch(addPackTC())\r\n    }\r\n\r\n    if (!isLoggedIn) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={style.packs}>\r\n            <h2>Packs</h2>\r\n            <div className={style.filter}>\r\n                {/*поиск приватных колод*/}\r\n                <label><input type=\"checkbox\" checked={!!userId} onChange={onPrivatePacksSearch}/> including my private packs</label>\r\n                {/*фильтр по названию колоды*/}\r\n                <label>Search packs by name: <input placeholder={'Press Enter to search'}\r\n                                                    onKeyPress={onSearchByName}/></label>\r\n\r\n                {/*двойной range для сортировки по кол-ву карточек в колоде*/}\r\n                Search packs by cards count:\r\n                <DoubleRange minValue={minCardsCount} maxValue={maxCardsCount} onValuesChange={onCardsCountChange}\r\n                             maxRangeLimit={'200'}/>\r\n            </div>\r\n            {error && <div style={{color: 'red', margin: '0 auto'}}>{error}</div>}\r\n            <table width=\"100%\" cellPadding=\"4\" className={style.table}>\r\n                <tr style={{outline: 'medium solid'}}>\r\n                    <th>\r\n                        <div className={style.cellWithButtons}>Name<SortButtons onClick={onSortByName}/></div>\r\n                    </th>\r\n                    <th>\r\n                        <div className={style.cellWithButtons}>Cards Count<SortButtons onClick={onSortByCardsCount}/>\r\n                        </div>\r\n                    </th>\r\n                    <th>Last Updated</th>\r\n                    <th>URL</th>\r\n                    <th>\r\n                        <button onClick={onAddBtnClick}>Add</button>\r\n                    </th>\r\n                </tr>\r\n\r\n                {/*мапим колоды, чтобы они появились в таблице*/}\r\n                {packs.map(p => <Pack key={p._id} pack={p}/>)}\r\n            </table>\r\n            {/*Pagination*/}\r\n            <div className={style.pagination}>\r\n                Pagination\r\n                {/*номер текущей страницы (сначала вводим, а затем сетаем значение с сервера),*/}\r\n                <input type=\"number\"/>\r\n                {/*отмапленные кнопки для перехода на другие страницы и*/}\r\n                <button>кнопки для перехода на другие страницы</button>\r\n                {/*общее количество страниц*/}\r\n                <span>общее кол-во страниц</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, {KeyboardEvent, useCallback, useEffect} from \"react\";\r\nimport style from \"./Cards.module.css\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {SortButtons} from \"../../common/SortButtons/SortButtons\";\r\nimport {getAuthUserDataTC} from \"../Login/auth-reducer\";\r\nimport {GetSortedCardsType, SortDirections} from \"../../api/api\";\r\nimport {DoubleRange} from \"../../common/DoubleRange/DoubleRange\";\r\n\r\nexport const Cards = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    // const {packId} = useParams<{ packId?: string }>()    //читаем id колоды из URL\r\n    const error = useSelector<AppRootStateType, string>(state => state.cards.error)\r\n    const {minGrade, maxGrade} = useSelector<AppRootStateType, GetSortedCardsType>(state => state.cards.sortParams)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        // if (isLoggedIn && packId) dispatch(getCardsTC(packId))   //запрашиваем карточки, если залогинен и есть packId\r\n        if (!isLoggedIn) dispatch(getAuthUserDataTC())\r\n    }, [])\r\n\r\n    const onSortByGrade = useCallback((sortDirection: SortDirections) => {\r\n        // dispatch(getCardsTC({sortDirection, propToSortBy: \"grade\"}))\r\n    }, [dispatch])\r\n\r\n    const onGradeRangeChange = useCallback(([minValue, maxValue]: Array<string | undefined>) => {\r\n        // dispatch(getCardsTC({minGrade: minValue, maxGrade: maxValue}))\r\n    }, [dispatch])\r\n\r\n    const onSearchByQuestion = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n\r\n        }\r\n    }\r\n    const onSearchByAnswer = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n\r\n        }\r\n    }\r\n\r\n    if (!isLoggedIn) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={style.cards}>\r\n            <h2>Cards</h2>\r\n            <div className={style.filter}>\r\n                {/*фильтр карточек по вопросу*/}\r\n                <label>Search cards by question: <input placeholder={'Press Enter to search'}\r\n                                                        onKeyPress={onSearchByQuestion}/></label>\r\n                {/*фильтр карточек по ответу*/}\r\n                <label>Search cards by answer: <input placeholder={'Press Enter to search'}\r\n                                                      onKeyPress={onSearchByAnswer}/></label>\r\n                {/*двойной range для сортировки по оценкам (grade)*/}\r\n                Search cards by grade:\r\n                <DoubleRange minValue={minGrade} maxValue={maxGrade} onValuesChange={onGradeRangeChange}\r\n                             maxRangeLimit={'5'}/>\r\n            </div>\r\n            {error && <div style={{color: 'red', margin: '0 auto'}}>{error}</div>}\r\n            <table width=\"100%\" cellPadding=\"4\" className={style.table}>\r\n                <tr style={{outline: 'medium solid'}}>\r\n                    <th>Question</th>\r\n                    <th>Answer</th>\r\n                    <th>\r\n                        <div className={style.cellWithButtons}>Grade<SortButtons onClick={onSortByGrade}/></div>\r\n                    </th>\r\n                    <th>Last Updated</th>\r\n                    <th>URL</th>\r\n                    <th>\r\n                        <button>Add</button>\r\n                    </th>\r\n                </tr>\r\n                {/*мапим карточки, чтобы они появились в таблице*/}\r\n                {/*{cards.map(c => <tr key={c._id}>*/}\r\n                {/*    <td>{c.question}</td>*/}\r\n                {/*    <td>{c.answer}</td>*/}\r\n                {/*    <td>{c.grade}</td>*/}\r\n                {/*    <td>{c.updated}</td>*/}\r\n                {/*    <td>string</td>*/}\r\n                {/*    <td>*/}\r\n                {/*        <button>Delete</button>*/}\r\n                {/*        <button>Update</button>*/}\r\n                {/*    </td>*/}\r\n                {/*</tr>)}*/}\r\n\r\n            </table>\r\n            {/*Pagination*/}\r\n            <div className={style.pagination}>\r\n                Pagination\r\n                {/*номер текущей страницы (сначала вводим, а затем сетаем значение с сервера),*/}\r\n                <input type=\"number\"/>\r\n                {/*отмапленные кнопки для перехода на другие страницы и*/}\r\n                <button>кнопки для перехода на другие страницы</button>\r\n                {/*общее количество страниц*/}\r\n                <span>общее кол-во страниц</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Forgot} from \"../features/Forgot/Forgot\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Register} from \"../features/Register/Register\";\r\nimport {SetPassword} from \"../features/SetPassword/SetPassword\";\r\nimport {Profile} from \"../features/Profile/Profile\";\r\nimport {Header} from \"../features/Header/Header\";\r\nimport {Packs} from \"../features/Packs/Packs\";\r\nimport {Cards} from \"../features/Cards/Cards\";\r\n\r\nexport const PATH = {\r\n    LOGIN: \"/login\",\r\n    REGISTER: \"/register\",\r\n    FORGOT: \"/forgot\",\r\n    SET_PASSWORD: \"/set-new-password\",\r\n    PROFILE: \"/profile\",\r\n    PACKS: \"/packs\",\r\n    CARDS: \"/cards\",\r\n}\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header/>\r\n      <Switch>\r\n        <Route exact path={['/', `${PATH.LOGIN}`]} render={() => <Login/>}/>\r\n        <Route path={PATH.REGISTER} render={() => <Register/>}/>\r\n        <Route path={PATH.FORGOT} render={() => <Forgot/>}/>\r\n        <Route path={`${PATH.SET_PASSWORD}/:token?`} render={() => <SetPassword/>}/>\r\n        <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n        <Route path={PATH.PACKS} render={() => <Packs/>}/>\r\n        <Route path={`${PATH.CARDS}/:packId?`} render={() => <Cards/>}/>\r\n        <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n        <Redirect from={'*'} to={'/404'}/>\r\n\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    //\r\n}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        //cases\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\n// export const setSomethingAC = () => ({type: 'PROFILE/SET-SOMETHING'} as const)\r\n\r\n//thunk\r\n// export const doSomethingTC = () => (dispatch: ThunkDispatch) => {\r\n//\r\n// }\r\n\r\n//types\r\nexport type InitialStateType = typeof initialState\r\n//объединение типов actionов:\r\n// export type ActionsType = ReturnType<typeof setSomethingAC>\r\n// тип диспатча:\r\n// type ThunkDispatch = Dispatch<ReturnType<typeof setSomethingAC>>","import {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {GetSortedCardsType, SortDirections} from \"../../api/api\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - \"неактивный\"\r\n    error: '',\r\n    sortParams: {\r\n        question: '',\r\n        answer: '',\r\n        sortDirection: SortDirections.Down,\r\n        propToSortBy: undefined,\r\n        minGrade: '0',\r\n        maxGrade: '5',\r\n        page: 1,\r\n        pageCount: 10\r\n    } as GetSortedCardsType\r\n}\r\n\r\nexport const cardsReducer = (state = initialState, action: ActionsType): CardsStateType => {\r\n    switch (action.type) {\r\n        case 'CARDS/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'CARDS/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        case 'CARDS/SET-SORT-PARAMS': {\r\n            return {\r\n                ...state,\r\n                sortParams: {...state.sortParams, ...action.sortParams}\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'CARDS/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'CARDS/SET-ERROR', error} as const)\r\nconst setSortParamsAC = (sortParams: GetSortedCardsType) => ({type: 'CARDS/SET-SORT-PARAMS', sortParams} as const)\r\n\r\n//thunk\r\n// export const resetPasswordTC = (password: string, resetPasswordToken: string | undefined) => (dispatch: ThunkDispatch) => {\r\n//     dispatch(setRequestStatusAC('loading'))\r\n//     authAPI.resetPassword({password, resetPasswordToken})\r\n//         .then(res => {\r\n//             dispatch(setInfoAC(res.data.info))\r\n//             dispatch(setRequestStatusAC('success'))\r\n//         })\r\n//         .catch(e => {\r\n//             const error = e.response\r\n//                 ? e.response.data.error\r\n//                 : (e.message + ', more details in the console')\r\n//             dispatch(setErrorAC(error))\r\n//             dispatch(setRequestStatusAC('failed'))\r\n//         })\r\n// }\r\n\r\n//types\r\nexport type CardsStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setSortParamsAC>\r\n\r\n// тип диспатча:\r\ntype ThunkDispatch = Dispatch<ActionsType>","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {registerReducer} from \"../features/Register/register-reducer\";\r\nimport {setPasswordReducer} from \"../features/SetPassword/set-password-reducer\";\r\nimport {profileReducer} from \"../features/Profile/profile-reducer\";\r\nimport {forgotReducer} from \"../features/Forgot/forgot-reducer\";\r\nimport {packsReducer} from \"../features/Packs/packs-reducer\";\r\nimport {cardsReducer} from \"../features/Cards/cards-reducer\";\r\n\r\n// комбайним редюсеры\r\nconst rootReducer = combineReducers({  //стейт\r\n    auth: authReducer,\r\n    register: registerReducer,\r\n    forgot: forgotReducer,\r\n    setPassword: setPasswordReducer,\r\n    profile: profileReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer\r\n})\r\n//создаем store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n//тип стейта\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// для вызова store из консоли\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}