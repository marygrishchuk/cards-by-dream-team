{"version":3,"sources":["features/Profile/Profile.module.css","features/Register/Register.module.css","common/DoubleRange/DoubleRange.module.css","api/api.ts","features/Forgot/forgot-reducer.ts","features/Forgot/Forgot.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","features/Register/register-reducer.ts","features/Register/Register.tsx","features/SetPassword/set-password-reducer.ts","features/SetPassword/SetPassword.tsx","features/Profile/Profile.tsx","features/Header/Header.tsx","features/Packs/packs-reducer.ts","common/DoubleRange/DoubleRange.tsx","features/Paginator/Paginator.tsx","features/Packs/PacksTable.tsx","features/Packs/Packs.tsx","features/Cards/cards-reducer.ts","features/Cards/CardsTable.tsx","features/Cards/Cards.tsx","app/app-reducer.ts","app/App.tsx","reportWebVitals.ts","features/Profile/profile-reducer.ts","app/store.ts","index.tsx","features/Header/Header.module.css","features/Packs/Packs.module.css","features/Login/Login.module.css","features/Cards/Cards.module.css","features/SetPassword/SetPassword.module.css","features/Forgot/Forgot.module.css"],"names":["module","exports","SortDirections","instance","axios","create","withCredentials","baseURL","authAPI","post","loginData","regData","delete","newUserData","put","email","from","message","resetPassData","packsAPI","params","nameToSearch","maxCardsCount","minCardsCount","page","pageCount","sortDirection","propToSortBy","userId","get","packName","sortPacks","min","max","user_id","name","isPrivate","deckCover","cardsPack","private","packId","_id","cardsAPI","question","answer","minGrade","maxGrade","cardsPack_id","cardQuestion","cardAnswer","sortCards","grade","shots","rating","answerImg","questionImg","questionVideo","answerVideo","type","card","cardId","comments","initialState","requestStatus","error","info","setRequestStatusAC","Forgot","useSelector","state","forgot","dispatch","useDispatch","useState","setEmail","className","style","loading","value","onChange","e","currentTarget","trim","onClick","then","res","data","catch","response","setErrorAC","sendEmailToResetPassTC","disabled","to","activeClassName","active","avatar","isLoggedIn","setAuthUserDataAC","payload","updateUserDataTC","newData","getState","auth","updatedUser","setTimeout","Login","formik","useFormik","validate","values","password","initialValues","rememberMe","onSubmit","PATH","PROFILE","handleSubmit","login","getFieldProps","errors","checked","color","responseText","isRegistration","setResponseTextAC","text","setRegistrationAC","Register","register","emailValue","setEmailValue","setPassword","confirmPassword","setConfirmPassword","errorPassword","setErrorPassword","clearError","placeholder","onKeyPress","length","err","requestRegister","SetPassword","token","useParams","password1","setPassword1","password2","setPassword2","localError","setLocalError","resetPasswordToken","Profile","Paragraph","Typography","newAvatarUrl","setNewAvatarUrl","setAvatarTools","profile","content","title","trigger","src","size","icon","UserOutlined","editable","newName","LOGIN","Header","header","REGISTER","FORGOT","SET_PASSWORD","PACKS","CARDS","cardPacks","cardPacksTotalCount","sortParams","Down","undefined","setPacksAC","setSortParamsAC","getPacksTC","packs","DoubleRange","React","memo","minRangeLimit","maxRangeLimit","minValue","maxValue","onValuesChange","setMin","setMax","onSliderValuesChange","useCallback","onMouseUpHandler","rangeBlock","range","draggableTrack","onAfterChange","tooltipVisible","Paginator","props","showQuickJumper","current","total","pageSize","PacksTable","authUserId","onAddBtnClick","onDeleteClick","deletePackTC","onUpdateClick","updatePackTC","map","p","key","cardsCount","updated","createdBy","user_name","buttons","packUserId","columns","dataIndex","sorter","render","dataSource","pagination","filters","columnKey","order","Up","width","Packs","searchByName","setSearchByName","useEffect","onCardsCountChange","paginatorPage","filter","rangeContainer","cards","cardsTotalCount","setCardsAC","getCardsTC","CardsTable","addCardTC","deleteCardTC","updateCardTC","c","cardUserId","Cards","setAnswer","setQuestion","onGradeRangeChange","isPackFound","some","status","isInitialized","setAppStatusAC","setAppErrorAC","setIsInitializedAC","App","app","antIcon","LoadingOutlined","fontSize","spin","exact","path","position","top","textAlign","indicator","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7f6eb21b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__OylV9\",\"loading\":\"Profile_loading__1TdAz\",\"error\":\"Profile_error__3qnVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Register_register__298wP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rangeBlock\":\"DoubleRange_rangeBlock__eFtuj\"};","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/'\r\n}) //перед каждым pushем на gitHub менять baseURL с http://localhost:7542/2.0/ на https://neko-back.herokuapp.com/2.0/ !\r\n\r\nexport const authAPI = {\r\n    me() { // проверка на залогиненность\r\n        return instance.post<AuthUserData>(`auth/me`)\r\n    },\r\n    login(loginData: LoginDataType) {\r\n        return instance.post<AuthUserData>(`auth/login`, loginData)\r\n    },\r\n    register(regData: RegDataType) {\r\n        return instance.post<{ addedUser: AuthUserData, error?: string }>(`auth/register`, regData)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/me`)\r\n    },\r\n    updateUserData(newUserData: NewUserDataType) { // обновление name или аватарки юзера\r\n        return instance.put<{ updatedUser: AuthUserData, error?: string }>(`auth/me`, newUserData)\r\n    },\r\n    sendEmailToResetPass(email: string) { // отправляем емайл, если забыл пароль, со страницы Forgot\r\n        return instance.post<ResponseType>(`auth/forgot`, {\r\n            email,\r\n            from: \"test-front-admin <ai73a@yandex.by>\",\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\n                 password recovery link:\r\n                 <a href='http://marygrishchuk.github.io/cards-by-dream-team/#/set-new-password/$token$'>\r\n                 Reset Password</a></div>`\r\n        })\r\n    },\r\n    resetPassword(resetPassData: ResetPassDataType) { // отправка нового пароля со страницы Set New Password\r\n        return instance.post<ResponseType>(`auth/set-new-password`, resetPassData)\r\n    }\r\n}\r\n\r\nexport const packsAPI = {\r\n    getPacks(params: GetSortedPacksType = {}) { // получение колод\r\n        const {\r\n            nameToSearch, maxCardsCount, minCardsCount, page, pageCount, sortDirection = '', propToSortBy = '', userId\r\n        } = params\r\n        return instance.get<GetPackResponseType>(`cards/pack`, {params: {packName: nameToSearch,\r\n                sortPacks: sortDirection + propToSortBy, min: minCardsCount, max: maxCardsCount, page, pageCount,\r\n                user_id: userId}})\r\n    },\r\n    addPack(name?: string, isPrivate?: boolean, deckCover?: string) {  // добавление (создание) колоды\r\n        return instance.post<AddPackResponseType>(`cards/pack`, {cardsPack: {name, private: isPrivate, deckCover}})\r\n    },\r\n    deletePack(packId: string) { //удаление колоды\r\n        return instance.delete<DeletePackResponseType>(`cards/pack?id=${packId}`)\r\n    },\r\n    updatePack(packId: string, name?: string) { //изменение колоды\r\n        return instance.put<UpdatePackResponseType>(`cards/pack`, {cardsPack: {_id: packId, name}})\r\n    },\r\n}\r\n\r\nexport const cardsAPI = {\r\n    getCards(packId: string, params: GetSortedCardsType = {}) { // получение карточек по id колоды\r\n        const {question, answer, sortDirection = '', propToSortBy = '', minGrade, maxGrade, page, pageCount} = params\r\n        return instance.get<GetCardsResponseType>(`cards/card`, {params: {cardsPack_id: packId, cardQuestion: question,\r\n                cardAnswer: answer, sortCards: sortDirection + propToSortBy, min: minGrade, max: maxGrade, page, pageCount}})\r\n    },\r\n    addCard(packId: string, params: NewCardDataType = {}) {  // добавление (создание) карточки\r\n        const {\r\n            question, answer, grade, shots, rating, answerImg, questionImg,\r\n            questionVideo, answerVideo, type\r\n        } = params\r\n        return instance.post<AddCardResponseType>(`cards/card`, {\r\n            card: {\r\n                cardsPack_id: packId, question, answer, grade, shots,\r\n                rating, answerImg, questionImg, questionVideo, answerVideo, type\r\n            }\r\n        })\r\n    },\r\n    deleteCard(cardId: string) { //удаление карточки\r\n        return instance.delete<DeleteCardResponseType>(`cards/card?id=${cardId}`)\r\n    },\r\n    updateCard(cardId: string, params: NewCardDataType = {}, comments?: string) { //изменение карточки\r\n        const {\r\n            question, answer, grade, shots, rating, answerImg, questionImg,\r\n            questionVideo, answerVideo, type\r\n        } = params\r\n        return instance.put<UpdateCardResponseType>(`cards/card`, {\r\n            card: {\r\n                _id: cardId, question, answer, grade, shots,\r\n                rating, answerImg, questionImg, questionVideo, answerVideo, type, comments\r\n            }\r\n        })\r\n    },\r\n    updateGrade(grade: number, card_id: string) {\r\n        return instance.put<UpdateGradeResponseType>(`cards/grade`, {grade, card_id})\r\n    }\r\n}\r\n\r\n//types\r\nexport type LoginDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type RegDataType = {\r\n    email: string\r\n    password: string\r\n}\r\nexport type NewUserDataType = {\r\n    name: string\r\n    avatar?: string\r\n}\r\nexport type ResetPassDataType = {\r\n    password: string\r\n    resetPasswordToken: string | undefined\r\n}\r\nexport type AuthUserData = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\nexport type ResponseType = {\r\n    info: string\r\n    error?: string\r\n}\r\n\r\nexport type GetPackResponseType = {\r\n    cardPacks: Array<PackDataType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n\r\n}\r\n\r\nexport type PackDataType = {\r\n    _id: string\r\n    name: string\r\n    cardsCount: number\r\n    created: Date\r\n    updated: Date\r\n    user_id: string\r\n    user_name: string\r\n    deckCover: string\r\n    grade: number\r\n    path: string\r\n    private: boolean\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n}\r\n\r\nexport type NewPackType = {\r\n    name?: string\r\n    deckCover?: string\r\n    private?: boolean\r\n}\r\n\r\nexport type AddPackResponseType = {\r\n    newCardsPack: PackDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type DeletePackResponseType = {\r\n    deletedCardsPack: PackDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type UpdatePackResponseType = {\r\n    updatedCardsPack: PackDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport type GetCardsResponseType = {\r\n    cards: Array<CardDataType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\n\r\nexport type CardDataType = {\r\n    _id: string\r\n    question: string\r\n    answer: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: Date\r\n    updated: Date\r\n    comments: string\r\n}\r\n\r\nexport enum SortDirections {\r\n    Up = 0,\r\n    Down = 1,\r\n}\r\n\r\nexport type GetSortedPacksType = {\r\n    nameToSearch?: string\r\n    minCardsCount?: number\r\n    maxCardsCount?: number\r\n    sortDirection?: SortDirections\r\n    propToSortBy?: \"name\" | \"cardsCount\" | \"updated\"\r\n    page?: number\r\n    pageCount?: number\r\n    userId?: string\r\n\r\n}\r\nexport type GetSortedCardsType = {\r\n    question?: string\r\n    answer?: string\r\n    sortDirection?: SortDirections\r\n    propToSortBy?: \"grade\" | \"updated\"\r\n    minGrade?: number\r\n    maxGrade?: number\r\n    page?: number\r\n    pageCount?: number\r\n}\r\n\r\nexport type NewCardDataType = {\r\n    question?: string\r\n    answer?: string\r\n    grade?: 0 | 1 | 2 | 3 | 4 | 5\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n    type?: \"card\"\r\n}\r\n\r\nexport type AddCardResponseType = {\r\n    newCard: CardDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type DeleteCardResponseType = {\r\n    deletedCard: CardDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type UpdateCardResponseType = {\r\n    updatedCard: CardDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type UpdateGradeResponseType = {\r\n    updatedGrade: UpdateGradeType\r\n}\r\nexport type UpdateGradeType = {\r\n    _id: string\r\n    cardsPack_id: string\r\n    card_id: string\r\n    user_id: string\r\n    grade: number\r\n    shots: number\r\n}","import {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../api/api\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - \"неактивный\"\r\n    error: '',\r\n    info: ''\r\n}\r\n\r\nexport const forgotReducer = (state: InitialForgotStateType = initialState, action: ActionsType): InitialForgotStateType => {\r\n    switch (action.type) {\r\n        case 'FORGOT/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'FORGOT/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                info: ''\r\n            }\r\n        }\r\n        case 'FORGOT/SET-INFO': {\r\n            return {\r\n                ...state,\r\n                info: action.info,\r\n                error: ''\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'FORGOT/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'FORGOT/SET-ERROR', error} as const)\r\nconst setInfoAC = (info: string) => ({type: 'FORGOT/SET-INFO', info} as const)\r\n\r\n//thunk\r\nexport const sendEmailToResetPassTC = (email: string) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.sendEmailToResetPass(email)\r\n        .then(res => {\r\n            dispatch(setInfoAC(res.data.info))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialForgotStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setInfoAC>\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {ChangeEvent, useState} from \"react\";\r\nimport style from \"./Forgot.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {InitialForgotStateType, sendEmailToResetPassTC} from \"./forgot-reducer\";\r\n\r\nexport const Forgot = () => {\r\n    const {requestStatus, error, info} = useSelector<AppRootStateType, InitialForgotStateType>(state => state.forgot)\r\n    const dispatch = useDispatch()\r\n\r\n    const [email, setEmail] = useState('')\r\n\r\n    const onEmailInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value.trim())\r\n    }\r\n    const onSendBtnClick = () => {\r\n        dispatch(sendEmailToResetPassTC(email))\r\n    }\r\n\r\n    return (\r\n        <div className={style.forgot}>\r\n            Please enter your email, and we'll send you a link to reset your password.\r\n            {requestStatus === 'loading'\r\n                ? <div className={style.loading}>loading...</div>\r\n                : info && <i>{info}</i>}\r\n            {error && <div className={style.error}>{error}</div>}\r\n            <input type=\"email\" value={email} onChange={onEmailInput}/>\r\n            <button onClick={onSendBtnClick} disabled={requestStatus === 'loading'}>Send</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI, LoginDataType} from \"../../api/api\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\nconst initialState = {\r\n    _id: \"\",\r\n    email: \"\",\r\n    name: \"\",\r\n    avatar: \"\" as string | undefined,\r\n    error: \"\",\r\n    isLoggedIn: false,\r\n    requestStatus: 'idle' as RequestStatusType //изначально статус запроса - \"неактивный\"\r\n}\r\n\r\nexport const authReducer = (state: InitialAuthStateType = initialState, action: ActionsType): InitialAuthStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET-AUTH-USER-DATA': {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        case 'AUTH/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'AUTH/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nexport const setAuthUserDataAC = (_id: string, email: string, name: string, avatar: string | undefined, isLoggedIn: boolean) => ({\r\n    type: 'AUTH/SET-AUTH-USER-DATA',\r\n    payload: {_id, email, name, avatar, isLoggedIn}\r\n} as const)\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'AUTH/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\n\r\nconst setErrorAC = (error: string) => ({type: 'AUTH/SET-ERROR', error} as const)\r\n\r\n\r\n//thunks\r\nexport const loginTC = (loginData: LoginDataType) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.login(loginData)\r\n        .then((res) => {\r\n            dispatch(setAuthUserDataAC(res.data._id, res.data.email, res.data.name, res.data.avatar, true))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(() => {\r\n            dispatch(setAuthUserDataAC(\"\", \"\", \"\", \"\", false))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\nexport const updateUserDataTC = (newData: { name?: string, avatar?: string }) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>,\r\n                                                                                  getState: () => AppRootStateType) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.updateUserData({\r\n        name: newData.name || getState().auth.name,\r\n        avatar: newData.avatar || getState().auth.avatar\r\n    })\r\n        .then(res => {\r\n            dispatch(setAuthUserDataAC(res.data.updatedUser._id, res.data.updatedUser.email,\r\n                res.data.updatedUser.name, res.data.updatedUser.avatar, getState().auth.isLoggedIn))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialAuthStateType = typeof initialState\r\nexport type RequestStatusType = 'idle' | 'loading' | 'success' | 'failed'\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setAuthUserDataAC>\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React from \"react\";\r\nimport style from \"./Login.module.css\"\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {InitialAuthStateType, loginTC} from \"./auth-reducer\";\r\nimport {PATH} from \"../../app/App\";\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {isLoggedIn, requestStatus, error} = useSelector<AppRootStateType, InitialAuthStateType>(state => state.auth)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: \"Email is required\"\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: \"Password is required\"\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n\r\n                <div className={style.login}>\r\n                    {requestStatus === 'loading' && <div className={style.loading}>loading...</div>}\r\n                    {error && <div className={style.error}>{error}</div>}\r\n                    <label>Email</label>\r\n                    <input type=\"email\" {...formik.getFieldProps(\"email\")}/>\r\n                    {formik.errors.email ? <div className={style.error}>{formik.errors.email}</div> : null}\r\n\r\n                    <label>Password</label>\r\n                    <input type=\"password\" {...formik.getFieldProps(\"password\")}/>\r\n                    {formik.errors.password ? <div className={style.error}>{formik.errors.password}</div> : null}\r\n\r\n                    <NavLink to=\"/forgot\" activeClassName={style.active}>Forgot password?</NavLink>\r\n\r\n                    <label>Remember Me<input type=\"checkbox\" {...formik.getFieldProps(\"rememberMe\")}\r\n                                             checked={formik.values.rememberMe}/></label>\r\n\r\n                    <button type={'submit'} color={'primary'}>Login</button>\r\n                    <NavLink to=\"/register\" activeClassName={style.active}>Registration</NavLink>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}","import {authAPI, RegDataType} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nconst initialState = {\r\n    responseText: '',\r\n    isRegistration: false\r\n}\r\n\r\nexport const registerReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        //cases\r\n        case \"REGISTER/SUCCESS_REGISTER\": {\r\n            return {...state, responseText: action.text}\r\n        }\r\n        case \"REGISTER/SET-REGISTRATION\": {\r\n            return {\r\n                ...state, isRegistration: action.isRegistration,\r\n                responseText: state.isRegistration === true ? '' : state.responseText\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\n// export const setSomethingAC = () => ({type: 'REGISTER/SET-SOMETHING'} as const)\r\nconst setResponseTextAC = (text: string) => ({type: 'REGISTER/SUCCESS_REGISTER', text} as const)\r\nconst setRegistrationAC = (isRegistration: boolean) => ({type: 'REGISTER/SET-REGISTRATION', isRegistration} as const)\r\n//thunk\r\n// export const doSomethingTC = () => (dispatch: ThunkDispatch) => {\r\n//\r\n// }\r\nexport const requestRegister = (regData: RegDataType) => (dispatch: ThunkCustomDispatch) => {\r\n    authAPI.register(regData)\r\n        .then((res) => {\r\n            dispatch(setResponseTextAC('success'))\r\n\r\n            setTimeout(() => {\r\n                dispatch(setRegistrationAC(true))\r\n                dispatch(setRegistrationAC(false))\r\n            }, 1000)\r\n\r\n        })\r\n        .catch((err) => {\r\n\r\n            dispatch(setResponseTextAC(err.response.data.error))\r\n            setTimeout(() => {\r\n                dispatch(setResponseTextAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n//types\r\nexport type InitialStateType = typeof initialState\r\n//объединение типов actionов:\r\n// export type ActionsType = ReturnType<typeof setSomethingAC>\r\ntype ActionsType = ReturnType<typeof setResponseTextAC> | ReturnType<typeof setRegistrationAC>\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {useState} from \"react\";\r\nimport style from \"./Register.module.css\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {requestRegister} from \"./register-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\nexport const Register = () => {\r\n    const text = useSelector<AppRootStateType, string>(state => state.register.responseText)\r\n    const isRegistration = useSelector<AppRootStateType, boolean>(state => state.register.isRegistration)\r\n\r\n    const dispatch = useDispatch()\r\n    const [emailValue, setEmailValue] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [errorPassword, setErrorPassword] = useState('')\r\n\r\n    const regData = {email: emailValue, password: password}\r\n    const setRegister = () => {\r\n        if (password === confirmPassword && password.length >= 8) {\r\n            dispatch(requestRegister(regData))\r\n        } else if (password !== confirmPassword) {\r\n            setErrorPassword(\"Passwords don't match.\")\r\n        } else if (password.length < 8 || confirmPassword.length < 8) {\r\n            setErrorPassword(\"Password must contain at least 8 characters.\")\r\n        }\r\n    }\r\n    const clearError = () => {\r\n        setErrorPassword('')\r\n    }\r\n\r\n\r\n    if (isRegistration) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.register}>\r\n            <h3>{text}</h3>\r\n            Register\r\n            <input type=\"email\" placeholder={'email'} onChange={(e) => setEmailValue(e.currentTarget.value)}\r\n                   onKeyPress={clearError}/>\r\n            <input type=\"password\" placeholder={'password'} onChange={(e) => setPassword(e.currentTarget.value)}\r\n                   onKeyPress={clearError}/>\r\n            <input type=\"password\" placeholder={'confirm password'} onKeyPress={clearError}\r\n                   onChange={(e) => setConfirmPassword(e.currentTarget.value)}/>\r\n            {errorPassword}\r\n            <button onClick={setRegister}>Register</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import {authAPI} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - \"неактивный\"\r\n    error: '',\r\n    info: ''\r\n}\r\n\r\nexport const setPasswordReducer = (state: SetPasswordStateType = initialState, action: ActionsType): SetPasswordStateType => {\r\n    switch (action.type) {\r\n        case 'SET-PASSWORD/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'SET-PASSWORD/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                info: ''\r\n            }\r\n        }\r\n        case 'SET-PASSWORD/SET-INFO': {\r\n            return {\r\n                ...state,\r\n                info: action.info,\r\n                error: ''\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'SET-PASSWORD/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'SET-PASSWORD/SET-ERROR', error} as const)\r\nconst setInfoAC = (info: string) => ({type: 'SET-PASSWORD/SET-INFO', info} as const)\r\n\r\n//thunk\r\nexport const resetPasswordTC = (password: string, resetPasswordToken: string | undefined) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.resetPassword({password, resetPasswordToken})\r\n        .then(res => {\r\n            dispatch(setInfoAC(res.data.info))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\n//types\r\nexport type SetPasswordStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setInfoAC>\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {ChangeEvent, useState} from \"react\";\r\nimport style from \"./SetPassword.module.css\";\r\nimport {NavLink, Redirect, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {resetPasswordTC, SetPasswordStateType} from \"./set-password-reducer\";\r\n\r\nexport const SetPassword = () => {\r\n    const {requestStatus, error, info} = useSelector<AppRootStateType, SetPasswordStateType>(state => state.setPassword)\r\n    const dispatch = useDispatch()\r\n    const {token} = useParams<{ token?: string }>()\r\n\r\n    const [password1, setPassword1] = useState('')\r\n    const [password2, setPassword2] = useState('')\r\n    const [localError, setLocalError] = useState('')\r\n\r\n    const onPassword1Input = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword1(e.currentTarget.value)\r\n    }\r\n    const onPassword2Input = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword2(e.currentTarget.value)\r\n    }\r\n    const onSubmit = () => {\r\n        if (password1 === password2 && password1.length >= 8) {\r\n            dispatch(resetPasswordTC(password1, token))\r\n        } else if (password1 !== password2) {\r\n            setLocalError(\"Passwords don't match.\")\r\n        } else if (password1.length < 8 || password2.length < 8) {\r\n            setLocalError(\"Password must contain at least 8 characters.\")\r\n        }\r\n    }\r\n    if (requestStatus === 'success') return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={style.setPassword}>\r\n            Please enter your new password in each field.\r\n            {requestStatus === 'loading'\r\n                ? <div className={style.loading}>loading...</div>\r\n                : info && <i>{info}</i>}\r\n            {error && <div className={style.error}>{error}</div>}\r\n            {localError && <div className={style.error}>{localError}</div>}\r\n            <input type=\"password\" value={password1} onChange={onPassword1Input}\r\n                   onKeyPress={() => setLocalError(\"\")}/>\r\n            <input type=\"password\" value={password2} onChange={onPassword2Input}\r\n                   onKeyPress={() => setLocalError(\"\")}/>\r\n            <button onClick={onSubmit} disabled={requestStatus === 'loading'}>Submit</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import React, {useState} from \"react\";\r\nimport style from \"./Profile.module.css\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {InitialAuthStateType, logoutTC, updateUserDataTC} from \"../Login/auth-reducer\";\r\nimport {Avatar, Popover} from 'antd';\r\nimport {UserOutlined} from '@ant-design/icons';\r\nimport { Typography } from 'antd';\r\nimport {PATH} from \"../../app/App\";\r\n\r\nexport const Profile = () => {\r\n    const {\r\n        email,\r\n        name,\r\n        error,\r\n        avatar,\r\n        isLoggedIn,\r\n        requestStatus\r\n    } = useSelector<AppRootStateType, InitialAuthStateType>(state => state.auth)\r\n    const dispatch = useDispatch()\r\n    const { Paragraph } = Typography;\r\n    const [newAvatarUrl, setNewAvatarUrl] = useState('')\r\n\r\n    const onLogoutClick = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    const onChangeAvatarClick = () => {\r\n        dispatch(updateUserDataTC({avatar: newAvatarUrl}))\r\n    }\r\n    const onNewNameSubmit = (newName: string) => {\r\n        dispatch(updateUserDataTC({name: newName}))\r\n    }\r\n\r\n    const setAvatarTools = (\r\n        <span>\r\n            <label>Enter avatar URL or Base64:\r\n                <input onChange={e => setNewAvatarUrl(e.currentTarget.value)}\r\n                       value={newAvatarUrl}/>\r\n            </label>\r\n            <button onClick={onChangeAvatarClick}>Set Avatar</button>\r\n        </span>\r\n    )\r\n\r\n    if (!isLoggedIn) return <Redirect to={PATH.LOGIN}/>\r\n\r\n    return (\r\n        <div className={style.profile}>\r\n            Welcome!\r\n            {requestStatus === 'loading' && <div className={style.loading}>loading...</div>}\r\n            {error && <div className={style.error}>{error}</div>}\r\n            {avatar\r\n                ? <Popover content={setAvatarTools} title=\"Change avatar\" trigger=\"hover\">\r\n                    <Avatar src={avatar} size={64}/>\r\n                </Popover>\r\n                : <Popover content={setAvatarTools} title=\"Add avatar\" trigger=\"hover\">\r\n                    <Avatar size={64}\r\n                            icon={<UserOutlined/>}/>\r\n                </Popover>}\r\n            <Paragraph editable={{ onChange: onNewNameSubmit }}>{name}</Paragraph>\r\n            <div>{email}</div>\r\n            <button onClick={onLogoutClick} disabled={requestStatus === 'loading'}>Log out</button>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport style from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../app/App\";\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div className={style.header}>\r\n            <NavLink to={PATH.LOGIN} activeClassName={style.active}>Login</NavLink>\r\n            <NavLink to={PATH.REGISTER} activeClassName={style.active}>Register</NavLink>\r\n            <NavLink to={PATH.FORGOT} activeClassName={style.active}>Forgot</NavLink>\r\n            <NavLink to={PATH.SET_PASSWORD} activeClassName={style.active}>Set New Password</NavLink>\r\n            <NavLink to={PATH.PROFILE} activeClassName={style.active}>Profile</NavLink>\r\n            <NavLink to={PATH.PACKS} activeClassName={style.active}>Packs</NavLink>\r\n            <NavLink to={PATH.CARDS} activeClassName={style.active}>Cards</NavLink>\r\n        </div>\r\n    );\r\n}","import {GetSortedPacksType, PackDataType, packsAPI, SortDirections} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\n\r\nconst initialState = {\r\n    cardPacks: [] as Array<PackDataType>,\r\n    requestStatus: 'idle' as RequestStatusType,\r\n    error: \"\",\r\n    cardPacksTotalCount: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    sortParams: {\r\n        nameToSearch: '',\r\n        minCardsCount: 0,\r\n        maxCardsCount: 100,\r\n        sortDirection: SortDirections.Down,\r\n        propToSortBy: undefined,\r\n        page: 1,\r\n        pageCount: 10,\r\n        userId: ''\r\n    } as GetSortedPacksType\r\n}\r\n\r\nexport const packsReducer = (state = initialState, action: ActionsType): PacksStateType => {\r\n    switch (action.type) {\r\n        case 'PACKS/SET-PACKS': {\r\n            return {\r\n                ...state,\r\n                cardPacks: action.cardPacks,\r\n                cardPacksTotalCount: action.cardPacksTotalCount,\r\n                page: action.page,\r\n                pageCount: action.pageCount\r\n            }\r\n        }\r\n        case 'PACKS/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'PACKS/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        case 'PACKS/SET-SORT-PARAMS': {\r\n            return {\r\n                ...state,\r\n                sortParams: {...state.sortParams, ...action.sortParams}\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setPacksAC = (cardPacks: Array<PackDataType>, cardPacksTotalCount: number, page: number, pageCount: number) => ({\r\n    type: 'PACKS/SET-PACKS',\r\n    cardPacks, cardPacksTotalCount,\r\n    page, pageCount\r\n} as const)\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'PACKS/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\n\r\nconst setErrorAC = (error: string) => ({type: 'PACKS/SET-ERROR', error} as const)\r\nconst setSortParamsAC = (sortParams: GetSortedPacksType) => ({type: 'PACKS/SET-SORT-PARAMS', sortParams} as const)\r\n\r\n\r\n//thunk\r\nexport const getPacksTC = (params: GetSortedPacksType = {}) => (dispatch: ThunkCustomDispatch, getState: () => AppRootStateType) => {\r\n    if (params) dispatch(setSortParamsAC(params))\r\n    const sortParams = getState().packs.sortParams\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.getPacks(sortParams)\r\n        .then(res => {\r\n            dispatch(setPacksAC(res.data.cardPacks, res.data.cardPacksTotalCount, res.data.page, res.data.pageCount))\r\n            dispatch(setRequestStatusAC('success'))\r\n\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const addPackTC = (name?: string, isPrivate?: boolean, deckCover?: string) => (\r\n    dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.addPack(name, isPrivate, deckCover)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const deletePackTC = (packId: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.deletePack(packId)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const updatePackTC = (packId: string, name?: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.updatePack(packId, name)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type PacksStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setPacksAC>\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setSortParamsAC>\r\n\r\n\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {useCallback, useState} from \"react\";\r\nimport {Slider} from 'antd';\r\nimport style from \"./DoubleRange.module.css\";\r\n\r\ntype DoubleRangePropsType = {\r\n    minRangeLimit?: number\r\n    maxRangeLimit?: number\r\n    minValue: number | undefined\r\n    maxValue: number | undefined\r\n    onValuesChange: ([minValue, maxValue]: Array<number | undefined>) => void\r\n}\r\nexport const DoubleRange = React.memo(({\r\n                                           minRangeLimit = 0,\r\n                                           maxRangeLimit = 100,\r\n                                           minValue,\r\n                                           maxValue,\r\n                                           onValuesChange\r\n                                       }: DoubleRangePropsType) => {\r\n\r\n    const [min, setMin] = useState(minValue || 0)\r\n    const [max, setMax] = useState(maxValue || 5)\r\n\r\n    const onSliderValuesChange = useCallback((values: Array<number>) => {\r\n        setMin(values[0])\r\n        setMax(values[1])\r\n    }, [setMin, setMax])\r\n\r\n    const onMouseUpHandler = useCallback(() => {\r\n        onValuesChange([min, max])\r\n    }, [onValuesChange, min, max])\r\n\r\n    return <span className={style.rangeBlock}>\r\n        <Slider range={{draggableTrack: true}} value={[min, max]} min={minRangeLimit} max={maxRangeLimit}\r\n                onChange={onSliderValuesChange}\r\n                onAfterChange={onMouseUpHandler}\r\n                tooltipVisible\r\n        />\r\n    </span>\r\n})","import {Pagination} from 'antd';\r\nimport React from 'react';\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\n\r\ntype PaginatorType = {\r\n    onChange: (page: number, pageCount: number | undefined, packId?: string) => void\r\n    current: number\r\n    total: number\r\n    pageCount: number\r\n    requestStatus: RequestStatusType\r\n}\r\n\r\nexport const Paginator = (props: PaginatorType) => {\r\n\r\n    return <div>\r\n        <Pagination showQuickJumper current={props.current} total={props.total} onChange={props.onChange}\r\n                    pageSize={props.pageCount} disabled={props.requestStatus === 'loading'}/>\r\n    </div>\r\n\r\n}\r\n","import {PackDataType, SortDirections} from \"../../api/api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addPackTC, deletePackTC, getPacksTC, updatePackTC} from \"./packs-reducer\";\r\nimport {ColumnsType, FilterValue} from \"antd/es/table/interface\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport style from \"./Packs.module.css\";\r\nimport {Table, TablePaginationConfig} from \"antd\";\r\nimport {SorterResult} from \"antd/lib/table/interface\";\r\nimport React from \"react\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\n\r\ntype PacksTablePropsType = {\r\n    cardPacks: Array<PackDataType>\r\n    authUserId: string\r\n    requestStatus: RequestStatusType\r\n}\r\ntype PackIdsType = {\r\n    packId: string\r\n    packUserId: string\r\n}\r\ntype PackType = {\r\n    key: string,\r\n    name: string,\r\n    cardsCount: number,\r\n    updated: Date,\r\n    createdBy: string,\r\n    buttons: PackIdsType\r\n}\r\nexport const PacksTable = ({cardPacks, authUserId, requestStatus}: PacksTablePropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onAddBtnClick = () => {\r\n        dispatch(addPackTC())\r\n    }\r\n\r\n    const onDeleteClick = (packId: string) => {\r\n        dispatch(deletePackTC(packId))\r\n    }\r\n\r\n    const onUpdateClick = (packId: string) => {\r\n        dispatch(updatePackTC(packId))\r\n    }\r\n\r\n    const data: Array<PackType> = cardPacks.map(p => ({\r\n        key: p._id,\r\n        name: p.name,\r\n        cardsCount: p.cardsCount,\r\n        updated: p.updated,\r\n        createdBy: p.user_name,\r\n        buttons: {packId: p._id, packUserId: p.user_id}\r\n    }))\r\n\r\n    const columns: ColumnsType<PackType> = [\r\n        {title: 'Name', dataIndex: 'name', key: 'name', sorter: true},\r\n        {title: 'Cards Count', dataIndex: 'cardsCount', key: 'cardsCount', sorter: true},\r\n        {title: 'Last Update', dataIndex: 'updated', key: 'updated'},\r\n        {title: 'Created by', dataIndex: 'createdBy', key: 'createdBy'},\r\n        {\r\n            title: () => <button onClick={onAddBtnClick}>Add</button>,\r\n            dataIndex: 'buttons',\r\n            key: 'buttons',\r\n            render: ({packId, packUserId}: PackIdsType) => <>\r\n                <button onClick={() => onDeleteClick(packId)} disabled={packUserId !== authUserId}>Delete</button>\r\n                <button onClick={() => onUpdateClick(packId)} disabled={packUserId !== authUserId}>Update</button>\r\n                <NavLink to={`/cards/${packId}`} activeClassName={style.active}>Cards</NavLink>\r\n            </>,\r\n        },\r\n    ];\r\n\r\n    const onChange = (pagination: TablePaginationConfig, filters: Record<string, FilterValue | null>,\r\n                      sorter: SorterResult<PackType> | any) => {\r\n        if (sorter.columnKey === 'name' && sorter.order === 'ascend') {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Down, propToSortBy: 'name'}))\r\n        } else if (sorter.columnKey === 'name' && sorter.order === 'descend') {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Up, propToSortBy: 'name'}))\r\n        } else if (sorter.columnKey === 'name' && sorter.order === undefined) {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Up, propToSortBy: 'updated'}))\r\n        }\r\n        if (sorter.columnKey === 'cardsCount' && sorter.order === 'ascend') {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Down, propToSortBy: \"cardsCount\"}))\r\n        } else if (sorter.columnKey === 'cardsCount' && sorter.order === 'descend') {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Up, propToSortBy: \"cardsCount\"}))\r\n        } else if (sorter.columnKey === 'cardsCount' && sorter.order === undefined) {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Up, propToSortBy: 'updated'}))\r\n        }\r\n    }\r\n\r\n    return <Table columns={columns} dataSource={data} onChange={onChange} pagination={false} style={{width: '100%'}}\r\n                  size={'small'} loading={requestStatus === 'loading'}/>\r\n}","import React, {ChangeEvent, KeyboardEvent, useCallback, useEffect, useState} from \"react\";\r\nimport style from \"./Packs.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getPacksTC, PacksStateType} from \"./packs-reducer\";\r\nimport {GetSortedPacksType} from \"../../api/api\";\r\nimport {DoubleRange} from \"../../common/DoubleRange/DoubleRange\";\r\nimport {Paginator} from \"../Paginator/Paginator\";\r\nimport {PATH} from \"../../app/App\";\r\nimport {PacksTable} from \"./PacksTable\";\r\n\r\nexport const Packs = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const authUserId = useSelector<AppRootStateType, string>(state => state.auth._id)\r\n    const error = useSelector<AppRootStateType, string>(state => state.packs.error)\r\n    const {\r\n        cardPacksTotalCount,\r\n        page,\r\n        cardPacks,\r\n        pageCount,\r\n        requestStatus\r\n    } = useSelector<AppRootStateType, PacksStateType>(state => state.packs)\r\n\r\n    const {\r\n        minCardsCount,\r\n        maxCardsCount,\r\n        userId\r\n    } = useSelector<AppRootStateType, GetSortedPacksType>(state => state.packs.sortParams)\r\n    const dispatch = useDispatch()\r\n\r\n    const [searchByName, setSearchByName] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) dispatch(getPacksTC())\r\n    }, [])\r\n\r\n    const onPrivatePacksSearch = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.checked) {\r\n            dispatch(getPacksTC({userId: authUserId}))\r\n        } else {\r\n            dispatch(getPacksTC({userId: ''}))\r\n        }\r\n    }\r\n\r\n    const onSearchByName = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            dispatch(getPacksTC({nameToSearch: searchByName}))\r\n        }\r\n    }\r\n    const onCardsCountChange = useCallback(([minValue, maxValue]: Array<number | undefined>) => {\r\n        dispatch(getPacksTC({minCardsCount: minValue, maxCardsCount: maxValue}))\r\n    }, [dispatch])\r\n\r\n    const paginatorPage = useCallback((page: number, pageCount: number | undefined) => {\r\n        dispatch(getPacksTC({page, pageCount}))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) return <Redirect to={PATH.LOGIN}/>\r\n\r\n    return (\r\n        <div className={style.packs}>\r\n            <h2>Packs</h2>\r\n            <div className={style.filter}>\r\n                {/*поиск приватных колод*/}\r\n                <label><input type=\"checkbox\" checked={!!userId} onChange={onPrivatePacksSearch}/>\r\n                    show my private packs</label>\r\n                {/*фильтр по названию колоды*/}\r\n                <label>Search packs by name: <input placeholder={'Press Enter to search'}\r\n                                                    onKeyPress={onSearchByName}\r\n                                                    value={searchByName}\r\n                                                    onChange={e => setSearchByName(e.currentTarget.value)}\r\n                /></label>\r\n\r\n                {/*двойной range для сортировки по кол-ву карточек в колоде*/}\r\n                <div className={style.rangeContainer}>\r\n                    Search packs by cards count:\r\n                    <DoubleRange minValue={minCardsCount} maxValue={maxCardsCount} onValuesChange={onCardsCountChange}\r\n                                 maxRangeLimit={200}/>\r\n                </div>\r\n            </div>\r\n            {error && <div className={style.error}>{error}</div>}\r\n            {/*таблица с колодами*/}\r\n            <PacksTable cardPacks={cardPacks} authUserId={authUserId} requestStatus={requestStatus}/>\r\n            {/*Pagination*/}\r\n            <div className={style.pagination}>\r\n                <Paginator current={page}\r\n                           pageCount={pageCount}\r\n                           total={cardPacksTotalCount}\r\n                           onChange={paginatorPage}\r\n                           requestStatus={requestStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {CardDataType, cardsAPI, GetSortedCardsType, NewCardDataType, SortDirections} from \"../../api/api\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - \"неактивный\"\r\n    error: '',\r\n    cards: [] as Array<CardDataType>,\r\n    packUserId: \"\",\r\n    cardsTotalCount: 0,\r\n    page: 0,\r\n    pageCount: 10,\r\n    sortParams: {\r\n        question: '',\r\n        answer: '',\r\n        sortDirection: SortDirections.Down,\r\n        propToSortBy: undefined,\r\n        minGrade: 0,\r\n        maxGrade: 5,\r\n        page: 1,\r\n        pageCount: 10\r\n    } as GetSortedCardsType\r\n}\r\n\r\nexport const cardsReducer = (state = initialState, action: ActionsType): CardsStateType => {\r\n    switch (action.type) {\r\n        case 'CARDS/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'CARDS/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        case 'CARDS/SET-SORT-PARAMS': {\r\n            return {\r\n                ...state,\r\n                sortParams: {...state.sortParams, ...action.sortParams}\r\n            }\r\n        }\r\n        case 'CARDS/SET-CARDS': {\r\n            return {\r\n                ...state,\r\n                cards: action.cards,\r\n                packUserId: action.packUserId,\r\n                page: action.page,\r\n                cardsTotalCount: action.cardsTotalCount,\r\n                pageCount: action.pageCount\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'CARDS/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'CARDS/SET-ERROR', error} as const)\r\nconst setSortParamsAC = (sortParams: GetSortedCardsType) => ({type: 'CARDS/SET-SORT-PARAMS', sortParams} as const)\r\nexport const setCardsAC = (cards: Array<CardDataType>, packUserId: string, page: number, cardsTotalCount: number, pageCount: number) =>\r\n    ({type: 'CARDS/SET-CARDS', cards, packUserId, page, cardsTotalCount, pageCount} as const)\r\n\r\n//thunk\r\nexport const getCardsTC = (packId: string, params: GetSortedCardsType = {}) => (dispatch: ThunkCustomDispatch,\r\n                                                                                getState: () => AppRootStateType) => {\r\n    if (params) dispatch(setSortParamsAC(params))\r\n    const sortParams = getState().cards.sortParams\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.getCards(packId, sortParams)\r\n        .then(res => {\r\n            dispatch(setCardsAC(res.data.cards, res.data.packUserId, res.data.page, res.data.cardsTotalCount, res.data.pageCount))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const addCardTC = (packId: string, params?: GetSortedCardsType) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.addCard(packId, params)\r\n        .then(() => {\r\n            dispatch(getCardsTC(packId, params))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const deleteCardTC = (packId: string, cardId: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.deleteCard(cardId)\r\n        .then(() => {\r\n            dispatch(getCardsTC(packId))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const updateCardTC = (packId: string, cardId: string, params: NewCardDataType = {}, comments?: string) => (\r\n    dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.updateCard(cardId, params, comments)\r\n        .then(() => {\r\n            dispatch(getCardsTC(packId))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type CardsStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setSortParamsAC>\r\n    | ReturnType<typeof setCardsAC>\r\n\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import {CardDataType, SortDirections} from \"../../api/api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {ColumnsType, FilterValue} from \"antd/es/table/interface\";\r\nimport {Table, TablePaginationConfig} from \"antd\";\r\nimport {SorterResult} from \"antd/lib/table/interface\";\r\nimport React from \"react\";\r\nimport {addCardTC, deleteCardTC, getCardsTC, updateCardTC} from \"./cards-reducer\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\n\r\ntype CardsTablePropsType = {\r\n    cards: Array<CardDataType>\r\n    packId: string\r\n    packUserId: string\r\n    authUserId: string\r\n    requestStatus: RequestStatusType\r\n}\r\ntype CardIdsType = {\r\n    cardId: string\r\n    cardUserId: string\r\n}\r\ntype CardType = {\r\n    key: string\r\n    question: string\r\n    answer: string\r\n    grade: number\r\n    updated: Date\r\n    packId: string\r\n    buttons: CardIdsType\r\n}\r\n\r\nexport const CardsTable = ({cards, packId, packUserId, authUserId, requestStatus}: CardsTablePropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onAddBtnClick = () => {\r\n        dispatch(addCardTC(packId))\r\n    }\r\n\r\n    const onDeleteClick = (cardId: string) => {\r\n        dispatch(deleteCardTC(packId, cardId))\r\n    }\r\n\r\n    const onUpdateClick = (cardId: string) => {\r\n        dispatch(updateCardTC(packId, cardId))\r\n    }\r\n\r\n    const data: Array<CardType> = cards.map(c => ({\r\n        key: c._id,\r\n        question: c.question,\r\n        answer: c.answer,\r\n        grade: c.grade,\r\n        updated: c.updated,\r\n        packId: c.cardsPack_id,\r\n        buttons: {cardId: c._id, cardUserId: c.user_id}\r\n    }))\r\n\r\n    const columns: ColumnsType<CardType> = [\r\n        {title: 'Question', dataIndex: 'question', key: 'question'},\r\n        {title: 'Answer', dataIndex: 'answer', key: 'answer'},\r\n        {title: 'Grade', dataIndex: 'grade', key: 'grade', sorter: true},\r\n        {title: 'Last Update', dataIndex: 'updated', key: 'updated'},\r\n        {title: 'Pack ID', dataIndex: 'packId', key: 'packId'},\r\n        {\r\n            title: () => <button onClick={onAddBtnClick} disabled={packUserId !== authUserId}>Add</button>,\r\n            dataIndex: 'buttons',\r\n            key: 'buttons',\r\n            render: ({cardId, cardUserId}: CardIdsType) => <>\r\n                <button onClick={() => onDeleteClick(cardId)} disabled={cardUserId !== authUserId}>Delete</button>\r\n                <button onClick={() => onUpdateClick(cardId)} disabled={cardUserId !== authUserId}>Update</button>\r\n            </>,\r\n        },\r\n    ];\r\n\r\n    const onChange = (pagination: TablePaginationConfig, filters: Record<string, FilterValue | null>,\r\n                      sorter: SorterResult<CardType> | any) => {\r\n        if (sorter.columnKey === 'grade' && sorter.order === 'ascend') {\r\n            dispatch(getCardsTC(packId, {sortDirection: SortDirections.Down, propToSortBy: \"grade\"}))\r\n        } else if (sorter.columnKey === 'grade' && sorter.order === 'descend') {\r\n            dispatch(getCardsTC(packId, {sortDirection: SortDirections.Up, propToSortBy: \"grade\"}))\r\n        } else if (sorter.columnKey === 'grade' && sorter.order === undefined) {\r\n            dispatch(getCardsTC(packId, {sortDirection: SortDirections.Up, propToSortBy: \"updated\"}))\r\n        }\r\n    }\r\n\r\n    return <Table columns={columns} dataSource={data} onChange={onChange} pagination={false} style={{width: '100%'}}\r\n                  size={'small'} loading={requestStatus === 'loading'}/>\r\n}","import React, {KeyboardEvent, useCallback, useEffect, useState} from \"react\";\r\nimport style from \"./Cards.module.css\";\r\nimport {NavLink, Redirect, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {GetSortedCardsType, PackDataType} from \"../../api/api\";\r\nimport {DoubleRange} from \"../../common/DoubleRange/DoubleRange\";\r\nimport {CardsStateType, getCardsTC, setCardsAC} from \"./cards-reducer\";\r\nimport {Paginator} from \"../Paginator/Paginator\";\r\nimport {PATH} from \"../../app/App\";\r\nimport {CardsTable} from \"./CardsTable\";\r\n\r\n\r\nexport const Cards = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const authUserId = useSelector<AppRootStateType, string>(state => state.auth._id)\r\n    const {packId} = useParams<{ packId?: any }>()    //читаем id колоды из URL\r\n    const {minGrade, maxGrade} = useSelector<AppRootStateType, GetSortedCardsType>(state => state.cards.sortParams)\r\n    const {\r\n        cards,\r\n        packUserId,\r\n        cardsTotalCount,\r\n        page,\r\n        pageCount,\r\n        error,\r\n        requestStatus\r\n    } = useSelector<AppRootStateType, CardsStateType>(state => state.cards)\r\n    const packs = useSelector<AppRootStateType, Array<PackDataType>>(state => state.packs.cardPacks)\r\n    const dispatch = useDispatch()\r\n\r\n    const [answer, setAnswer] = useState<string>(\"\")\r\n    const [question, setQuestion] = useState<string>(\"\")\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn && packId) dispatch(getCardsTC(packId))   //запрашиваем карточки, если залогинен и есть packId\r\n        //зачищаем карточки при выходе со страницы Cards, чтобы при следующем запросе новых карточек не были видны старые\r\n        return () => {\r\n            dispatch(setCardsAC([], \"\", 0, 0, 0))\r\n        }\r\n    }, [])\r\n\r\n    const onGradeRangeChange = useCallback(([minValue, maxValue]: Array<number | undefined>) => {\r\n        dispatch(getCardsTC(packId, {minGrade: minValue, maxGrade: maxValue}))\r\n    }, [packId, dispatch])\r\n\r\n    const onSearchByQuestion = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            dispatch(getCardsTC(packId, {question: question}))\r\n        }\r\n    }\r\n    const onSearchByAnswer = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            dispatch(getCardsTC(packId, {answer: answer}))\r\n        }\r\n    }\r\n    const paginatorPage = useCallback((page: number, pageCount: number | undefined) => {\r\n        dispatch(getCardsTC(packId, {page, pageCount}))\r\n    }, [packId, dispatch])\r\n    //защита от попытки открыть Cards с выдуманным packId в url\r\n    let isPackFound = packs.some(p => p._id === packId)\r\n\r\n    if (!isLoggedIn) return <Redirect to={PATH.LOGIN}/>\r\n    if (isLoggedIn && !packId || isLoggedIn && !isPackFound) return <Redirect to={PATH.PACKS}/>\r\n\r\n    return (\r\n        <div className={style.cards}>\r\n            <h2><NavLink to={PATH.PACKS} activeClassName={style.active}>⏴ Packs</NavLink></h2>\r\n            <div className={style.filter}>\r\n                {/*фильтр карточек по вопросу*/}\r\n                <label>Search cards by question: <input placeholder={'Press Enter to search'}\r\n                                                        onKeyPress={onSearchByQuestion}\r\n                                                        value={question}\r\n                                                        onChange={e => setQuestion(e.currentTarget.value)}/></label>\r\n                {/*фильтр карточек по ответу*/}\r\n                <label>Search cards by answer: <input placeholder={'Press Enter to search'}\r\n                                                      onKeyPress={onSearchByAnswer}\r\n                                                      value={answer}\r\n                                                      onChange={e => setAnswer(e.currentTarget.value)}/></label>\r\n                {/*двойной range для сортировки по оценкам (grade)*/}\r\n                <div className={style.rangeContainer}>Search cards by grade:\r\n                    <DoubleRange minValue={minGrade} maxValue={maxGrade} onValuesChange={onGradeRangeChange}\r\n                                 maxRangeLimit={5}/></div>\r\n            </div>\r\n            {error && <div className={style.error}>{error}</div>}\r\n            {/*таблица с карточками*/}\r\n            <CardsTable cards={cards} packId={packId} packUserId={packUserId} authUserId={authUserId} requestStatus={requestStatus}/>\r\n            {/*Pagination*/}\r\n            <div className={style.pagination}>\r\n                <Paginator current={page}\r\n                           pageCount={pageCount}\r\n                           total={cardsTotalCount}\r\n                           onChange={paginatorPage}\r\n                           requestStatus={requestStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {RequestStatusType, setAuthUserDataAC} from \"../features/Login/auth-reducer\";\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialAppStateType = initialState, action: AppActionsType): InitialAppStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {type: 'APP/SET-STATUS', status} as const\r\n}\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {type: 'APP/SET-ERROR', error} as const\r\n}\r\nexport const setIsInitializedAC = (isInitialized: boolean) => {\r\n    return {type: 'APP/SET-INITIALIZED', isInitialized} as const\r\n}\r\n\r\n//thunk\r\nexport const initializeAppTC = () => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.me()\r\n        .then(res => {\r\n            dispatch(setAuthUserDataAC(res.data._id, res.data.email, res.data.name, res.data.avatar, true))\r\n            dispatch(setAppStatusAC('success'))\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setAppErrorAC(error))\r\n            dispatch(setAppStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setAppErrorAC(''))\r\n            }, 3000)\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialAppStateType = typeof initialState\r\n\r\nexport type AppActionsType =\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setIsInitializedAC>\r\n\r\ntype ThunkCustomDispatch = Dispatch<AppActionsType | ReturnType<typeof setAuthUserDataAC>>","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Forgot} from \"../features/Forgot/Forgot\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Register} from \"../features/Register/Register\";\r\nimport {SetPassword} from \"../features/SetPassword/SetPassword\";\r\nimport {Profile} from \"../features/Profile/Profile\";\r\nimport {Header} from \"../features/Header/Header\";\r\nimport {Packs} from \"../features/Packs/Packs\";\r\nimport {Cards} from \"../features/Cards/Cards\";\r\nimport {initializeAppTC} from \"./app-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {Spin} from 'antd';\r\nimport {LoadingOutlined} from '@ant-design/icons';\r\n\r\nexport const PATH = {\r\n    LOGIN: \"/login\",\r\n    REGISTER: \"/register\",\r\n    FORGOT: \"/forgot\",\r\n    SET_PASSWORD: \"/set-new-password\",\r\n    PROFILE: \"/profile\",\r\n    PACKS: \"/packs\",\r\n    CARDS: \"/cards\",\r\n}\r\n\r\nconst App = () => {\r\n    let isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    let dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '50%', textAlign: 'center', width: '100%'}}>\r\n            <Spin indicator={antIcon} />\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <Switch>\r\n                <Route exact path={['/', `${PATH.PROFILE}`]} render={() => <Profile/>}/>\r\n                <Route path={PATH.REGISTER} render={() => <Register/>}/>\r\n                <Route path={PATH.FORGOT} render={() => <Forgot/>}/>\r\n                <Route path={`${PATH.SET_PASSWORD}/:token?`} render={() => <SetPassword/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.PACKS} render={() => <Packs/>}/>\r\n                <Route path={`${PATH.CARDS}/:packId?`} render={() => <Cards/>}/>\r\n                <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                <Redirect from={'*'} to={'/404'}/>\r\n\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    //\r\n}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        //cases\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\n// export const setSomethingAC = () => ({type: 'PROFILE/SET-SOMETHING'} as const)\r\n\r\n//thunk\r\n// export const doSomethingTC = () => (dispatch: ThunkDispatch) => {\r\n//\r\n// }\r\n\r\n//types\r\nexport type InitialStateType = typeof initialState\r\n//объединение типов actionов:\r\n// export type ActionsType = ReturnType<typeof setSomethingAC>\r\n// тип диспатча:\r\n// type ThunkDispatch = Dispatch<ReturnType<typeof setSomethingAC>>","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {registerReducer} from \"../features/Register/register-reducer\";\r\nimport {setPasswordReducer} from \"../features/SetPassword/set-password-reducer\";\r\nimport {profileReducer} from \"../features/Profile/profile-reducer\";\r\nimport {forgotReducer} from \"../features/Forgot/forgot-reducer\";\r\nimport {packsReducer} from \"../features/Packs/packs-reducer\";\r\nimport {cardsReducer} from \"../features/Cards/cards-reducer\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n// комбайним редюсеры\r\nconst rootReducer = combineReducers({  //стейт\r\n    auth: authReducer,\r\n    register: registerReducer,\r\n    forgot: forgotReducer,\r\n    setPassword: setPasswordReducer,\r\n    profile: profileReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer,\r\n    app: appReducer\r\n})\r\n//создаем store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n//тип стейта\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// для вызова store из консоли\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__10VB5\",\"active\":\"Header_active__3B1Kt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packs\":\"Packs_packs__11aat\",\"filter\":\"Packs_filter__3-7jv\",\"rangeContainer\":\"Packs_rangeContainer__1utv6\",\"error\":\"Packs_error__3ODBf\",\"pagination\":\"Packs_pagination__3tqEx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2ck6i\",\"loading\":\"Login_loading__1oP3o\",\"error\":\"Login_error__1oq8R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cards\":\"Cards_cards__1nz5C\",\"filter\":\"Cards_filter__3iNkp\",\"rangeContainer\":\"Cards_rangeContainer__1ny9W\",\"error\":\"Cards_error__2Xcy8\",\"pagination\":\"Cards_pagination__34Qpn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setPassword\":\"SetPassword_setPassword__ji0HF\",\"loading\":\"SetPassword_loading__2N13G\",\"error\":\"SetPassword_error__8FOW9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgot\":\"Forgot_forgot__3iT7N\",\"loading\":\"Forgot_loading__2vdJ9\",\"error\":\"Forgot_error__2B138\"};"],"sourceRoot":""}