{"version":3,"sources":["features/Forgot/Forgot.module.css","features/Profile/Profile.module.css","features/Register/Register.module.css","features/Learn/Learn.module.css","common/DoubleRange/DoubleRange.module.css","api/api.ts","features/Forgot/forgot-reducer.ts","features/Forgot/Forgot.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","features/Register/register-reducer.ts","features/Register/Register.tsx","features/SetPassword/set-password-reducer.ts","features/SetPassword/SetPassword.tsx","features/Profile/Profile.tsx","features/Header/Header.tsx","features/Packs/packs-reducer.ts","common/DoubleRange/DoubleRange.tsx","features/Paginator/Paginator.tsx","common/Modal/Modal.tsx","features/Modals/AddItemModal/AddItemModal.tsx","features/Modals/DeleteItemModal/DeleteItemModal.tsx","features/Modals/UpdateItemModal/UpdateItemModal.tsx","features/Packs/PacksTable.tsx","features/Packs/Packs.tsx","features/Cards/cards-reducer.ts","features/Cards/CardsTable.tsx","features/Cards/Cards.tsx","app/app-reducer.ts","utils/get-random-card.ts","features/Learn/Learn.tsx","app/App.tsx","reportWebVitals.ts","features/Profile/profile-reducer.ts","app/store.ts","index.tsx","features/Login/Login.module.css","features/Packs/Packs.module.css","features/Header/Header.module.css","features/Cards/Cards.module.css","features/SetPassword/SetPassword.module.css"],"names":["module","exports","SortDirections","instance","axios","create","withCredentials","baseURL","authAPI","post","loginData","regData","delete","newUserData","put","email","from","message","resetPassData","packsAPI","params","nameToSearch","maxCardsCount","minCardsCount","page","pageCount","sortDirection","propToSortBy","userId","get","packName","sortPacks","min","max","user_id","name","isPrivate","deckCover","cardsPack","private","packId","_id","cardsAPI","question","answer","minGrade","maxGrade","cardsPack_id","cardQuestion","cardAnswer","sortCards","grade","shots","rating","answerImg","questionImg","questionVideo","answerVideo","type","card","cardId","comments","card_id","initialState","requestStatus","error","info","setRequestStatusAC","Forgot","useSelector","state","forgot","dispatch","useDispatch","useState","setEmail","className","style","loading","value","onChange","e","currentTarget","trim","onClick","then","res","data","catch","response","setErrorAC","sendEmailToResetPassTC","disabled","to","activeClassName","active","avatar","isLoggedIn","setAuthUserDataAC","payload","updateUserDataTC","newData","getState","auth","updatedUser","setTimeout","Login","formik","useFormik","validate","values","password","initialValues","rememberMe","onSubmit","PATH","PROFILE","handleSubmit","login","Item","notice","REGISTER","getFieldProps","errors","checked","color","responseText","isRegistration","setResponseTextAC","text","setRegistrationAC","Register","register","emailValue","setEmailValue","setPassword","confirmPassword","setConfirmPassword","errorPassword","setErrorPassword","clearError","placeholder","onKeyPress","length","err","requestRegister","SetPassword","token","useParams","password1","setPassword1","password2","setPassword2","localError","setLocalError","resetPasswordToken","Profile","Paragraph","Typography","newAvatarUrl","setNewAvatarUrl","setAvatarTools","profile","content","title","trigger","src","size","icon","UserOutlined","editable","newName","LOGIN","Header","header","FORGOT","SET_PASSWORD","PACKS","CARDS","cardPacks","cardPacksTotalCount","sortParams","Down","undefined","setPacksAC","setSortParamsAC","getPacksTC","packs","DoubleRange","React","memo","minRangeLimit","maxRangeLimit","minValue","maxValue","onValuesChange","setMin","setMax","onSliderValuesChange","useCallback","onMouseUpHandler","rangeBlock","range","draggableTrack","onAfterChange","tooltipVisible","Paginator","props","showQuickJumper","current","total","pageSize","Modal","enableBackground","backgroundOnClick","modalWidthPx","modalHeightPx","modalStyle","modalOnClick","show","children","top","left","position","width","height","background","opacity","zIndex","display","flexFlow","alignItems","justifyContent","backgroundColor","borderRadius","AddItemModal","inputLabels","itemToAdd","setShow","onAddBtnClick","Array","setValues","map","l","i","index","valuesCopy","v","onChangeHandler","DeleteItemModal","itemToDelete","onDeleteBtnClick","UpdateItemModal","inputValues","itemToUpdate","onUpdateBtnClick","PacksTable","authUserId","showAddItemModal","setShowAddItemModal","showDeleteItemModal","setShowDeleteItemModal","showUpdateItemModal","setShowUpdateItemModal","currentPackID","setCurrentPackID","currentPackName","setCurrentPackName","p","key","cardsCount","updated","createdBy","user_name","buttons","packUserId","columns","dataIndex","sorter","render","LEARN","dataSource","pagination","filters","columnKey","order","Up","isToBeDeleted","Packs","searchByName","setSearchByName","useEffect","onCardsCountChange","paginatorPage","filter","rangeContainer","cards","cardsTotalCount","setCardsAC","getCardsTC","CardsTable","onDeleteClick","deleteCardTC","onUpdateClick","updateCardTC","c","cardUserId","addCardTC","Cards","setAnswer","setQuestion","onGradeRangeChange","isPackFound","some","status","isInitialized","setAppStatusAC","setAppErrorAC","setIsInitializedAC","getRandomCard","cardsCopy","totalSum","reduce","acc","random","Math","sum","Learn","history","useHistory","showAnswer","setShowAnswer","isFirstCard","setIsFirstCard","created","Date","setCard","onGradeBtnClick","setNewGradeAC","updatedGrade","updateGradeTC","push","dataset","data-grade","App","app","antIcon","LoadingOutlined","fontSize","spin","exact","path","textAlign","indicator","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6d25f920.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgot\":\"Forgot_forgot__3iT7N\",\"loading\":\"Forgot_loading__2vdJ9\",\"error\":\"Forgot_error__2B138\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__OylV9\",\"loading\":\"Profile_loading__1TdAz\",\"error\":\"Profile_error__3qnVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Register_register__298wP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"learn\":\"Learn_learn__14aic\",\"filter\":\"Learn_filter__1Z-y4\",\"rangeContainer\":\"Learn_rangeContainer__3rHkm\",\"error\":\"Learn_error__2DxqE\",\"pagination\":\"Learn_pagination__2D1sM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rangeBlock\":\"DoubleRange_rangeBlock__eFtuj\"};","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/'\r\n}) //перед каждым pushем на gitHub менять baseURL с http://localhost:7542/2.0/ на https://neko-back.herokuapp.com/2.0/ !\r\n\r\nexport const authAPI = {\r\n    me() { // проверка на залогиненность\r\n        return instance.post<AuthUserData>(`auth/me`)\r\n    },\r\n    login(loginData: LoginDataType) {\r\n        return instance.post<AuthUserData>(`auth/login`, loginData)\r\n    },\r\n    register(regData: RegDataType) {\r\n        return instance.post<{ addedUser: AuthUserData, error?: string }>(`auth/register`, regData)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/me`)\r\n    },\r\n    updateUserData(newUserData: NewUserDataType) { // обновление name или аватарки юзера\r\n        return instance.put<{ updatedUser: AuthUserData, error?: string }>(`auth/me`, newUserData)\r\n    },\r\n    sendEmailToResetPass(email: string) { // отправляем емайл, если забыл пароль, со страницы Forgot\r\n        return instance.post<ResponseType>(`auth/forgot`, {\r\n            email,\r\n            from: \"test-front-admin <ai73a@yandex.by>\",\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\n                 password recovery link:\r\n                 <a href='http://marygrishchuk.github.io/cards-by-dream-team/#/set-new-password/$token$'>\r\n                 Reset Password</a></div>`\r\n        })\r\n    },\r\n    resetPassword(resetPassData: ResetPassDataType) { // отправка нового пароля со страницы Set New Password\r\n        return instance.post<ResponseType>(`auth/set-new-password`, resetPassData)\r\n    }\r\n}\r\n\r\nexport const packsAPI = {\r\n    getPacks(params: GetSortedPacksType = {}) { // получение колод\r\n        const {\r\n            nameToSearch, maxCardsCount, minCardsCount, page, pageCount, sortDirection = '', propToSortBy = '', userId\r\n        } = params\r\n        return instance.get<GetPackResponseType>(`cards/pack`, {params: {packName: nameToSearch,\r\n                sortPacks: sortDirection + propToSortBy, min: minCardsCount, max: maxCardsCount, page, pageCount,\r\n                user_id: userId}})\r\n    },\r\n    addPack(name?: string, isPrivate?: boolean, deckCover?: string) {  // добавление (создание) колоды\r\n        return instance.post<AddPackResponseType>(`cards/pack`, {cardsPack: {name, private: isPrivate, deckCover}})\r\n    },\r\n    deletePack(packId: string) { //удаление колоды\r\n        return instance.delete<DeletePackResponseType>(`cards/pack?id=${packId}`)\r\n    },\r\n    updatePack(packId: string, name?: string) { //изменение колоды\r\n        return instance.put<UpdatePackResponseType>(`cards/pack`, {cardsPack: {_id: packId, name}})\r\n    },\r\n}\r\n\r\nexport const cardsAPI = {\r\n    getCards(packId: string, params: GetSortedCardsType = {}) { // получение карточек по id колоды\r\n        const {question, answer, sortDirection = '', propToSortBy = '', minGrade, maxGrade, page, pageCount} = params\r\n        return instance.get<GetCardsResponseType>(`cards/card`, {params: {cardsPack_id: packId, cardQuestion: question,\r\n                cardAnswer: answer, sortCards: sortDirection + propToSortBy, min: minGrade, max: maxGrade, page, pageCount}})\r\n    },\r\n    addCard(packId: string, params: NewCardDataType = {}) {  // добавление (создание) карточки\r\n        const {\r\n            question, answer, grade, shots, rating, answerImg, questionImg,\r\n            questionVideo, answerVideo, type\r\n        } = params\r\n        return instance.post<AddCardResponseType>(`cards/card`, {\r\n            card: {\r\n                cardsPack_id: packId, question, answer, grade, shots,\r\n                rating, answerImg, questionImg, questionVideo, answerVideo, type\r\n            }\r\n        })\r\n    },\r\n    deleteCard(cardId: string) { //удаление карточки\r\n        return instance.delete<DeleteCardResponseType>(`cards/card?id=${cardId}`)\r\n    },\r\n    updateCard(cardId: string, params: NewCardDataType = {}, comments?: string) { //изменение карточки\r\n        const {\r\n            question, answer, grade, shots, rating, answerImg, questionImg,\r\n            questionVideo, answerVideo, type\r\n        } = params\r\n        return instance.put<UpdateCardResponseType>(`cards/card`, {\r\n            card: {\r\n                _id: cardId, question, answer, grade, shots,\r\n                rating, answerImg, questionImg, questionVideo, answerVideo, type, comments\r\n            }\r\n        })\r\n    },\r\n    updateGrade(grade: number, card_id: string) {\r\n        return instance.put<UpdateGradeResponseType>(`cards/grade`, {grade, card_id})\r\n    }\r\n}\r\n\r\n//types\r\nexport type LoginDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type RegDataType = {\r\n    email: string\r\n    password: string\r\n}\r\nexport type NewUserDataType = {\r\n    name: string\r\n    avatar?: string\r\n}\r\nexport type ResetPassDataType = {\r\n    password: string\r\n    resetPasswordToken: string | undefined\r\n}\r\nexport type AuthUserData = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\nexport type ResponseType = {\r\n    info: string\r\n    error?: string\r\n}\r\n\r\nexport type GetPackResponseType = {\r\n    cardPacks: Array<PackDataType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n\r\n}\r\n\r\nexport type PackDataType = {\r\n    _id: string\r\n    name: string\r\n    cardsCount: number\r\n    created: Date\r\n    updated: Date\r\n    user_id: string\r\n    user_name: string\r\n    deckCover: string\r\n    grade: number\r\n    path: string\r\n    private: boolean\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n}\r\n\r\nexport type NewPackType = {\r\n    name?: string\r\n    deckCover?: string\r\n    private?: boolean\r\n}\r\n\r\nexport type AddPackResponseType = {\r\n    newCardsPack: PackDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type DeletePackResponseType = {\r\n    deletedCardsPack: PackDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type UpdatePackResponseType = {\r\n    updatedCardsPack: PackDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport type GetCardsResponseType = {\r\n    cards: Array<CardDataType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\n\r\nexport type CardDataType = {\r\n    _id: string\r\n    question: string\r\n    answer: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: Date\r\n    updated: Date\r\n    comments: string\r\n}\r\n\r\nexport enum SortDirections {\r\n    Up = 0,\r\n    Down = 1,\r\n}\r\n\r\nexport type GetSortedPacksType = {\r\n    nameToSearch?: string\r\n    minCardsCount?: number\r\n    maxCardsCount?: number\r\n    sortDirection?: SortDirections\r\n    propToSortBy?: \"name\" | \"cardsCount\" | \"updated\"\r\n    page?: number\r\n    pageCount?: number\r\n    userId?: string\r\n\r\n}\r\nexport type GetSortedCardsType = {\r\n    question?: string\r\n    answer?: string\r\n    sortDirection?: SortDirections\r\n    propToSortBy?: \"grade\" | \"updated\"\r\n    minGrade?: number\r\n    maxGrade?: number\r\n    page?: number\r\n    pageCount?: number\r\n}\r\n\r\nexport type NewCardDataType = {\r\n    question?: string\r\n    answer?: string\r\n    grade?: 0 | 1 | 2 | 3 | 4 | 5\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n    type?: \"card\"\r\n}\r\n\r\nexport type AddCardResponseType = {\r\n    newCard: CardDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type DeleteCardResponseType = {\r\n    deletedCard: CardDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type UpdateCardResponseType = {\r\n    updatedCard: CardDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type UpdateGradeResponseType = {\r\n    updatedGrade: UpdateGradeType\r\n}\r\nexport type UpdateGradeType = {\r\n    _id: string\r\n    cardsPack_id: string\r\n    card_id: string\r\n    user_id: string\r\n    grade: number\r\n    shots: number\r\n}","import {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../api/api\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - \"неактивный\"\r\n    error: '',\r\n    info: ''\r\n}\r\n\r\nexport const forgotReducer = (state: InitialForgotStateType = initialState, action: ActionsType): InitialForgotStateType => {\r\n    switch (action.type) {\r\n        case 'FORGOT/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'FORGOT/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                info: ''\r\n            }\r\n        }\r\n        case 'FORGOT/SET-INFO': {\r\n            return {\r\n                ...state,\r\n                info: action.info,\r\n                error: ''\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'FORGOT/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'FORGOT/SET-ERROR', error} as const)\r\nconst setInfoAC = (info: string) => ({type: 'FORGOT/SET-INFO', info} as const)\r\n\r\n//thunk\r\nexport const sendEmailToResetPassTC = (email: string) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.sendEmailToResetPass(email)\r\n        .then(res => {\r\n            dispatch(setInfoAC(res.data.info))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialForgotStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setInfoAC>\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {ChangeEvent, useState} from \"react\";\r\nimport style from \"./Forgot.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {InitialForgotStateType, sendEmailToResetPassTC} from \"./forgot-reducer\";\r\n\r\nexport const Forgot = () => {\r\n    const {requestStatus, error, info} = useSelector<AppRootStateType, InitialForgotStateType>(state => state.forgot)\r\n    const dispatch = useDispatch()\r\n\r\n    const [email, setEmail] = useState('')\r\n\r\n    const onEmailInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value.trim())\r\n    }\r\n    const onSendBtnClick = () => {\r\n        dispatch(sendEmailToResetPassTC(email))\r\n    }\r\n\r\n    return (\r\n        <div className={style.forgot}>\r\n            Please enter your email, and we'll send you a link to reset your password.\r\n            {requestStatus === 'loading'\r\n                ? <div className={style.loading}>loading...</div>\r\n                : info && <i>{info}</i>}\r\n            {error && <div className={style.error}>{error}</div>}\r\n            <input type=\"email\" value={email} onChange={onEmailInput}/>\r\n            <button onClick={onSendBtnClick} disabled={requestStatus === 'loading'}>Send</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI, LoginDataType} from \"../../api/api\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\nconst initialState = {\r\n    _id: \"\",\r\n    email: \"\",\r\n    name: \"\",\r\n    avatar: \"\" as string | undefined,\r\n    error: \"\",\r\n    isLoggedIn: false,\r\n    requestStatus: 'idle' as RequestStatusType //изначально статус запроса - \"неактивный\"\r\n}\r\n\r\nexport const authReducer = (state: InitialAuthStateType = initialState, action: ActionsType): InitialAuthStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET-AUTH-USER-DATA': {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        case 'AUTH/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'AUTH/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nexport const setAuthUserDataAC = (_id: string, email: string, name: string, avatar: string | undefined, isLoggedIn: boolean) => ({\r\n    type: 'AUTH/SET-AUTH-USER-DATA',\r\n    payload: {_id, email, name, avatar, isLoggedIn}\r\n} as const)\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'AUTH/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\n\r\nconst setErrorAC = (error: string) => ({type: 'AUTH/SET-ERROR', error} as const)\r\n\r\n\r\n//thunks\r\nexport const loginTC = (loginData: LoginDataType) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.login(loginData)\r\n        .then((res) => {\r\n            dispatch(setAuthUserDataAC(res.data._id, res.data.email, res.data.name, res.data.avatar, true))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(() => {\r\n            dispatch(setAuthUserDataAC(\"\", \"\", \"\", \"\", false))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\nexport const updateUserDataTC = (newData: { name?: string, avatar?: string }) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>,\r\n                                                                                  getState: () => AppRootStateType) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.updateUserData({\r\n        name: newData.name || getState().auth.name,\r\n        avatar: newData.avatar || getState().auth.avatar\r\n    })\r\n        .then(res => {\r\n            dispatch(setAuthUserDataAC(res.data.updatedUser._id, res.data.updatedUser.email,\r\n                res.data.updatedUser.name, res.data.updatedUser.avatar, getState().auth.isLoggedIn))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialAuthStateType = typeof initialState\r\nexport type RequestStatusType = 'idle' | 'loading' | 'success' | 'failed'\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setAuthUserDataAC>\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React from \"react\";\r\nimport style from \"./Login.module.css\"\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {InitialAuthStateType, loginTC} from \"./auth-reducer\";\r\nimport {PATH} from \"../../app/App\";\r\nimport { Form } from \"antd\";\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {isLoggedIn, requestStatus, error} = useSelector<AppRootStateType, InitialAuthStateType>(state => state.auth)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: \"Email is required\"\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: \"Password is required\"\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n\r\n                <div className={style.login}>\r\n                    <Form.Item className={style.notice}>\r\n                        <p>To log in, please get registered\r\n                            <NavLink to={PATH.REGISTER} activeClassName={style.active}> here,</NavLink>\r\n                        </p>\r\n                        <p>or please use common test account credentials:</p>\r\n                        <p>Email: nya-admin@nya.nya</p>\r\n                        <p>Password: 1qazxcvBG</p>\r\n                    </Form.Item>\r\n                    {requestStatus === 'loading' && <div className={style.loading}>loading...</div>}\r\n                    {error && <div className={style.error}>{error}</div>}\r\n                    <label>Email</label>\r\n                    <input type=\"email\" {...formik.getFieldProps(\"email\")}/>\r\n                    {formik.errors.email ? <div className={style.error}>{formik.errors.email}</div> : null}\r\n\r\n                    <label>Password</label>\r\n                    <input type=\"password\" {...formik.getFieldProps(\"password\")}/>\r\n                    {formik.errors.password ? <div className={style.error}>{formik.errors.password}</div> : null}\r\n\r\n                    <NavLink to=\"/forgot\" activeClassName={style.active}>Forgot password?</NavLink>\r\n\r\n                    <label>Remember Me<input type=\"checkbox\" {...formik.getFieldProps(\"rememberMe\")}\r\n                                             checked={formik.values.rememberMe}/></label>\r\n\r\n                    <button type={'submit'} color={'primary'}>Login</button>\r\n                    <NavLink to=\"/register\" activeClassName={style.active}>Registration</NavLink>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}","import {authAPI, RegDataType} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nconst initialState = {\r\n    responseText: '',\r\n    isRegistration: false\r\n}\r\n\r\nexport const registerReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        //cases\r\n        case \"REGISTER/SUCCESS_REGISTER\": {\r\n            return {...state, responseText: action.text}\r\n        }\r\n        case \"REGISTER/SET-REGISTRATION\": {\r\n            return {\r\n                ...state, isRegistration: action.isRegistration,\r\n                responseText: state.isRegistration === true ? '' : state.responseText\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\n// export const setSomethingAC = () => ({type: 'REGISTER/SET-SOMETHING'} as const)\r\nconst setResponseTextAC = (text: string) => ({type: 'REGISTER/SUCCESS_REGISTER', text} as const)\r\nconst setRegistrationAC = (isRegistration: boolean) => ({type: 'REGISTER/SET-REGISTRATION', isRegistration} as const)\r\n//thunk\r\n// export const doSomethingTC = () => (dispatch: ThunkDispatch) => {\r\n//\r\n// }\r\nexport const requestRegister = (regData: RegDataType) => (dispatch: ThunkCustomDispatch) => {\r\n    authAPI.register(regData)\r\n        .then((res) => {\r\n            dispatch(setResponseTextAC('success'))\r\n\r\n            setTimeout(() => {\r\n                dispatch(setRegistrationAC(true))\r\n                dispatch(setRegistrationAC(false))\r\n            }, 1000)\r\n\r\n        })\r\n        .catch((err) => {\r\n\r\n            dispatch(setResponseTextAC(err.response.data.error))\r\n            setTimeout(() => {\r\n                dispatch(setResponseTextAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n//types\r\nexport type InitialStateType = typeof initialState\r\n//объединение типов actionов:\r\n// export type ActionsType = ReturnType<typeof setSomethingAC>\r\ntype ActionsType = ReturnType<typeof setResponseTextAC> | ReturnType<typeof setRegistrationAC>\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {useState} from \"react\";\r\nimport style from \"./Register.module.css\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {requestRegister} from \"./register-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\nexport const Register = () => {\r\n    const text = useSelector<AppRootStateType, string>(state => state.register.responseText)\r\n    const isRegistration = useSelector<AppRootStateType, boolean>(state => state.register.isRegistration)\r\n\r\n    const dispatch = useDispatch()\r\n    const [emailValue, setEmailValue] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [errorPassword, setErrorPassword] = useState('')\r\n\r\n    const regData = {email: emailValue, password: password}\r\n    const setRegister = () => {\r\n        if (password === confirmPassword && password.length >= 8) {\r\n            dispatch(requestRegister(regData))\r\n        } else if (password !== confirmPassword) {\r\n            setErrorPassword(\"Passwords don't match.\")\r\n        } else if (password.length < 8 || confirmPassword.length < 8) {\r\n            setErrorPassword(\"Password must contain at least 8 characters.\")\r\n        }\r\n    }\r\n    const clearError = () => {\r\n        setErrorPassword('')\r\n    }\r\n\r\n\r\n    if (isRegistration) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.register}>\r\n            <h3>{text}</h3>\r\n            Register\r\n            <input type=\"email\" placeholder={'email'} onChange={(e) => setEmailValue(e.currentTarget.value)}\r\n                   onKeyPress={clearError}/>\r\n            <input type=\"password\" placeholder={'password'} onChange={(e) => setPassword(e.currentTarget.value)}\r\n                   onKeyPress={clearError}/>\r\n            <input type=\"password\" placeholder={'confirm password'} onKeyPress={clearError}\r\n                   onChange={(e) => setConfirmPassword(e.currentTarget.value)}/>\r\n            {errorPassword}\r\n            <button onClick={setRegister}>Register</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import {authAPI} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - \"неактивный\"\r\n    error: '',\r\n    info: ''\r\n}\r\n\r\nexport const setPasswordReducer = (state: SetPasswordStateType = initialState, action: ActionsType): SetPasswordStateType => {\r\n    switch (action.type) {\r\n        case 'SET-PASSWORD/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'SET-PASSWORD/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                info: ''\r\n            }\r\n        }\r\n        case 'SET-PASSWORD/SET-INFO': {\r\n            return {\r\n                ...state,\r\n                info: action.info,\r\n                error: ''\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'SET-PASSWORD/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'SET-PASSWORD/SET-ERROR', error} as const)\r\nconst setInfoAC = (info: string) => ({type: 'SET-PASSWORD/SET-INFO', info} as const)\r\n\r\n//thunk\r\nexport const resetPasswordTC = (password: string, resetPasswordToken: string | undefined) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.resetPassword({password, resetPasswordToken})\r\n        .then(res => {\r\n            dispatch(setInfoAC(res.data.info))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\n//types\r\nexport type SetPasswordStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setInfoAC>\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {ChangeEvent, useState} from \"react\";\r\nimport style from \"./SetPassword.module.css\";\r\nimport {NavLink, Redirect, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {resetPasswordTC, SetPasswordStateType} from \"./set-password-reducer\";\r\n\r\nexport const SetPassword = () => {\r\n    const {requestStatus, error, info} = useSelector<AppRootStateType, SetPasswordStateType>(state => state.setPassword)\r\n    const dispatch = useDispatch()\r\n    const {token} = useParams<{ token?: string }>()\r\n\r\n    const [password1, setPassword1] = useState('')\r\n    const [password2, setPassword2] = useState('')\r\n    const [localError, setLocalError] = useState('')\r\n\r\n    const onPassword1Input = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword1(e.currentTarget.value)\r\n    }\r\n    const onPassword2Input = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword2(e.currentTarget.value)\r\n    }\r\n    const onSubmit = () => {\r\n        if (password1 === password2 && password1.length >= 8) {\r\n            dispatch(resetPasswordTC(password1, token))\r\n        } else if (password1 !== password2) {\r\n            setLocalError(\"Passwords don't match.\")\r\n        } else if (password1.length < 8 || password2.length < 8) {\r\n            setLocalError(\"Password must contain at least 8 characters.\")\r\n        }\r\n    }\r\n    if (requestStatus === 'success') return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={style.setPassword}>\r\n            Please enter your new password in each field.\r\n            {requestStatus === 'loading'\r\n                ? <div className={style.loading}>loading...</div>\r\n                : info && <i>{info}</i>}\r\n            {error && <div className={style.error}>{error}</div>}\r\n            {localError && <div className={style.error}>{localError}</div>}\r\n            <input type=\"password\" value={password1} onChange={onPassword1Input}\r\n                   onKeyPress={() => setLocalError(\"\")}/>\r\n            <input type=\"password\" value={password2} onChange={onPassword2Input}\r\n                   onKeyPress={() => setLocalError(\"\")}/>\r\n            <button onClick={onSubmit} disabled={requestStatus === 'loading'}>Submit</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import React, {useState} from \"react\";\r\nimport style from \"./Profile.module.css\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {InitialAuthStateType, logoutTC, updateUserDataTC} from \"../Login/auth-reducer\";\r\nimport {Avatar, Popover} from 'antd';\r\nimport {UserOutlined} from '@ant-design/icons';\r\nimport { Typography } from 'antd';\r\nimport {PATH} from \"../../app/App\";\r\n\r\nexport const Profile = () => {\r\n    const {\r\n        email,\r\n        name,\r\n        error,\r\n        avatar,\r\n        isLoggedIn,\r\n        requestStatus\r\n    } = useSelector<AppRootStateType, InitialAuthStateType>(state => state.auth)\r\n    const dispatch = useDispatch()\r\n    const { Paragraph } = Typography;\r\n    const [newAvatarUrl, setNewAvatarUrl] = useState('')\r\n\r\n    const onLogoutClick = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    const onChangeAvatarClick = () => {\r\n        dispatch(updateUserDataTC({avatar: newAvatarUrl}))\r\n    }\r\n    const onNewNameSubmit = (newName: string) => {\r\n        dispatch(updateUserDataTC({name: newName}))\r\n    }\r\n\r\n    const setAvatarTools = (\r\n        <span>\r\n            <label>Enter avatar URL or Base64:\r\n                <input onChange={e => setNewAvatarUrl(e.currentTarget.value)}\r\n                       value={newAvatarUrl}/>\r\n            </label>\r\n            <button onClick={onChangeAvatarClick}>Set Avatar</button>\r\n        </span>\r\n    )\r\n\r\n    if (!isLoggedIn) return <Redirect to={PATH.LOGIN}/>\r\n\r\n    return (\r\n        <div className={style.profile}>\r\n            Welcome!\r\n            {requestStatus === 'loading' && <div className={style.loading}>loading...</div>}\r\n            {error && <div className={style.error}>{error}</div>}\r\n            {avatar\r\n                ? <Popover content={setAvatarTools} title=\"Change avatar\" trigger=\"hover\">\r\n                    <Avatar src={avatar} size={64}/>\r\n                </Popover>\r\n                : <Popover content={setAvatarTools} title=\"Add avatar\" trigger=\"hover\">\r\n                    <Avatar size={64}\r\n                            icon={<UserOutlined/>}/>\r\n                </Popover>}\r\n            <Paragraph editable={{ onChange: onNewNameSubmit }}>{name}</Paragraph>\r\n            <div>{email}</div>\r\n            <button onClick={onLogoutClick} disabled={requestStatus === 'loading'}>Log out</button>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport style from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../app/App\";\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div className={style.header}>\r\n            <NavLink to={PATH.LOGIN} activeClassName={style.active}>Login</NavLink>\r\n            <NavLink to={PATH.REGISTER} activeClassName={style.active}>Register</NavLink>\r\n            <NavLink to={PATH.FORGOT} activeClassName={style.active}>Forgot</NavLink>\r\n            <NavLink to={PATH.SET_PASSWORD} activeClassName={style.active}>Set New Password</NavLink>\r\n            <NavLink to={PATH.PROFILE} activeClassName={style.active}>Profile</NavLink>\r\n            <NavLink to={PATH.PACKS} activeClassName={style.active}>Packs</NavLink>\r\n            <NavLink to={PATH.CARDS} activeClassName={style.active}>Cards</NavLink>\r\n        </div>\r\n    );\r\n}","import {GetSortedPacksType, PackDataType, packsAPI, SortDirections} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\n\r\nconst initialState = {\r\n    cardPacks: [] as Array<PackDataType>,\r\n    requestStatus: 'idle' as RequestStatusType,\r\n    error: \"\",\r\n    cardPacksTotalCount: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    sortParams: {\r\n        nameToSearch: '',\r\n        minCardsCount: 0,\r\n        maxCardsCount: 100,\r\n        sortDirection: SortDirections.Down,\r\n        propToSortBy: undefined,\r\n        page: 1,\r\n        pageCount: 10,\r\n        userId: ''\r\n    } as GetSortedPacksType\r\n}\r\n\r\nexport const packsReducer = (state = initialState, action: ActionsType): PacksStateType => {\r\n    switch (action.type) {\r\n        case 'PACKS/SET-PACKS': {\r\n            return {\r\n                ...state,\r\n                cardPacks: action.cardPacks,\r\n                cardPacksTotalCount: action.cardPacksTotalCount,\r\n                page: action.page,\r\n                pageCount: action.pageCount\r\n            }\r\n        }\r\n        case 'PACKS/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'PACKS/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        case 'PACKS/SET-SORT-PARAMS': {\r\n            return {\r\n                ...state,\r\n                sortParams: {...state.sortParams, ...action.sortParams}\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setPacksAC = (cardPacks: Array<PackDataType>, cardPacksTotalCount: number, page: number, pageCount: number) => ({\r\n    type: 'PACKS/SET-PACKS',\r\n    cardPacks, cardPacksTotalCount,\r\n    page, pageCount\r\n} as const)\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'PACKS/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\n\r\nconst setErrorAC = (error: string) => ({type: 'PACKS/SET-ERROR', error} as const)\r\nconst setSortParamsAC = (sortParams: GetSortedPacksType) => ({type: 'PACKS/SET-SORT-PARAMS', sortParams} as const)\r\n\r\n\r\n//thunk\r\nexport const getPacksTC = (params: GetSortedPacksType = {}) => (dispatch: ThunkCustomDispatch, getState: () => AppRootStateType) => {\r\n    if (params) dispatch(setSortParamsAC(params))\r\n    const sortParams = getState().packs.sortParams\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.getPacks(sortParams)\r\n        .then(res => {\r\n            dispatch(setPacksAC(res.data.cardPacks, res.data.cardPacksTotalCount, res.data.page, res.data.pageCount))\r\n            dispatch(setRequestStatusAC('success'))\r\n\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const addPackTC = (name?: string, isPrivate?: boolean, deckCover?: string) => (\r\n    dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.addPack(name, isPrivate, deckCover)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const deletePackTC = (packId: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.deletePack(packId)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const updatePackTC = (packId: string, name?: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.updatePack(packId, name)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type PacksStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setPacksAC>\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setSortParamsAC>\r\n\r\n\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {useCallback, useState} from \"react\";\r\nimport {Slider} from 'antd';\r\nimport style from \"./DoubleRange.module.css\";\r\n\r\ntype DoubleRangePropsType = {\r\n    minRangeLimit?: number\r\n    maxRangeLimit?: number\r\n    minValue: number | undefined\r\n    maxValue: number | undefined\r\n    onValuesChange: ([minValue, maxValue]: Array<number | undefined>) => void\r\n}\r\nexport const DoubleRange = React.memo(({\r\n                                           minRangeLimit = 0,\r\n                                           maxRangeLimit = 100,\r\n                                           minValue,\r\n                                           maxValue,\r\n                                           onValuesChange\r\n                                       }: DoubleRangePropsType) => {\r\n\r\n    const [min, setMin] = useState(minValue || 0)\r\n    const [max, setMax] = useState(maxValue || 5)\r\n\r\n    const onSliderValuesChange = useCallback((values: Array<number>) => {\r\n        setMin(values[0])\r\n        setMax(values[1])\r\n    }, [setMin, setMax])\r\n\r\n    const onMouseUpHandler = useCallback(() => {\r\n        onValuesChange([min, max])\r\n    }, [onValuesChange, min, max])\r\n\r\n    return <span className={style.rangeBlock}>\r\n        <Slider range={{draggableTrack: true}} value={[min, max]} min={minRangeLimit} max={maxRangeLimit}\r\n                onChange={onSliderValuesChange}\r\n                onAfterChange={onMouseUpHandler}\r\n                tooltipVisible\r\n        />\r\n    </span>\r\n})","import {Pagination} from 'antd';\r\nimport React from 'react';\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\n\r\ntype PaginatorType = {\r\n    onChange: (page: number, pageCount: number | undefined, packId?: string) => void\r\n    current: number\r\n    total: number\r\n    pageCount: number\r\n    requestStatus: RequestStatusType\r\n}\r\n\r\nexport const Paginator = (props: PaginatorType) => {\r\n\r\n    return <div>\r\n        <Pagination showQuickJumper current={props.current} total={props.total} onChange={props.onChange}\r\n                    pageSize={props.pageCount} disabled={props.requestStatus === 'loading'}/>\r\n    </div>\r\n\r\n}\r\n","import React, {CSSProperties} from \"react\";\r\n\r\ntype ModalPropsType = {\r\n    enableBackground?: boolean;\r\n    backgroundOnClick?: () => void;\r\n    modalWidthPx: number;\r\n    modalHeightPx: number;\r\n    modalStyle?: CSSProperties;\r\n    modalOnClick?: () => void;\r\n    show: boolean\r\n}\r\n\r\nexport const Modal: React.FC<ModalPropsType> = React.memo((\r\n    {\r\n        enableBackground,\r\n        backgroundOnClick = () => {},\r\n        modalWidthPx,\r\n        modalHeightPx,\r\n        modalStyle,\r\n        modalOnClick = () => {},\r\n        show,\r\n        children,\r\n    }\r\n) => {\r\n    const top = `calc(50vh - ${modalHeightPx / 2}px)`\r\n    const left = `calc(50vw - ${modalWidthPx / 2}px)`\r\n\r\n    if (!show) return null;\r\n\r\n    return (\r\n        <>\r\n            {enableBackground && <div\r\n                style={{\r\n                    position: 'fixed',\r\n                    top: '0px',\r\n                    left: '0px',\r\n                    width: '100vw',\r\n                    height: '100vh',\r\n                    background: 'black',\r\n                    opacity: 0.6,\r\n                    zIndex: 20,\r\n                }}\r\n                onClick={backgroundOnClick}\r\n            />}\r\n            <div\r\n                style={{\r\n                    position: 'fixed',\r\n                    top,\r\n                    left,\r\n                    width: modalWidthPx,\r\n                    height: modalHeightPx,\r\n                    display: 'flex',\r\n                    flexFlow: 'column',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    backgroundColor: '#fafafa',\r\n                    borderRadius: '2px',\r\n                    zIndex: 21,\r\n                    ...modalStyle,\r\n                }}\r\n                onClick={modalOnClick}\r\n            >\r\n                {children}\r\n            </div>\r\n        </>\r\n    )\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Modal} from \"../../../common/Modal/Modal\";\r\n\r\ntype AddItemModalPropsType = {\r\n    inputLabels: Array<'Name: ' | 'Question: ' | 'Answer: '>\r\n    itemToAdd: 'pack' | 'card'\r\n    show: boolean\r\n    setShow: (show: boolean) => void\r\n    onAddBtnClick: (values: Array<string>) => void\r\n}\r\n\r\nexport const AddItemModal: React.FC<AddItemModalPropsType> = React.memo(({\r\n                                                                             inputLabels,\r\n                                                                             itemToAdd,\r\n                                                                             show,\r\n                                                                             setShow,\r\n                                                                             onAddBtnClick\r\n                                                                         }) => {\r\n    //создаем массив initialValues с пустыми строками, кол-во которых совпадает с кол-вом лейблов в inputLabels\r\n    const initialValues = Array.from(inputLabels, () => \"\")\r\n    const [values, setValues] = useState<Array<string>>(initialValues)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>, index: number) => {\r\n        let valuesCopy = [...values]\r\n        setValues(valuesCopy.map((v, i) => i === index ? e.currentTarget.value : v))\r\n    }\r\n    const onAddClick = () => {\r\n        onAddBtnClick(values)\r\n        setShow(false)\r\n    }\r\n\r\n    return <Modal enableBackground modalHeightPx={250} modalWidthPx={395} show={show}\r\n                  backgroundOnClick={() => setShow(false)}>\r\n        <div>Add new {itemToAdd}</div>\r\n        {inputLabels.map((l, i) => <div>\r\n            <label>{l}<input value={values[i]} onChange={(e) => onChangeHandler(e, i)}/></label>\r\n        </div>)}\r\n        <div>\r\n            <button onClick={() => setShow(false)}>Cancel</button>\r\n            <button onClick={onAddClick}>Add</button>\r\n        </div>\r\n    </Modal>\r\n})\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Modal} from \"../../../common/Modal/Modal\";\r\n\r\ntype DeleteItemModalPropsType = {\r\n    itemToDelete: 'pack' | 'card'\r\n    show: boolean\r\n    setShow: (show: boolean) => void\r\n    onDeleteBtnClick: (isToBeDeleted: boolean) => void\r\n}\r\n\r\nexport const DeleteItemModal: React.FC<DeleteItemModalPropsType> = React.memo(({\r\n                                                                                   itemToDelete,\r\n                                                                                   show,\r\n                                                                                   setShow,\r\n                                                                                   onDeleteBtnClick\r\n                                                                               }) => {\r\n\r\n    return <Modal enableBackground modalHeightPx={250} modalWidthPx={395} show={show}\r\n                  backgroundOnClick={() => setShow(false)}>\r\n        <div>Are you sure you want to delete this {itemToDelete}?</div>\r\n        <div>\r\n            <button onClick={() => setShow(false)}>No</button>\r\n            <button onClick={() => onDeleteBtnClick(true)}>Yes</button>\r\n        </div>\r\n    </Modal>\r\n})\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Modal} from \"../../../common/Modal/Modal\";\r\n\r\ntype UpdateItemModalPropsType = {\r\n    inputValues: Array<string>\r\n    inputLabels: Array<'Name: ' | 'Question: ' | 'Answer: '>\r\n    itemToUpdate: 'pack' | 'card'\r\n    show: boolean\r\n    setShow: (show: boolean) => void\r\n    onUpdateBtnClick: (values: Array<string>) => void\r\n}\r\n\r\nexport const UpdateItemModal: React.FC<UpdateItemModalPropsType> = React.memo(({\r\n                                                                                   inputValues,\r\n                                                                                   inputLabels,\r\n                                                                                   itemToUpdate,\r\n                                                                                   show,\r\n                                                                                   setShow,\r\n                                                                                   onUpdateBtnClick\r\n                                                                               }) => {\r\n\r\n    const [values, setValues] = useState<Array<string>>(inputValues)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>, index: number) => {\r\n        let valuesCopy = [...values]\r\n        setValues(valuesCopy.map((v, i) => i === index ? e.currentTarget.value : v))\r\n    }\r\n    const onUpdateClick = () => {\r\n        onUpdateBtnClick(values)\r\n        setShow(false)\r\n    }\r\n\r\n    return <Modal enableBackground modalHeightPx={250} modalWidthPx={395} show={show}\r\n                  backgroundOnClick={() => setShow(false)}>\r\n        <div>Update {itemToUpdate}</div>\r\n        {inputLabels.map((l, i) => <div>\r\n            <label>{l}<input value={values[i]} onChange={(e) => onChangeHandler(e, i)}/></label>\r\n        </div>)}\r\n        <div>\r\n            <button onClick={() => setShow(false)}>Cancel</button>\r\n            <button onClick={onUpdateClick}>Update</button>\r\n        </div>\r\n    </Modal>\r\n})\r\n","import {PackDataType, SortDirections} from \"../../api/api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addPackTC, deletePackTC, getPacksTC, updatePackTC} from \"./packs-reducer\";\r\nimport {ColumnsType, FilterValue} from \"antd/es/table/interface\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport style from \"./Packs.module.css\";\r\nimport {Table, TablePaginationConfig} from \"antd\";\r\nimport {SorterResult} from \"antd/lib/table/interface\";\r\nimport React, {useState} from \"react\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {AddItemModal} from \"../Modals/AddItemModal/AddItemModal\";\r\nimport {PATH} from \"../../app/App\";\r\nimport {DeleteItemModal} from \"../Modals/DeleteItemModal/DeleteItemModal\";\r\nimport {UpdateItemModal} from \"../Modals/UpdateItemModal/UpdateItemModal\";\r\n\r\ntype PacksTablePropsType = {\r\n    cardPacks: Array<PackDataType>\r\n    authUserId: string\r\n    requestStatus: RequestStatusType\r\n}\r\ntype ButtonsDataType = {\r\n    packId: string\r\n    packUserId: string\r\n    cardsCount: number\r\n    packName: string\r\n}\r\ntype PackType = {\r\n    key: string,\r\n    name: string,\r\n    cardsCount: number,\r\n    updated: Date,\r\n    createdBy: string,\r\n    buttons: ButtonsDataType\r\n}\r\nexport const PacksTable = React.memo(({cardPacks, authUserId, requestStatus}: PacksTablePropsType) => {\r\n    const [showAddItemModal, setShowAddItemModal] = useState<boolean>(false)\r\n    const [showDeleteItemModal, setShowDeleteItemModal] = useState<boolean>(false)\r\n    const [showUpdateItemModal, setShowUpdateItemModal] = useState<boolean>(false)\r\n    const [currentPackID, setCurrentPackID] = useState<string>('')\r\n    const [currentPackName, setCurrentPackName] = useState<string>('')\r\n    const dispatch = useDispatch()\r\n\r\n    const onAddPackClick = (values: Array<string>) => {\r\n        //values содержатся в массиве в том порядке, в котором передаем inputLabels в DeleteItemModal\r\n        dispatch(addPackTC(values[0]))\r\n    }\r\n\r\n    const onDeleteClick = (isToBeDeleted: boolean) => {\r\n        if (isToBeDeleted) {\r\n            dispatch(deletePackTC(currentPackID))\r\n            setShowDeleteItemModal(false)\r\n        }\r\n    }\r\n\r\n    const onUpdateClick = (values: Array<string>) => {\r\n        //values содержатся в массиве в том порядке, в котором передаем inputLabels и inputValues в UpdateItemModal\r\n        dispatch(updatePackTC(currentPackID, values[0]))\r\n    }\r\n\r\n    const data: Array<PackType> = cardPacks.map(p => ({\r\n        key: p._id,\r\n        name: p.name,\r\n        cardsCount: p.cardsCount,\r\n        updated: p.updated,\r\n        createdBy: p.user_name,\r\n        buttons: {packId: p._id, packUserId: p.user_id, cardsCount: p.cardsCount, packName: p.name}\r\n    }))\r\n\r\n    const columns: ColumnsType<PackType> = [\r\n        {title: 'Name', dataIndex: 'name', key: 'name', sorter: true},\r\n        {title: 'Learn Count', dataIndex: 'cardsCount', key: 'cardsCount', sorter: true},\r\n        {title: 'Last Update', dataIndex: 'updated', key: 'updated'},\r\n        {title: 'Created by', dataIndex: 'createdBy', key: 'createdBy'},\r\n        {\r\n            title: () => <button onClick={() => setShowAddItemModal(true)}>Add</button>,\r\n            dataIndex: 'buttons',\r\n            key: 'buttons',\r\n            render: ({packId, packUserId, cardsCount, packName}: ButtonsDataType) => <>\r\n                <button onClick={() => {\r\n                    setCurrentPackID(packId);\r\n                    setShowDeleteItemModal(true)\r\n                }} disabled={packUserId !== authUserId}>Delete\r\n                </button>\r\n                <button onClick={() => {\r\n                    setCurrentPackID(packId);\r\n                    setCurrentPackName(packName);\r\n                    setShowUpdateItemModal(true)\r\n                }} disabled={packUserId !== authUserId}>Update\r\n                </button>\r\n                <span><NavLink to={PATH.CARDS + \"/\" + packId} activeClassName={style.active}> Cards </NavLink></span>\r\n                {cardsCount > 0 &&\r\n                <span><NavLink to={PATH.LEARN + \"/\" + packId} activeClassName={style.active}> Learn </NavLink></span>}\r\n            </>,\r\n        },\r\n    ];\r\n\r\n    const onChange = (pagination: TablePaginationConfig, filters: Record<string, FilterValue | null>,\r\n                      sorter: SorterResult<PackType> | any) => {\r\n        if (sorter.columnKey === 'name' && sorter.order === 'ascend') {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Down, propToSortBy: 'name'}))\r\n        } else if (sorter.columnKey === 'name' && sorter.order === 'descend') {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Up, propToSortBy: 'name'}))\r\n        } else if (sorter.columnKey === 'name' && sorter.order === undefined) {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Up, propToSortBy: 'updated'}))\r\n        }\r\n        if (sorter.columnKey === 'cardsCount' && sorter.order === 'ascend') {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Down, propToSortBy: \"cardsCount\"}))\r\n        } else if (sorter.columnKey === 'cardsCount' && sorter.order === 'descend') {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Up, propToSortBy: \"cardsCount\"}))\r\n        } else if (sorter.columnKey === 'cardsCount' && sorter.order === undefined) {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Up, propToSortBy: 'updated'}))\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <Table columns={columns} dataSource={data} onChange={onChange} pagination={false} style={{width: '100%'}}\r\n               size={'small'} loading={requestStatus === 'loading'}/>\r\n        {/*модалка для добавления колоды*/}\r\n        {showAddItemModal &&\r\n        <AddItemModal show={showAddItemModal} setShow={setShowAddItemModal} inputLabels={[\"Name: \"]}\r\n                      itemToAdd={'pack'} onAddBtnClick={onAddPackClick}/>}\r\n        {/*модалка для удаления колоды*/}\r\n        {showDeleteItemModal && <DeleteItemModal show={showDeleteItemModal} setShow={setShowDeleteItemModal}\r\n                                                 itemToDelete={'pack'} onDeleteBtnClick={onDeleteClick}/>}\r\n        {/*модалка для редактирования колоды*/}\r\n        {showUpdateItemModal && <UpdateItemModal show={showUpdateItemModal} setShow={setShowUpdateItemModal}\r\n                                                 itemToUpdate={'pack'} onUpdateBtnClick={onUpdateClick}\r\n                                                 inputLabels={[\"Name: \"]} inputValues={[currentPackName]}/>}\r\n    </>\r\n})","import React, {ChangeEvent, KeyboardEvent, useCallback, useEffect, useState} from \"react\";\r\nimport style from \"./Packs.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getPacksTC, PacksStateType} from \"./packs-reducer\";\r\nimport {GetSortedPacksType} from \"../../api/api\";\r\nimport {DoubleRange} from \"../../common/DoubleRange/DoubleRange\";\r\nimport {Paginator} from \"../Paginator/Paginator\";\r\nimport {PATH} from \"../../app/App\";\r\nimport {PacksTable} from \"./PacksTable\";\r\n\r\nexport const Packs = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const authUserId = useSelector<AppRootStateType, string>(state => state.auth._id)\r\n    const error = useSelector<AppRootStateType, string>(state => state.packs.error)\r\n    const {\r\n        cardPacksTotalCount,\r\n        page,\r\n        cardPacks,\r\n        pageCount,\r\n        requestStatus\r\n    } = useSelector<AppRootStateType, PacksStateType>(state => state.packs)\r\n\r\n    const {\r\n        minCardsCount,\r\n        maxCardsCount,\r\n        userId\r\n    } = useSelector<AppRootStateType, GetSortedPacksType>(state => state.packs.sortParams)\r\n    const dispatch = useDispatch()\r\n\r\n    const [searchByName, setSearchByName] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) dispatch(getPacksTC())\r\n    }, [])\r\n\r\n    const onPrivatePacksSearch = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.checked) {\r\n            dispatch(getPacksTC({userId: authUserId}))\r\n        } else {\r\n            dispatch(getPacksTC({userId: ''}))\r\n        }\r\n    }\r\n\r\n    const onSearchByName = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            dispatch(getPacksTC({nameToSearch: searchByName}))\r\n        }\r\n    }\r\n    const onCardsCountChange = useCallback(([minValue, maxValue]: Array<number | undefined>) => {\r\n        dispatch(getPacksTC({minCardsCount: minValue, maxCardsCount: maxValue}))\r\n    }, [dispatch])\r\n\r\n    const paginatorPage = useCallback((page: number, pageCount: number | undefined) => {\r\n        dispatch(getPacksTC({page, pageCount}))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) return <Redirect to={PATH.LOGIN}/>\r\n\r\n    return (\r\n        <div className={style.packs}>\r\n            <h2>Packs</h2>\r\n            <div className={style.filter}>\r\n                {/*поиск приватных колод*/}\r\n                <label><input type=\"checkbox\" checked={!!userId} onChange={onPrivatePacksSearch}/>\r\n                    show my private packs</label>\r\n                {/*фильтр по названию колоды*/}\r\n                <label>Search packs by name: <input placeholder={'Press Enter to search'}\r\n                                                    onKeyPress={onSearchByName}\r\n                                                    value={searchByName}\r\n                                                    onChange={e => setSearchByName(e.currentTarget.value)}\r\n                /></label>\r\n\r\n                {/*двойной range для сортировки по кол-ву карточек в колоде*/}\r\n                <div className={style.rangeContainer}>\r\n                    Search packs by cards count:\r\n                    <DoubleRange minValue={minCardsCount} maxValue={maxCardsCount} onValuesChange={onCardsCountChange}\r\n                                 maxRangeLimit={200}/>\r\n                </div>\r\n            </div>\r\n            {error && <div className={style.error}>{error}</div>}\r\n            {/*таблица с колодами*/}\r\n            <PacksTable cardPacks={cardPacks} authUserId={authUserId} requestStatus={requestStatus}/>\r\n            {/*Pagination*/}\r\n            <div className={style.pagination}>\r\n                <Paginator current={page}\r\n                           pageCount={pageCount}\r\n                           total={cardPacksTotalCount}\r\n                           onChange={paginatorPage}\r\n                           requestStatus={requestStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {CardDataType, cardsAPI, GetSortedCardsType, NewCardDataType, SortDirections} from \"../../api/api\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - \"неактивный\"\r\n    error: '',\r\n    cards: [] as Array<CardDataType>,\r\n    packUserId: \"\",\r\n    cardsTotalCount: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    sortParams: {\r\n        question: '',\r\n        answer: '',\r\n        sortDirection: SortDirections.Down,\r\n        propToSortBy: undefined,\r\n        minGrade: 0,\r\n        maxGrade: 5,\r\n        page: 1,\r\n        pageCount: 10\r\n    } as GetSortedCardsType,\r\n}\r\n\r\nexport const cardsReducer = (state = initialState, action: ActionsType): CardsStateType => {\r\n    switch (action.type) {\r\n        case 'CARDS/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'CARDS/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        case 'CARDS/SET-SORT-PARAMS': {\r\n            return {\r\n                ...state,\r\n                sortParams: {...state.sortParams, ...action.sortParams}\r\n            }\r\n        }\r\n        case 'CARDS/SET-CARDS': {\r\n            return {\r\n                ...state,\r\n                cards: action.cards,\r\n                packUserId: action.packUserId,\r\n                page: action.page,\r\n                cardsTotalCount: action.cardsTotalCount,\r\n                pageCount: action.pageCount\r\n            }\r\n        }\r\n        case 'CARDS/SET-NEW-GRADE': {\r\n            return {\r\n                ...state,\r\n                cards: state.cards.map(c => c._id === action.cardId ? {...c, grade: action.grade} : c)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'CARDS/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'CARDS/SET-ERROR', error} as const)\r\nconst setSortParamsAC = (sortParams: GetSortedCardsType) => ({type: 'CARDS/SET-SORT-PARAMS', sortParams} as const)\r\nexport const setCardsAC = (cards: Array<CardDataType>, packUserId: string, page: number, cardsTotalCount: number, pageCount: number) =>\r\n    ({type: 'CARDS/SET-CARDS', cards, packUserId, page, cardsTotalCount, pageCount} as const)\r\nexport const setNewGradeAC = (grade: number, cardId: string) => ({type: 'CARDS/SET-NEW-GRADE', grade, cardId} as const)\r\n\r\n//thunk\r\nexport const getCardsTC = (packId: string, params: GetSortedCardsType = {}) => (dispatch: ThunkCustomDispatch,\r\n                                                                                getState: () => AppRootStateType) => {\r\n    if (params) dispatch(setSortParamsAC(params))\r\n    const sortParams = getState().cards.sortParams\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.getCards(packId, sortParams)\r\n        .then(res => {\r\n            dispatch(setCardsAC(res.data.cards, res.data.packUserId, res.data.page, res.data.cardsTotalCount, res.data.pageCount))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const addCardTC = (packId: string, params?: GetSortedCardsType) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.addCard(packId, params)\r\n        .then(() => {\r\n            dispatch(getCardsTC(packId, params))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const deleteCardTC = (packId: string, cardId: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.deleteCard(cardId)\r\n        .then(() => {\r\n            dispatch(getCardsTC(packId))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const updateCardTC = (packId: string, cardId: string, params: NewCardDataType = {}, comments?: string) => (\r\n    dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.updateCard(cardId, params, comments)\r\n        .then(() => {\r\n            dispatch(getCardsTC(packId))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const updateGradeTC = (grade: number, cardId: string) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.updateGrade(grade, cardId)\r\n        .then(res => {\r\n            dispatch(setNewGradeAC(res.data.updatedGrade.grade, res.data.updatedGrade.card_id))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type CardsStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setSortParamsAC>\r\n    | ReturnType<typeof setCardsAC>\r\n    | ReturnType<typeof setNewGradeAC>\r\n\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import {CardDataType, SortDirections} from \"../../api/api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {ColumnsType, FilterValue} from \"antd/es/table/interface\";\r\nimport {Table, TablePaginationConfig} from \"antd\";\r\nimport {SorterResult} from \"antd/lib/table/interface\";\r\nimport React, {useState} from \"react\";\r\nimport {addCardTC, deleteCardTC, getCardsTC, updateCardTC} from \"./cards-reducer\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {AddItemModal} from \"../Modals/AddItemModal/AddItemModal\";\r\n\r\ntype CardsTablePropsType = {\r\n    cards: Array<CardDataType>\r\n    packId: string\r\n    packUserId: string\r\n    authUserId: string\r\n    requestStatus: RequestStatusType\r\n}\r\ntype CardIdsType = {\r\n    cardId: string\r\n    cardUserId: string\r\n}\r\ntype CardType = {\r\n    key: string\r\n    question: string\r\n    answer: string\r\n    grade: number\r\n    updated: Date\r\n    packId: string\r\n    buttons: CardIdsType\r\n}\r\n\r\nexport const CardsTable = React.memo(({cards, packId, packUserId, authUserId, requestStatus}: CardsTablePropsType) => {\r\n    const [showAddItemModal, setShowAddItemModal] = useState<boolean>(false)\r\n    const dispatch = useDispatch()\r\n\r\n    const onAddCardClick = (values: Array<string>) => {\r\n        //values содержатся в массиве в том порядке, в котором передаем inputLabels в DeleteItemModal\r\n        dispatch(addCardTC(packId, {question: values[0], answer: values[1]}))\r\n    }\r\n\r\n    const onDeleteClick = (cardId: string) => {\r\n        dispatch(deleteCardTC(packId, cardId))\r\n    }\r\n\r\n    const onUpdateClick = (cardId: string) => {\r\n        dispatch(updateCardTC(packId, cardId))\r\n    }\r\n\r\n    const data: Array<CardType> = cards.map(c => ({\r\n        key: c._id,\r\n        question: c.question,\r\n        answer: c.answer,\r\n        grade: c.grade,\r\n        updated: c.updated,\r\n        packId: c.cardsPack_id,\r\n        buttons: {cardId: c._id, cardUserId: c.user_id}\r\n    }))\r\n\r\n    const columns: ColumnsType<CardType> = [\r\n        {title: 'Question', dataIndex: 'question', key: 'question'},\r\n        {title: 'Answer', dataIndex: 'answer', key: 'answer'},\r\n        {title: 'Grade', dataIndex: 'grade', key: 'grade', sorter: true},\r\n        {title: 'Last Update', dataIndex: 'updated', key: 'updated'},\r\n        {title: 'Pack ID', dataIndex: 'packId', key: 'packId'},\r\n        {\r\n            title: () => <button onClick={() => setShowAddItemModal(true)} disabled={packUserId !== authUserId}>Add</button>,\r\n            dataIndex: 'buttons',\r\n            key: 'buttons',\r\n            render: ({cardId, cardUserId}: CardIdsType) => <>\r\n                <button onClick={() => onDeleteClick(cardId)} disabled={cardUserId !== authUserId}>Delete</button>\r\n                <button onClick={() => onUpdateClick(cardId)} disabled={cardUserId !== authUserId}>Update</button>\r\n            </>,\r\n        },\r\n    ];\r\n\r\n    const onChange = (pagination: TablePaginationConfig, filters: Record<string, FilterValue | null>,\r\n                      sorter: SorterResult<CardType> | any) => {\r\n        if (sorter.columnKey === 'grade' && sorter.order === 'ascend') {\r\n            dispatch(getCardsTC(packId, {sortDirection: SortDirections.Down, propToSortBy: \"grade\"}))\r\n        } else if (sorter.columnKey === 'grade' && sorter.order === 'descend') {\r\n            dispatch(getCardsTC(packId, {sortDirection: SortDirections.Up, propToSortBy: \"grade\"}))\r\n        } else if (sorter.columnKey === 'grade' && sorter.order === undefined) {\r\n            dispatch(getCardsTC(packId, {sortDirection: SortDirections.Up, propToSortBy: \"updated\"}))\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <Table columns={columns} dataSource={data} onChange={onChange} pagination={false} style={{width: '100%'}}\r\n               size={'small'} loading={requestStatus === 'loading'}/>\r\n        {showAddItemModal &&\r\n        <AddItemModal show={showAddItemModal} setShow={setShowAddItemModal} inputLabels={[\"Question: \", \"Answer: \"]}\r\n                      itemToAdd={'card'} onAddBtnClick={onAddCardClick}/>}\r\n    </>\r\n})","import React, {KeyboardEvent, useCallback, useEffect, useState} from \"react\";\r\nimport style from \"./Cards.module.css\";\r\nimport {NavLink, Redirect, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {GetSortedCardsType, PackDataType} from \"../../api/api\";\r\nimport {DoubleRange} from \"../../common/DoubleRange/DoubleRange\";\r\nimport {CardsStateType, getCardsTC, setCardsAC} from \"./cards-reducer\";\r\nimport {Paginator} from \"../Paginator/Paginator\";\r\nimport {PATH} from \"../../app/App\";\r\nimport {CardsTable} from \"./CardsTable\";\r\n\r\n\r\nexport const Cards = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const authUserId = useSelector<AppRootStateType, string>(state => state.auth._id)\r\n    const {packId} = useParams<{ packId?: any }>()    //читаем id колоды из URL\r\n    const {minGrade, maxGrade} = useSelector<AppRootStateType, GetSortedCardsType>(state => state.cards.sortParams)\r\n    const {\r\n        cards,\r\n        packUserId,\r\n        cardsTotalCount,\r\n        page,\r\n        pageCount,\r\n        error,\r\n        requestStatus\r\n    } = useSelector<AppRootStateType, CardsStateType>(state => state.cards)\r\n    const packs = useSelector<AppRootStateType, Array<PackDataType>>(state => state.packs.cardPacks)\r\n    const dispatch = useDispatch()\r\n\r\n    const [answer, setAnswer] = useState<string>(\"\")\r\n    const [question, setQuestion] = useState<string>(\"\")\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn && packId) dispatch(getCardsTC(packId))   //запрашиваем карточки, если залогинен и есть packId\r\n        //зачищаем карточки при выходе со страницы Learn, чтобы при следующем запросе новых карточек не были видны старые\r\n        return () => {\r\n            dispatch(setCardsAC([], \"\", 1, 0, 10))\r\n        }\r\n    }, [])\r\n\r\n    const onGradeRangeChange = useCallback(([minValue, maxValue]: Array<number | undefined>) => {\r\n        dispatch(getCardsTC(packId, {minGrade: minValue, maxGrade: maxValue}))\r\n    }, [packId, dispatch])\r\n\r\n    const onSearchByQuestion = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            dispatch(getCardsTC(packId, {question: question}))\r\n        }\r\n    }\r\n    const onSearchByAnswer = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            dispatch(getCardsTC(packId, {answer: answer}))\r\n        }\r\n    }\r\n    const paginatorPage = useCallback((page: number, pageCount: number | undefined) => {\r\n        dispatch(getCardsTC(packId, {page, pageCount}))\r\n    }, [packId, dispatch])\r\n    //защита от попытки открыть Learn с выдуманным packId в url\r\n    let isPackFound = packs.some(p => p._id === packId)\r\n\r\n    if (!isLoggedIn) return <Redirect to={PATH.LOGIN}/>\r\n    if (isLoggedIn && !packId || isLoggedIn && !isPackFound) return <Redirect to={PATH.PACKS}/>\r\n\r\n    return (\r\n        <div className={style.cards}>\r\n            <h2><NavLink to={PATH.PACKS} activeClassName={style.active}>⏴ Packs</NavLink></h2>\r\n            <div className={style.filter}>\r\n                {/*фильтр карточек по вопросу*/}\r\n                <label>Search cards by question: <input placeholder={'Press Enter to search'}\r\n                                                        onKeyPress={onSearchByQuestion}\r\n                                                        value={question}\r\n                                                        onChange={e => setQuestion(e.currentTarget.value)}/></label>\r\n                {/*фильтр карточек по ответу*/}\r\n                <label>Search cards by answer: <input placeholder={'Press Enter to search'}\r\n                                                      onKeyPress={onSearchByAnswer}\r\n                                                      value={answer}\r\n                                                      onChange={e => setAnswer(e.currentTarget.value)}/></label>\r\n                {/*двойной range для сортировки по оценкам (grade)*/}\r\n                <div className={style.rangeContainer}>Search cards by grade:\r\n                    <DoubleRange minValue={minGrade} maxValue={maxGrade} onValuesChange={onGradeRangeChange}\r\n                                 maxRangeLimit={5}/></div>\r\n            </div>\r\n            {error && <div className={style.error}>{error}</div>}\r\n            {/*таблица с карточками*/}\r\n            <CardsTable cards={cards} packId={packId} packUserId={packUserId} authUserId={authUserId} requestStatus={requestStatus}/>\r\n            {/*Pagination*/}\r\n            <div className={style.pagination}>\r\n                <Paginator current={page}\r\n                           pageCount={pageCount}\r\n                           total={cardsTotalCount}\r\n                           onChange={paginatorPage}\r\n                           requestStatus={requestStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {RequestStatusType, setAuthUserDataAC} from \"../features/Login/auth-reducer\";\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialAppStateType = initialState, action: AppActionsType): InitialAppStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {type: 'APP/SET-STATUS', status} as const\r\n}\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {type: 'APP/SET-ERROR', error} as const\r\n}\r\nexport const setIsInitializedAC = (isInitialized: boolean) => {\r\n    return {type: 'APP/SET-INITIALIZED', isInitialized} as const\r\n}\r\n\r\n//thunk\r\nexport const initializeAppTC = () => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.me()\r\n        .then(res => {\r\n            dispatch(setAuthUserDataAC(res.data._id, res.data.email, res.data.name, res.data.avatar, true))\r\n            dispatch(setAppStatusAC('success'))\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setAppErrorAC(error))\r\n            dispatch(setAppStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setAppErrorAC(''))\r\n            }, 3000)\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialAppStateType = typeof initialState\r\n\r\nexport type AppActionsType =\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setIsInitializedAC>\r\n\r\ntype ThunkCustomDispatch = Dispatch<AppActionsType | ReturnType<typeof setAuthUserDataAC>>","import {CardDataType} from \"../api/api\";\r\n\r\nexport const getRandomCard = (cards: Array<CardDataType>): CardDataType => {\r\n    let cardsCopy = [...cards]\r\n    let totalSum = cardsCopy.reduce((acc, card) => acc + (6 - card.grade), 0)\r\n    let random = Math.random() * totalSum\r\n    let i = 0\r\n    let sum = 0\r\n    while (sum < random) {\r\n        sum += (6 - cardsCopy[i].grade)\r\n        i++\r\n    }\r\n    return cardsCopy[i-1]\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport style from \"./Learn.module.css\";\r\nimport {NavLink, Redirect, useHistory, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {CardDataType, PackDataType} from \"../../api/api\";\r\nimport {CardsStateType, getCardsTC, updateGradeTC} from \"../Cards/cards-reducer\";\r\nimport {PATH} from \"../../app/App\";\r\nimport {Modal} from \"../../common/Modal/Modal\";\r\nimport {getRandomCard} from \"../../utils/get-random-card\";\r\n\r\n\r\nexport const Learn = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const history = useHistory()\r\n    const [showAnswer, setShowAnswer] = useState<boolean>(false)\r\n    const {packId} = useParams<{ packId?: any }>()    //читаем id колоды из URL\r\n    const {\r\n        cards,\r\n        error,\r\n    } = useSelector<AppRootStateType, CardsStateType>(state => state.cards)\r\n    const packs = useSelector<AppRootStateType, Array<PackDataType>>(state => state.packs.cardPacks)\r\n    const dispatch = useDispatch()\r\n    const [isFirstCard, setIsFirstCard] = useState<boolean>(true);\r\n    const [card, setCard] = useState<CardDataType>({\r\n        _id: '',\r\n        user_id: '',\r\n        cardsPack_id: '',\r\n        answer: '',\r\n        question: '',\r\n        grade: 0,\r\n        shots: 0,\r\n        type: 'card',\r\n        rating: 0,\r\n        comments: '',\r\n        created: new Date(),\r\n        updated: new Date(),\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        if (isFirstCard) {\r\n            dispatch(getCardsTC(packId)); //запрашиваем карточки\r\n            setIsFirstCard(false);\r\n        }\r\n        if (cards.length > 0) setCard(getRandomCard(cards))\r\n    }, [dispatch, packId, cards, isFirstCard])\r\n\r\n    const onGradeBtnClick = (grade: string | undefined) => {\r\n        dispatch(updateGradeTC(grade && +grade || 0, card._id))\r\n        setCard(getRandomCard(cards))\r\n        setShowAnswer(false)\r\n    }\r\n    const onNextClick = () => {\r\n        setCard(getRandomCard(cards))\r\n        setShowAnswer(false)\r\n    }\r\n\r\n    //защита от попытки открыть Learn с выдуманным packId в url\r\n    let isPackFound = packs.some(p => p._id === packId)\r\n\r\n    if (!isLoggedIn) return <Redirect to={PATH.LOGIN}/>\r\n    if (!isPackFound) return <Redirect to={PATH.PACKS}/>\r\n\r\n    return <Modal show enableBackground modalWidthPx={800} modalHeightPx={600}\r\n                  backgroundOnClick={() => history.push(PATH.PACKS)}>\r\n        {error && <div className={style.error}>{error}</div>}\r\n        {/*вопрос*/}\r\n        <div>Question:</div>\r\n        <div>{card.question}</div>\r\n        {!showAnswer && <button onClick={() => setShowAnswer(true)}>Check answer</button>}\r\n        {/*ответ*/}\r\n        {showAnswer && <>\r\n            <div>Answer:</div>\r\n            <div>{card.answer}</div>\r\n            <div>\r\n                <button onClick={e => onGradeBtnClick(e.currentTarget.dataset.grade)} data-grade={'1'}>Не знал/Didn’t\r\n                    know\r\n                </button>\r\n                <button onClick={e => onGradeBtnClick(e.currentTarget.dataset.grade)} data-grade={'2'}>Забыл/Forgot\r\n                </button>\r\n                <button onClick={e => onGradeBtnClick(e.currentTarget.dataset.grade)} data-grade={'3'}>Долго\r\n                    думал/Thought\r\n                    too long\r\n                </button>\r\n                <button onClick={e => onGradeBtnClick(e.currentTarget.dataset.grade)} data-grade={'4'}>Почти\r\n                    угадал/Nearly\r\n                    guessed\r\n                </button>\r\n                <button onClick={e => onGradeBtnClick(e.currentTarget.dataset.grade)} data-grade={'5'}>Знал/I knew it\r\n                </button>\r\n            </div>\r\n        </>\r\n        }\r\n        <div>\r\n            <NavLink to={PATH.PACKS} activeClassName={style.active}> Cancel </NavLink>\r\n            <button onClick={onNextClick}>Next</button>\r\n        </div>\r\n    </Modal>\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Forgot} from \"../features/Forgot/Forgot\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Register} from \"../features/Register/Register\";\r\nimport {SetPassword} from \"../features/SetPassword/SetPassword\";\r\nimport {Profile} from \"../features/Profile/Profile\";\r\nimport {Header} from \"../features/Header/Header\";\r\nimport {Packs} from \"../features/Packs/Packs\";\r\nimport {Cards} from \"../features/Cards/Cards\";\r\nimport {initializeAppTC} from \"./app-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {Spin} from 'antd';\r\nimport {LoadingOutlined} from '@ant-design/icons';\r\nimport {Learn} from \"../features/Learn/Learn\";\r\n\r\nexport const PATH = {\r\n    LOGIN: \"/login\",\r\n    REGISTER: \"/register\",\r\n    FORGOT: \"/forgot\",\r\n    SET_PASSWORD: \"/set-new-password\",\r\n    PROFILE: \"/profile\",\r\n    PACKS: \"/packs\",\r\n    CARDS: \"/cards\",\r\n    LEARN: \"/learn\",\r\n}\r\n\r\nconst App = () => {\r\n    let isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    let dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '50%', textAlign: 'center', width: '100%'}}>\r\n            <Spin indicator={antIcon} />\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <Switch>\r\n                <Route exact path={['/', `${PATH.PROFILE}`]} render={() => <Profile/>}/>\r\n                <Route path={PATH.REGISTER} render={() => <Register/>}/>\r\n                <Route path={PATH.FORGOT} render={() => <Forgot/>}/>\r\n                <Route path={`${PATH.SET_PASSWORD}/:token?`} render={() => <SetPassword/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.PACKS} render={() => <Packs/>}/>\r\n                <Route path={`${PATH.CARDS}/:packId?`} render={() => <Cards/>}/>\r\n                <Route path={`${PATH.LEARN}/:packId?`} render={() => <Learn/>}/>\r\n                <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                <Redirect from={'*'} to={'/404'}/>\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    //\r\n}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        //cases\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\n// export const setSomethingAC = () => ({type: 'PROFILE/SET-SOMETHING'} as const)\r\n\r\n//thunk\r\n// export const doSomethingTC = () => (dispatch: ThunkDispatch) => {\r\n//\r\n// }\r\n\r\n//types\r\nexport type InitialStateType = typeof initialState\r\n//объединение типов actionов:\r\n// export type ActionsType = ReturnType<typeof setSomethingAC>\r\n// тип диспатча:\r\n// type ThunkDispatch = Dispatch<ReturnType<typeof setSomethingAC>>","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {registerReducer} from \"../features/Register/register-reducer\";\r\nimport {setPasswordReducer} from \"../features/SetPassword/set-password-reducer\";\r\nimport {profileReducer} from \"../features/Profile/profile-reducer\";\r\nimport {forgotReducer} from \"../features/Forgot/forgot-reducer\";\r\nimport {packsReducer} from \"../features/Packs/packs-reducer\";\r\nimport {cardsReducer} from \"../features/Cards/cards-reducer\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n// комбайним редюсеры\r\nconst rootReducer = combineReducers({  //стейт\r\n    auth: authReducer,\r\n    register: registerReducer,\r\n    forgot: forgotReducer,\r\n    setPassword: setPasswordReducer,\r\n    profile: profileReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer,\r\n    app: appReducer\r\n})\r\n//создаем store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n//тип стейта\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// для вызова store из консоли\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2ck6i\",\"notice\":\"Login_notice__3_Xcq\",\"loading\":\"Login_loading__1oP3o\",\"error\":\"Login_error__1oq8R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packs\":\"Packs_packs__11aat\",\"filter\":\"Packs_filter__3-7jv\",\"rangeContainer\":\"Packs_rangeContainer__1utv6\",\"error\":\"Packs_error__3ODBf\",\"pagination\":\"Packs_pagination__3tqEx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__10VB5\",\"active\":\"Header_active__3B1Kt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cards\":\"Cards_cards__1nz5C\",\"filter\":\"Cards_filter__3iNkp\",\"rangeContainer\":\"Cards_rangeContainer__1ny9W\",\"error\":\"Cards_error__2Xcy8\",\"pagination\":\"Cards_pagination__34Qpn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setPassword\":\"SetPassword_setPassword__ji0HF\",\"loading\":\"SetPassword_loading__2N13G\",\"error\":\"SetPassword_error__8FOW9\"};"],"sourceRoot":""}