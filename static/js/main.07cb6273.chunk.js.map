{"version":3,"sources":["features/Header/Header.module.css","features/Login/Login.module.css","features/Forgot/Forgot.module.css","features/Register/Register.module.css","features/SetPassword/SetPassword.module.css","features/Profile/Profile.module.css","api/api.ts","features/Forgot/forgot-reducer.ts","features/Forgot/Forgot.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","features/Register/Register.tsx","features/SetPassword/set-password-reducer.ts","features/SetPassword/SetPassword.tsx","features/Profile/Profile.tsx","features/Header/Header.tsx","app/App.tsx","reportWebVitals.ts","features/Register/register-reducer.ts","features/Profile/profile-reducer.ts","app/store.ts","index.tsx"],"names":["module","exports","instance","axios","create","withCredentials","baseURL","authAPI","post","loginData","delete","email","from","message","resetPassData","initialState","requestStatus","error","info","setRequestStatusAC","type","Forgot","useSelector","state","forgot","dispatch","useDispatch","useState","setEmail","className","style","color","value","onChange","e","currentTarget","trim","onClick","then","res","data","catch","response","setErrorAC","sendEmailToResetPassTC","disabled","to","activeClassName","active","_id","name","isLoggedIn","setAuthUserDataAC","payload","Login","auth","formik","useFormik","validate","values","password","initialValues","rememberMe","onSubmit","handleSubmit","login","getFieldProps","errors","checked","Register","register","SetPassword","setPassword","token","useParams","password1","setPassword1","password2","setPassword2","localError","setLocalError","onKeyPress","resetPasswordToken","Profile","useEffect","profile","Header","header","App","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.07cb6273.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__10VB5\",\"active\":\"Header_active__3B1Kt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2ck6i\",\"error\":\"Login_error__1oq8R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgot\":\"Forgot_forgot__3iT7N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Register_register__298wP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setPassword\":\"SetPassword_setPassword__ji0HF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__OylV9\"};","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/'\r\n}) //перед каждым pushем на gitHub менять baseURL с http://localhost:7542/2.0/ на https://neko-back.herokuapp.com/2.0/ !\r\n\r\nexport const authAPI = {\r\n    me() { // проверка на залогиненность\r\n        return instance.post<AuthUserData>(`auth/me`)\r\n    },\r\n    login(loginData: LoginDataType) {\r\n        return instance.post<AuthUserData>(`auth/login`, loginData)\r\n    },\r\n    register(regData: RegDataType) {\r\n        return instance.post<{addedUser: {}, error?: string}>(`auth/register`, regData)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/me`)\r\n    },\r\n    updateUserData(newUserData: NewUserDataType) { // обновление name или аватарки юзера\r\n        return instance.put<{updatedUser: {}, error?: string}>(`auth/me`, newUserData)\r\n    },\r\n    sendEmailToResetPass(email: string) { // отправляем емайл, если забыл пароль, со страницы Forgot\r\n        return instance.post<ResponseType>(`auth/forgot`, {\r\n            email,\r\n            from: \"test-front-admin <ai73a@yandex.by>\",\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\n                 password recovery link:\r\n                 <a href='http://marygrishchuk.github.io/cards-by-dream-team/#/set-new-password/$token$'>\r\n                 Reset Password</a></div>`\r\n        })\r\n    },\r\n    resetPassword(resetPassData: ResetPassDataType) { // отправка нового пароля со страницы Set New Password\r\n        return instance.post<ResponseType>(`auth/set-new-password`, resetPassData)\r\n    }\r\n}\r\n\r\n//types\r\nexport type LoginDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type RegDataType = {\r\n    email: string\r\n    password: string\r\n}\r\nexport type NewUserDataType = {\r\n    name: string\r\n    avatar?: string\r\n}\r\nexport type ResetPassDataType = {\r\n    password: string\r\n    resetPasswordToken: string | undefined\r\n}\r\nexport type AuthUserData = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\nexport type ResponseType = {\r\n    info: string\r\n    error?: string\r\n}","import {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../api/api\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - \"неактивный\"\r\n    error: '',\r\n    info: ''\r\n}\r\n\r\nexport const forgotReducer = (state: InitialForgotStateType = initialState, action: ActionsType): InitialForgotStateType => {\r\n    switch (action.type) {\r\n        case 'FORGOT/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus\r\n            }\r\n        }\r\n        case 'FORGOT/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                info: ''\r\n            }\r\n        }\r\n        case 'FORGOT/SET-INFO': {\r\n            return {\r\n                ...state,\r\n                info: action.info,\r\n                error: ''\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'FORGOT/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'FORGOT/SET-ERROR', error} as const)\r\nconst setInfoAC = (info: string) => ({type: 'FORGOT/SET-INFO', info} as const)\r\n\r\n//thunk\r\nexport const sendEmailToResetPassTC = (email: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.sendEmailToResetPass(email)\r\n        .then(res => {\r\n            dispatch(setInfoAC(res.data.info))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialForgotStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setInfoAC>\r\n// тип диспатча:\r\ntype ThunkDispatch = Dispatch<ActionsType>","import React, {ChangeEvent, useState} from \"react\";\r\nimport style from \"./Forgot.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {InitialForgotStateType, sendEmailToResetPassTC} from \"./forgot-reducer\";\r\n\r\nexport const Forgot = () => {\r\n    const {requestStatus, error, info} = useSelector<AppRootStateType, InitialForgotStateType>(state => state.forgot)\r\n    const dispatch = useDispatch()\r\n\r\n    const [email, setEmail] = useState('')\r\n\r\n    const onEmailInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value.trim())\r\n    }\r\n    const onSendBtnClick = () => {\r\n        dispatch(sendEmailToResetPassTC(email))\r\n    }\r\n\r\n    return (\r\n        <div className={style.forgot}>\r\n            Please enter your email, and we'll send you a link to reset your password.\r\n            {requestStatus === 'loading'\r\n                ? <div style={{color: 'green'}}>loading...</div>\r\n                : info && <i>{info}</i>}\r\n            {error && <div style={{color: 'red'}}>{error}</div>}\r\n            <input type=\"email\" value={email} onChange={onEmailInput}/>\r\n            <button onClick={onSendBtnClick} disabled={requestStatus === 'loading'}>Send</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI, LoginDataType} from \"../../api/api\";\r\n\r\nconst initialState = {\r\n    _id: \"\",\r\n    email: \"\",\r\n    name: \"\",\r\n    error: \"\",\r\n    isLoggedIn: false,\r\n    requestStatus: 'idle' as RequestStatusType //изначально статус запроса - \"неактивный\"\r\n}\r\n\r\nexport const authReducer = (state: InitialAuthStateType = initialState, action: ActionsType): InitialAuthStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET-AUTH-USER-DATA': {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        case 'AUTH/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus\r\n            }\r\n        }\r\n        case 'AUTH/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        // case 'login/SET-IS-LOGGED-IN': {\r\n        //     return {\r\n        //         ...state,\r\n        //         isLoggedIn: action.value\r\n        //     }\r\n        // }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setAuthUserDataAC = (_id: string, email: string, name: string, isLoggedIn: boolean) => ({\r\n    type: 'AUTH/SET-AUTH-USER-DATA',\r\n    payload: {_id, email, name, isLoggedIn}\r\n} as const)\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'AUTH/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\n// export const setIsLoggedInAC = (value: boolean) => ({\r\n//         type: 'login/SET-IS-LOGGED-IN', value} as const\r\n// )\r\nconst setErrorAC = (error: string) => ({type: 'AUTH/SET-ERROR', error} as const)\r\n\r\n\r\n\r\n//thunks\r\nexport const loginTC = (loginData: LoginDataType) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.login(loginData)\r\n        .then((res) => {\r\n            dispatch(setAuthUserDataAC(res.data._id, res.data.email, res.data.name, true))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: ThunkDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(() => {\r\n            dispatch(setAuthUserDataAC(\"\", \"\", \"\", false))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const getAuthUserDataTC = () => (dispatch: ThunkDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.me()\r\n        .then(res => {\r\n            dispatch(setAuthUserDataAC(res.data._id, res.data.email, res.data.name, true))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialAuthStateType = typeof initialState\r\nexport type RequestStatusType = 'idle' | 'loading' | 'success' | 'failed'\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setAuthUserDataAC>\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n\r\n// тип диспатча:\r\ntype ThunkDispatch = Dispatch<ActionsType>","import React from \"react\";\r\nimport style from \"./Login.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {useFormik} from \"formik\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport {loginTC} from \"./auth-reducer\";\r\n\r\n// export const Login1 = () => {\r\n//     return (\r\n//         <div className={style.login}>\r\n//             Log In\r\n//             <input type=\"email\"/>\r\n//             <input type=\"password\"/>\r\n//             <NavLink to=\"/forgot\" activeClassName={style.active}>Forgot password?</NavLink>\r\n//             <label><input type=\"checkbox\"/>Remember Me</label>\r\n//             <button>Log in</button>\r\n//             <NavLink to=\"/register\" activeClassName={style.active}>Registration</NavLink>\r\n//         </div>\r\n//     );\r\n// }\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if(!values.email) {\r\n                return {\r\n                    email: \"Email is required\"\r\n                }\r\n            }\r\n            if(!values.password) {\r\n                return {\r\n                    password: \"Password is required\"\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n           dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n\r\n    if(isLoggedIn) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div className={style.login}>\r\n\r\n                <label>Email</label>\r\n                <input type=\"email\" {...formik.getFieldProps(\"email\")}/>\r\n                {formik.errors.email ? <div className={style.error}>{formik.errors.email}</div> : null}\r\n\r\n                <label>Password</label>\r\n                <input type=\"password\" {...formik.getFieldProps(\"password\")}/>\r\n                {formik.errors.password ? <div className={style.error}>{formik.errors.password}</div> : null}\r\n\r\n                <NavLink to=\"/forgot\" activeClassName={style.active}>Forgot password?</NavLink>\r\n\r\n                <label>Remember Me<input type=\"checkbox\" {...formik.getFieldProps(\"rememberMe\")}\r\n                checked={formik.values.rememberMe} /></label>\r\n\r\n                <button type={'submit'} color={'primary'}>Login</button>\r\n                <NavLink to=\"/register\" activeClassName={style.active}>Registration</NavLink>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport style from \"./Register.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const Register = () => {\r\n    return (\r\n        <div className={style.register}>\r\n            Register\r\n            <input type=\"email\"/>\r\n            <input type=\"password\"/>\r\n            <input type=\"password\"/>\r\n            <button>Register</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import {authAPI} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - \"неактивный\"\r\n    error: '',\r\n    info: ''\r\n}\r\n\r\nexport const setPasswordReducer = (state: SetPasswordStateType = initialState, action: ActionsType): SetPasswordStateType => {\r\n    switch (action.type) {\r\n        case 'SET-PASSWORD/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus\r\n            }\r\n        }\r\n        case 'SET-PASSWORD/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                info: ''\r\n            }\r\n        }\r\n        case 'SET-PASSWORD/SET-INFO': {\r\n            return {\r\n                ...state,\r\n                info: action.info,\r\n                error: ''\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'SET-PASSWORD/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'SET-PASSWORD/SET-ERROR', error} as const)\r\nconst setInfoAC = (info: string) => ({type: 'SET-PASSWORD/SET-INFO', info} as const)\r\n\r\n//thunk\r\nexport const resetPasswordTC = (password: string, resetPasswordToken: string | undefined) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.resetPassword({password, resetPasswordToken})\r\n        .then(res => {\r\n            dispatch(setInfoAC(res.data.info))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type SetPasswordStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setInfoAC>\r\n// тип диспатча:\r\ntype ThunkDispatch = Dispatch<ActionsType>","import React, {ChangeEvent, useState} from \"react\";\r\nimport style from \"./SetPassword.module.css\";\r\nimport {NavLink, Redirect, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {resetPasswordTC, SetPasswordStateType} from \"./set-password-reducer\";\r\n\r\nexport const SetPassword = () => {\r\n    const {requestStatus, error, info} = useSelector<AppRootStateType, SetPasswordStateType>(state => state.setPassword)\r\n    const dispatch = useDispatch()\r\n    const {token} = useParams<{ token?: string }>()\r\n\r\n    const [password1, setPassword1] = useState('')\r\n    const [password2, setPassword2] = useState('')\r\n    const [localError, setLocalError] = useState('')\r\n\r\n    const onPassword1Input = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword1(e.currentTarget.value)\r\n    }\r\n    const onPassword2Input = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword2(e.currentTarget.value)\r\n    }\r\n    const onSubmit = () => {\r\n        if (password1 === password2) {\r\n            dispatch(resetPasswordTC(password1, token))\r\n        } else {\r\n            setLocalError(\"Passwords don't match.\")\r\n        }\r\n    }\r\n    if (requestStatus === 'success') return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={style.setPassword}>\r\n            Please enter your new password in each field.\r\n            {requestStatus === 'loading'\r\n                ? <div style={{color: 'green'}}>loading...</div>\r\n                : info && <i>{info}</i>}\r\n            {error && <div style={{color: 'red'}}>{error}</div>}\r\n            {localError && <div style={{color: 'red'}}>{localError}</div>}\r\n            <input type=\"password\" value={password1} onChange={onPassword1Input}\r\n                   onKeyPress={() => setLocalError(\"\")}/>\r\n            <input type=\"password\" value={password2} onChange={onPassword2Input}\r\n                   onKeyPress={() => setLocalError(\"\")}/>\r\n            <button onClick={onSubmit} disabled={requestStatus === 'loading'}>Submit</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import React, {useEffect} from \"react\";\r\nimport style from \"./Profile.module.css\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {getAuthUserDataTC, InitialAuthStateType, logoutTC} from \"../Login/auth-reducer\";\r\n\r\nexport const Profile = () => {\r\n    const {\r\n        email,\r\n        name,\r\n        error,\r\n        isLoggedIn,\r\n        requestStatus\r\n    } = useSelector<AppRootStateType, InitialAuthStateType>(state => state.auth)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) return\r\n        dispatch(getAuthUserDataTC())\r\n    }, [])\r\n\r\n    const onLogoutClick = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isLoggedIn) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={style.profile}>\r\n            Welcome!\r\n            {requestStatus === 'loading' && <div style={{color: 'green'}}>loading...</div>}\r\n            {error && <div style={{color: 'red'}}>{error}</div>}\r\n            <div>{name}</div>\r\n            <div>{email}</div>\r\n            <button onClick={onLogoutClick} disabled={requestStatus === 'loading'}>Log out</button>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport style from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div className={style.header}>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Login</NavLink>\r\n            <NavLink to=\"/register\" activeClassName={style.active}>Register</NavLink>\r\n            <NavLink to=\"/forgot\" activeClassName={style.active}>Forgot</NavLink>\r\n            <NavLink to=\"/set-new-password\" activeClassName={style.active}>Set New Password</NavLink>\r\n            <NavLink to=\"/profile\" activeClassName={style.active}>Profile</NavLink>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Forgot} from \"../features/Forgot/Forgot\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Register} from \"../features/Register/Register\";\r\nimport {SetPassword} from \"../features/SetPassword/SetPassword\";\r\nimport {Profile} from \"../features/Profile/Profile\";\r\nimport {Header} from \"../features/Header/Header\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header/>\r\n      <Switch>\r\n        <Route exact path={['/', '/login']} render={() => <Login/>}/>\r\n        <Route path={'/register'} render={() => <Register/>}/>\r\n        <Route path={'/forgot'} render={() => <Forgot/>}/>\r\n        <Route path={'/set-new-password/:token?'} render={() => <SetPassword/>}/>\r\n        <Route path={'/profile'} render={() => <Profile/>}/>\r\n        <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n        <Redirect from={'*'} to={'/404'}/>\r\n\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    //\r\n}\r\n\r\nexport const registerReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        //cases\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\n// export const setSomethingAC = () => ({type: 'REGISTER/SET-SOMETHING'} as const)\r\n\r\n//thunk\r\n// export const doSomethingTC = () => (dispatch: ThunkDispatch) => {\r\n//\r\n// }\r\n\r\n//types\r\nexport type InitialStateType = typeof initialState\r\n//объединение типов actionов:\r\n// export type ActionsType = ReturnType<typeof setSomethingAC>\r\n// тип диспатча:\r\n// type ThunkDispatch = Dispatch<ReturnType<typeof setSomethingAC>>","const initialState = {\r\n    //\r\n}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        //cases\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\n// export const setSomethingAC = () => ({type: 'PROFILE/SET-SOMETHING'} as const)\r\n\r\n//thunk\r\n// export const doSomethingTC = () => (dispatch: ThunkDispatch) => {\r\n//\r\n// }\r\n\r\n//types\r\nexport type InitialStateType = typeof initialState\r\n//объединение типов actionов:\r\n// export type ActionsType = ReturnType<typeof setSomethingAC>\r\n// тип диспатча:\r\n// type ThunkDispatch = Dispatch<ReturnType<typeof setSomethingAC>>","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {registerReducer} from \"../features/Register/register-reducer\";\r\nimport {setPasswordReducer} from \"../features/SetPassword/set-password-reducer\";\r\nimport {profileReducer} from \"../features/Profile/profile-reducer\";\r\nimport {forgotReducer} from \"../features/Forgot/forgot-reducer\";\r\n\r\n// комбайним редюсеры\r\nconst rootReducer = combineReducers({  //стейт\r\n    auth: authReducer,\r\n    register: registerReducer,\r\n    forgot: forgotReducer,\r\n    setPassword: setPasswordReducer,\r\n    profile: profileReducer\r\n})\r\n//создаем store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n//тип стейта\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// для вызова store из консоли\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}