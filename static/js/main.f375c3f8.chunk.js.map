{"version":3,"sources":["features/Profile/Profile.module.css","features/Header/Header.module.css","features/Packs/Packs.module.css","features/Forgot/Forgot.module.css","features/SetPassword/SetPassword.module.css","features/Register/Register.module.css","features/Modals/DeleteItemModal/DeleteItemModal.module.css","common/DoubleRange/DoubleRange.module.css","api/api.ts","features/Forgot/forgot-reducer.ts","features/Forgot/Forgot.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","features/Register/register-reducer.ts","features/Register/Register.tsx","features/SetPassword/set-password-reducer.ts","features/SetPassword/SetPassword.tsx","common/FileUploader/FileUploader.tsx","common/Modal/Modal.tsx","features/Modals/DeleteItemModal/DeleteItemModal.tsx","features/Profile/Profile.tsx","features/Header/Header.tsx","features/Packs/packs-reducer.ts","common/DoubleRange/DoubleRange.tsx","features/Paginator/Paginator.tsx","features/Modals/AddItemModal/AddItemModal.tsx","features/Modals/UpdateItemModal/UpdateItemModal.tsx","features/Packs/PacksTable.tsx","features/Packs/Packs.tsx","features/Cards/cards-reducer.ts","features/Cards/CardsTable.tsx","features/Cards/Cards.tsx","app/app-reducer.ts","utils/get-random-card.ts","features/Learn/Learn.tsx","features/Modals/ScrollUpModal/ScrollUpModal.tsx","assets/images/maria.jpeg","assets/images/leonid.jpg","assets/images/anton.png","preloader/TeamPresentation/TeamPresentation.tsx","api/files-api.ts","features/Files/files-reducer.ts","assets/images/mute.svg","features/Files/Video.tsx","features/Files/Files.tsx","app/App.tsx","reportWebVitals.ts","features/Profile/profile-reducer.ts","app/store.ts","index.tsx","common/styles/error.module.css","features/Files/Files.module.css","features/Login/Login.module.css","features/Learn/Learn.module.css","preloader/TeamPresentation/TeamPresentation.module.css","features/Modals/AddItemModal/AddItemModal.module.css","features/Modals/UpdateItemModal/UpdateItemModal.module.css","features/Cards/Cards.module.css"],"names":["module","exports","SortDirections","instance","axios","create","withCredentials","baseURL","authAPI","post","loginData","regData","delete","newUserData","put","email","from","message","resetPassData","packsAPI","params","nameToSearch","maxCardsCount","minCardsCount","page","pageCount","sortDirection","propToSortBy","userId","get","packName","sortPacks","min","max","user_id","name","isPrivate","deckCover","cardsPack","private","packId","_id","cardsAPI","question","answer","minGrade","maxGrade","cardsPack_id","cardQuestion","cardAnswer","sortCards","grade","shots","rating","answerImg","questionImg","questionVideo","answerVideo","type","card","cardId","comments","card_id","initialState","requestStatus","error","info","setRequestStatusAC","Forgot","useSelector","state","forgot","dispatch","useDispatch","useState","setEmail","className","style","loading","commonStyle","value","onChange","e","currentTarget","trim","onClick","then","res","data","catch","response","setErrorAC","sendEmailToResetPassTC","disabled","to","activeClassName","active","avatar","isLoggedIn","setAuthUserDataAC","payload","updateUserDataTC","newData","getState","auth","updatedUser","setTimeout","Login","formik","useFormik","validate","values","password","initialValues","rememberMe","onSubmit","PATH","PROFILE","handleSubmit","login","Item","notice","REGISTER","getFieldProps","errors","checked","color","responseText","isRegistration","setResponseTextAC","text","setRegistrationAC","Register","register","emailValue","setEmailValue","setPassword","confirmPassword","setConfirmPassword","errorPassword","setErrorPassword","clearError","placeholder","onKeyPress","length","err","requestRegister","SetPassword","token","useParams","password1","setPassword1","password2","setPassword2","localError","setLocalError","resetPasswordToken","FileUploader","React","memo","expectedFileType","children","inputRef","useRef","acceptOptions","multiple","accept","ref","display","reader","FileReader","formData","FormData","target","files","Blob","test","readAsDataURL","readAsText","imageURL","window","URL","createObjectURL","append","onloadend","epochDate","size","newBase64","result","base64","toString","fileURL","fileName","fileType","fileSize","toFixed","fileLastModified","lastModified","Date","toLocaleString","alert","current","click","Modal","enableBackground","backgroundOnClick","modalWidthPx","modalHeightPx","modalStyle","modalOnClick","show","top","left","position","width","height","background","opacity","zIndex","flexFlow","alignItems","justifyContent","backgroundColor","borderRadius","DeleteItemModal","itemToDelete","setShow","onDeleteBtnClick","deleteBlock","buttons","Profile","Paragraph","Typography","showDeleteItemModal","setShowDeleteItemModal","onImageEditorClick","useCallback","fileData","onDeleteAvatarClick","isToBeDeleted","onNewNameSubmit","newName","profile","avatarContainer","src","avatarButtons","EditTwoTone","fontSize","icon","DeleteTwoTone","shape","ghost","UserOutlined","right","PlusSquareTwoTone","editable","FILES","title","CloudServerOutlined","LOGIN","Header","header","PACKS","cardPacks","cardPacksTotalCount","sortParams","Down","undefined","setPacksAC","setSortParamsAC","getPacksTC","packs","DoubleRange","minRangeLimit","maxRangeLimit","minValue","maxValue","onValuesChange","setMin","setMax","onSliderValuesChange","onMouseUpHandler","rangeBlock","range","draggableTrack","onAfterChange","tooltipVisible","Paginator","props","showQuickJumper","total","pageSize","AddItemModal","inputLabels","filesToUpload","itemToAdd","onAddBtnClick","Array","initialFileData","setValues","setFileData","onDeleteImageClick","index","map","d","i","onImageUpload","addBlock","l","v","onChangeHandler","f","UploadOutlined","previews","previewContainer","preview","backgroundImage","bin","UpdateItemModal","inputValues","imageURLs","itemToUpdate","onUpdateBtnClick","url","updateBlock","PacksTable","authUserId","showAddItemModal","setShowAddItemModal","showUpdateItemModal","setShowUpdateItemModal","currentPackID","setCurrentPackID","currentPackName","setCurrentPackName","currentPackCover","setCurrentPackCover","onAddPackClick","onDeleteClick","onUpdateClick","updatePackTC","p","key","cardsCount","updated","createdBy","user_name","packUserId","columns","dataIndex","sorter","render","CARDS","LEARN","dataSource","pagination","filters","columnKey","order","Up","tableLayout","Packs","searchByName","setSearchByName","useEffect","onCardsCountChange","paginatorPage","filter","rangeContainer","cards","cardsTotalCount","setCardsAC","getCardsTC","CardsTable","currentCardID","setCurrentCardID","setQuestion","setAnswer","setQuestionImg","setAnswerImg","onAddCardClick","addCardTC","deleteCardTC","updateCardTC","c","Cards","onGradeRangeChange","isPackFound","some","status","isInitialized","setAppStatusAC","setAppErrorAC","setIsInitializedAC","getRandomCard","cardsCopy","totalSum","reduce","acc","random","Math","sum","Learn","history","useHistory","showAnswer","setShowAnswer","isFirstCard","setIsFirstCard","created","setCard","onGradeBtnClick","setNewGradeAC","updatedGrade","updateGradeTC","push","learn","section","dataset","data-grade","ScrollUpModal","addEventListener","handleScroll","pageYOffset","singleScrollLength","lastScrollPosition","timer","setInterval","clearInterval","scroll","border","boxShadow","cursor","TeamPresentation","teamPresentation","avatars","maria","leonid","anton","filesAPI","responseType","file","formatTime","seconds","minutes","floor","Video","videoRef","duration","setDuration","currentTime","setCurrentTime","volume","setVolume","isPaused","setIsPaused","showSpeedRates","setShowSpeedRates","formattedDuration","formattedCurrentTime","intervalId","play","pause","volumeRate","margin","padding","vertical","step","playbackSpeed","Group","defaultValue","playbackRate","direction","Button","video","videoControls","playBtn","PlaySquareOutlined","controlBtns","playAndTime","CaretRightOutlined","PauseOutlined","settings","content","overlayStyle","overlayInnerStyle","SoundOutlined","muteIcon","alt","trigger","visible","onVisibleChange","DashboardOutlined","requestFullscreen","FullscreenOutlined","Files","setBase64","setFileURL","setFileName","setFileLastModified","setFileSize","setFileType","newText","setNewText","showDownloadButton","setShowDownloadButton","onFileUpload","percent","strokeColor","strokeWidth","link","document","createElement","href","download","body","appendChild","removeChild","downloadUpdatedFile","blob","downloadUrl","setAttribute","remove","getFileTC","FORGOT","SET_PASSWORD","App","app","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.f375c3f8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__OylV9\",\"loading\":\"Profile_loading__1TdAz\",\"avatarContainer\":\"Profile_avatarContainer__2g1TC\",\"avatarButtons\":\"Profile_avatarButtons__aCraQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__10VB5\",\"active\":\"Header_active__3B1Kt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packs\":\"Packs_packs__11aat\",\"filter\":\"Packs_filter__3-7jv\",\"rangeContainer\":\"Packs_rangeContainer__1utv6\",\"pagination\":\"Packs_pagination__3tqEx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgot\":\"Forgot_forgot__3iT7N\",\"loading\":\"Forgot_loading__2vdJ9\",\"error\":\"Forgot_error__2B138\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setPassword\":\"SetPassword_setPassword__ji0HF\",\"loading\":\"SetPassword_loading__2N13G\",\"error\":\"SetPassword_error__8FOW9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Register_register__298wP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteBlock\":\"DeleteItemModal_deleteBlock__1Z1lq\",\"buttons\":\"DeleteItemModal_buttons__18GCg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rangeBlock\":\"DoubleRange_rangeBlock__eFtuj\"};","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/'\r\n}) //перед каждым pushем на gitHub менять baseURL с http://localhost:7542/2.0/ на https://neko-back.herokuapp.com/2.0/ !\r\n\r\nexport const authAPI = {\r\n    me() { // проверка на залогиненность\r\n        return instance.post<AuthUserData>(`auth/me`)\r\n    },\r\n    login(loginData: LoginDataType) {\r\n        return instance.post<AuthUserData>(`auth/login`, loginData)\r\n    },\r\n    register(regData: RegDataType) {\r\n        return instance.post<{ addedUser: AuthUserData, error?: string }>(`auth/register`, regData)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/me`)\r\n    },\r\n    updateUserData(newUserData: NewUserDataType) { // обновление name или аватарки юзера\r\n        return instance.put<{ updatedUser: AuthUserData, error?: string }>(`auth/me`, newUserData)\r\n    },\r\n    sendEmailToResetPass(email: string) { // отправляем емайл, если забыл пароль, со страницы Forgot\r\n        return instance.post<ResponseType>(`auth/forgot`, {\r\n            email,\r\n            from: \"test-front-admin <ai73a@yandex.by>\",\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\n                 password recovery link:\r\n                 <a href='http://marygrishchuk.github.io/cards-by-dream-team/#/set-new-password/$token$'>\r\n                 Reset Password</a></div>`\r\n        })\r\n    },\r\n    resetPassword(resetPassData: ResetPassDataType) { // отправка нового пароля со страницы Set New Password\r\n        return instance.post<ResponseType>(`auth/set-new-password`, resetPassData)\r\n    }\r\n}\r\n\r\nexport const packsAPI = {\r\n    getPacks(params: GetSortedPacksType = {}) { // получение колод\r\n        const {\r\n            nameToSearch, maxCardsCount, minCardsCount, page, pageCount, sortDirection = '', propToSortBy = '', userId\r\n        } = params\r\n        return instance.get<GetPackResponseType>(`cards/pack`, {params: {packName: nameToSearch,\r\n                sortPacks: sortDirection + propToSortBy, min: minCardsCount, max: maxCardsCount, page, pageCount,\r\n                user_id: userId}})\r\n    },\r\n    addPack(name?: string, isPrivate?: boolean, deckCover?: string) {  // добавление (создание) колоды\r\n        return instance.post<AddPackResponseType>(`cards/pack`, {cardsPack: {name, private: isPrivate, deckCover}})\r\n    },\r\n    deletePack(packId: string) { //удаление колоды\r\n        return instance.delete<DeletePackResponseType>(`cards/pack?id=${packId}`)\r\n    },\r\n    updatePack(packId: string, params: NewPackType = {}) { //изменение колоды\r\n        const {name, deckCover, private: isPrivate} = params\r\n        return instance.put<UpdatePackResponseType>(`cards/pack`, {cardsPack: {_id: packId, name, deckCover, isPrivate}})\r\n    },\r\n}\r\n\r\nexport const cardsAPI = {\r\n    getCards(packId: string, params: GetSortedCardsType = {}) { // получение карточек по id колоды\r\n        const {question, answer, sortDirection = '', propToSortBy = '', minGrade, maxGrade, page, pageCount} = params\r\n        return instance.get<GetCardsResponseType>(`cards/card`, {params: {cardsPack_id: packId, cardQuestion: question,\r\n                cardAnswer: answer, sortCards: sortDirection + propToSortBy, min: minGrade, max: maxGrade, page, pageCount}})\r\n    },\r\n    addCard(packId: string, params: NewCardDataType = {}) {  // добавление (создание) карточки\r\n        const {\r\n            question, answer, grade, shots, rating, answerImg, questionImg,\r\n            questionVideo, answerVideo, type\r\n        } = params\r\n        return instance.post<AddCardResponseType>(`cards/card`, {\r\n            card: {\r\n                cardsPack_id: packId, question, answer, grade, shots,\r\n                rating, answerImg, questionImg, questionVideo, answerVideo, type\r\n            }\r\n        })\r\n    },\r\n    deleteCard(cardId: string) { //удаление карточки\r\n        return instance.delete<DeleteCardResponseType>(`cards/card?id=${cardId}`)\r\n    },\r\n    updateCard(cardId: string, params: NewCardDataType = {}, comments?: string) { //изменение карточки\r\n        const {\r\n            question, answer, grade, shots, rating, answerImg, questionImg,\r\n            questionVideo, answerVideo, type\r\n        } = params\r\n        return instance.put<UpdateCardResponseType>(`cards/card`, {\r\n            card: {\r\n                _id: cardId, question, answer, grade, shots,\r\n                rating, answerImg, questionImg, questionVideo, answerVideo, type, comments\r\n            }\r\n        })\r\n    },\r\n    updateGrade(grade: number, card_id: string) {\r\n        return instance.put<UpdateGradeResponseType>(`cards/grade`, {grade, card_id})\r\n    }\r\n}\r\n\r\n//types\r\nexport type LoginDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type RegDataType = {\r\n    email: string\r\n    password: string\r\n}\r\nexport type NewUserDataType = {\r\n    name: string\r\n    avatar?: string\r\n}\r\nexport type ResetPassDataType = {\r\n    password: string\r\n    resetPasswordToken: string | undefined\r\n}\r\nexport type AuthUserData = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\nexport type ResponseType = {\r\n    info: string\r\n    error?: string\r\n}\r\n\r\nexport type GetPackResponseType = {\r\n    cardPacks: Array<PackDataType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n\r\n}\r\n\r\nexport type PackDataType = {\r\n    _id: string\r\n    name: string\r\n    cardsCount: number\r\n    created: Date\r\n    updated: Date\r\n    user_id: string\r\n    user_name: string\r\n    deckCover: string\r\n    grade: number\r\n    path: string\r\n    private: boolean\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n}\r\n\r\nexport type NewPackType = {\r\n    name?: string\r\n    deckCover?: string\r\n    private?: boolean\r\n}\r\n\r\nexport type AddPackResponseType = {\r\n    newCardsPack: PackDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type DeletePackResponseType = {\r\n    deletedCardsPack: PackDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type UpdatePackResponseType = {\r\n    updatedCardsPack: PackDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport type GetCardsResponseType = {\r\n    cards: Array<CardDataType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\n\r\nexport type CardDataType = {\r\n    _id: string\r\n    question: string\r\n    answer: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: Date\r\n    updated: Date\r\n    comments: string\r\n    answerImg: string\r\n    questionImg: string\r\n}\r\n\r\nexport enum SortDirections {\r\n    Up = 0,\r\n    Down = 1,\r\n}\r\n\r\nexport type GetSortedPacksType = {\r\n    nameToSearch?: string\r\n    minCardsCount?: number\r\n    maxCardsCount?: number\r\n    sortDirection?: SortDirections\r\n    propToSortBy?: \"name\" | \"cardsCount\" | \"updated\"\r\n    page?: number\r\n    pageCount?: number\r\n    userId?: string\r\n\r\n}\r\nexport type GetSortedCardsType = {\r\n    question?: string\r\n    answer?: string\r\n    sortDirection?: SortDirections\r\n    propToSortBy?: \"grade\" | \"updated\"\r\n    minGrade?: number\r\n    maxGrade?: number\r\n    page?: number\r\n    pageCount?: number\r\n}\r\n\r\nexport type NewCardDataType = {\r\n    question?: string\r\n    answer?: string\r\n    grade?: 0 | 1 | 2 | 3 | 4 | 5\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n    type?: \"card\"\r\n}\r\n\r\nexport type AddCardResponseType = {\r\n    newCard: CardDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type DeleteCardResponseType = {\r\n    deletedCard: CardDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type UpdateCardResponseType = {\r\n    updatedCard: CardDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type UpdateGradeResponseType = {\r\n    updatedGrade: UpdateGradeType\r\n}\r\nexport type UpdateGradeType = {\r\n    _id: string\r\n    cardsPack_id: string\r\n    card_id: string\r\n    user_id: string\r\n    grade: number\r\n    shots: number\r\n}","import {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../api/api\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - \"неактивный\"\r\n    error: '',\r\n    info: ''\r\n}\r\n\r\nexport const forgotReducer = (state: InitialForgotStateType = initialState, action: ActionsType): InitialForgotStateType => {\r\n    switch (action.type) {\r\n        case 'FORGOT/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'FORGOT/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                info: ''\r\n            }\r\n        }\r\n        case 'FORGOT/SET-INFO': {\r\n            return {\r\n                ...state,\r\n                info: action.info,\r\n                error: ''\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'FORGOT/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'FORGOT/SET-ERROR', error} as const)\r\nconst setInfoAC = (info: string) => ({type: 'FORGOT/SET-INFO', info} as const)\r\n\r\n//thunk\r\nexport const sendEmailToResetPassTC = (email: string) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.sendEmailToResetPass(email)\r\n        .then(res => {\r\n            dispatch(setInfoAC(res.data.info))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialForgotStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setInfoAC>\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {ChangeEvent, useState} from \"react\";\r\nimport style from \"./Forgot.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {InitialForgotStateType, sendEmailToResetPassTC} from \"./forgot-reducer\";\r\nimport commonStyle from \"../../common/styles/error.module.css\";\r\n\r\nexport const Forgot = () => {\r\n    const {requestStatus, error, info} = useSelector<AppRootStateType, InitialForgotStateType>(state => state.forgot)\r\n    const dispatch = useDispatch()\r\n\r\n    const [email, setEmail] = useState('')\r\n\r\n    const onEmailInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value.trim())\r\n    }\r\n    const onSendBtnClick = () => {\r\n        dispatch(sendEmailToResetPassTC(email))\r\n    }\r\n\r\n    return (\r\n        <div className={style.forgot}>\r\n            Please enter your email, and we'll send you a link to reset your password.\r\n            {requestStatus === 'loading'\r\n                ? <div className={style.loading}>loading...</div>\r\n                : info && <i>{info}</i>}\r\n            <div className={error && commonStyle.error}>{error}</div>\r\n            <input type=\"email\" value={email} onChange={onEmailInput}/>\r\n            <button onClick={onSendBtnClick} disabled={requestStatus === 'loading'}>Send</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI, LoginDataType} from \"../../api/api\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\nconst initialState = {\r\n    _id: \"\",\r\n    email: \"\",\r\n    name: \"\",\r\n    avatar: \"\" as string | undefined,\r\n    error: \"\",\r\n    isLoggedIn: false,\r\n    requestStatus: 'idle' as RequestStatusType //изначально статус запроса - \"неактивный\"\r\n}\r\n\r\nexport const authReducer = (state: InitialAuthStateType = initialState, action: ActionsType): InitialAuthStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET-AUTH-USER-DATA': {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        case 'AUTH/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'AUTH/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nexport const setAuthUserDataAC = (_id: string, email: string, name: string, avatar: string | undefined, isLoggedIn: boolean) => ({\r\n    type: 'AUTH/SET-AUTH-USER-DATA',\r\n    payload: {_id, email, name, avatar, isLoggedIn}\r\n} as const)\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'AUTH/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\n\r\nconst setErrorAC = (error: string) => ({type: 'AUTH/SET-ERROR', error} as const)\r\n\r\n\r\n//thunks\r\nexport const loginTC = (loginData: LoginDataType) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.login(loginData)\r\n        .then((res) => {\r\n            dispatch(setAuthUserDataAC(res.data._id, res.data.email, res.data.name, res.data.avatar, true))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(() => {\r\n            dispatch(setAuthUserDataAC(\"\", \"\", \"\", \"\", false))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\nexport const updateUserDataTC = (newData: { name?: string, avatar?: string }) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>,\r\n                                                                                  getState: () => AppRootStateType) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.updateUserData({\r\n        name: newData.name || getState().auth.name,\r\n        avatar: newData.avatar || getState().auth.avatar\r\n    })\r\n        .then(res => {\r\n            dispatch(setAuthUserDataAC(res.data.updatedUser._id, res.data.updatedUser.email,\r\n                res.data.updatedUser.name, res.data.updatedUser.avatar, getState().auth.isLoggedIn))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialAuthStateType = typeof initialState\r\nexport type RequestStatusType = 'idle' | 'loading' | 'success' | 'failed'\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setAuthUserDataAC>\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React from \"react\";\r\nimport style from \"./Login.module.css\"\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {InitialAuthStateType, loginTC} from \"./auth-reducer\";\r\nimport {PATH} from \"../../app/App\";\r\nimport { Form } from \"antd\";\r\nimport commonStyle from \"../../common/styles/error.module.css\";\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {isLoggedIn, requestStatus, error} = useSelector<AppRootStateType, InitialAuthStateType>(state => state.auth)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: \"Email is required\"\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: \"Password is required\"\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n\r\n                <div className={style.login}>\r\n                    <Form.Item className={style.notice}>\r\n                        <p>To log in, please get registered\r\n                            <NavLink to={PATH.REGISTER} activeClassName={style.active}> here,</NavLink>\r\n                        </p>\r\n                        <p>or please use common test account credentials:</p>\r\n                        <p>Email: nya-admin@nya.nya</p>\r\n                        <p>Password: 1qazxcvBG</p>\r\n                    </Form.Item>\r\n                    {requestStatus === 'loading' && <div className={style.loading}>loading...</div>}\r\n                    <div className={error && commonStyle.error}>{error}</div>\r\n                    <label>Email</label>\r\n                    <input type=\"email\" {...formik.getFieldProps(\"email\")}/>\r\n                    {formik.errors.email ? <div className={style.error}>{formik.errors.email}</div> : null}\r\n\r\n                    <label>Password</label>\r\n                    <input type=\"password\" {...formik.getFieldProps(\"password\")}/>\r\n                    {formik.errors.password ? <div className={style.error}>{formik.errors.password}</div> : null}\r\n\r\n                    <NavLink to=\"/forgot\" activeClassName={style.active}>Forgot password?</NavLink>\r\n\r\n                    <label>Remember Me<input type=\"checkbox\" {...formik.getFieldProps(\"rememberMe\")}\r\n                                             checked={formik.values.rememberMe}/></label>\r\n\r\n                    <button type={'submit'} color={'primary'}>Login</button>\r\n                    <NavLink to=\"/register\" activeClassName={style.active}>Registration</NavLink>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}","import {authAPI, RegDataType} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nconst initialState = {\r\n    responseText: '',\r\n    isRegistration: false\r\n}\r\n\r\nexport const registerReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        //cases\r\n        case \"REGISTER/SUCCESS_REGISTER\": {\r\n            return {...state, responseText: action.text}\r\n        }\r\n        case \"REGISTER/SET-REGISTRATION\": {\r\n            return {\r\n                ...state, isRegistration: action.isRegistration,\r\n                responseText: state.isRegistration === true ? '' : state.responseText\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\n// export const setSomethingAC = () => ({type: 'REGISTER/SET-SOMETHING'} as const)\r\nconst setResponseTextAC = (text: string) => ({type: 'REGISTER/SUCCESS_REGISTER', text} as const)\r\nconst setRegistrationAC = (isRegistration: boolean) => ({type: 'REGISTER/SET-REGISTRATION', isRegistration} as const)\r\n//thunk\r\n// export const doSomethingTC = () => (dispatch: ThunkDispatch) => {\r\n//\r\n// }\r\nexport const requestRegister = (regData: RegDataType) => (dispatch: ThunkCustomDispatch) => {\r\n    authAPI.register(regData)\r\n        .then((res) => {\r\n            dispatch(setResponseTextAC('success'))\r\n\r\n            setTimeout(() => {\r\n                dispatch(setRegistrationAC(true))\r\n                dispatch(setRegistrationAC(false))\r\n            }, 1000)\r\n\r\n        })\r\n        .catch((err) => {\r\n\r\n            dispatch(setResponseTextAC(err.response.data.error))\r\n            setTimeout(() => {\r\n                dispatch(setResponseTextAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n//types\r\nexport type InitialStateType = typeof initialState\r\n//объединение типов actionов:\r\n// export type ActionsType = ReturnType<typeof setSomethingAC>\r\ntype ActionsType = ReturnType<typeof setResponseTextAC> | ReturnType<typeof setRegistrationAC>\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {useState} from \"react\";\r\nimport style from \"./Register.module.css\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {requestRegister} from \"./register-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport commonStyle from \"../../common/styles/error.module.css\";\r\n\r\nexport const Register = () => {\r\n    const text = useSelector<AppRootStateType, string>(state => state.register.responseText)\r\n    const isRegistration = useSelector<AppRootStateType, boolean>(state => state.register.isRegistration)\r\n\r\n    const dispatch = useDispatch()\r\n    const [emailValue, setEmailValue] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [errorPassword, setErrorPassword] = useState('')\r\n\r\n    const regData = {email: emailValue, password: password}\r\n    const setRegister = () => {\r\n        if (password === confirmPassword && password.length >= 8) {\r\n            dispatch(requestRegister(regData))\r\n        } else if (password !== confirmPassword) {\r\n            setErrorPassword(\"Passwords don't match.\")\r\n        } else if (password.length < 8 || confirmPassword.length < 8) {\r\n            setErrorPassword(\"Password must contain at least 8 characters.\")\r\n        }\r\n    }\r\n    const clearError = () => {\r\n        setErrorPassword('')\r\n    }\r\n\r\n\r\n    if (isRegistration) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.register}>\r\n            <h3>{text}</h3>\r\n            Register\r\n            <input type=\"email\" placeholder={'email'} onChange={(e) => setEmailValue(e.currentTarget.value)}\r\n                   onKeyPress={clearError}/>\r\n            <input type=\"password\" placeholder={'password'} onChange={(e) => setPassword(e.currentTarget.value)}\r\n                   onKeyPress={clearError}/>\r\n            <input type=\"password\" placeholder={'confirm password'} onKeyPress={clearError}\r\n                   onChange={(e) => setConfirmPassword(e.currentTarget.value)}/>\r\n            <div className={errorPassword && commonStyle.error}>{errorPassword}</div>\r\n            <button onClick={setRegister}>Register</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import {authAPI} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - \"неактивный\"\r\n    error: '',\r\n    info: ''\r\n}\r\n\r\nexport const setPasswordReducer = (state: SetPasswordStateType = initialState, action: ActionsType): SetPasswordStateType => {\r\n    switch (action.type) {\r\n        case 'SET-PASSWORD/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'SET-PASSWORD/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                info: ''\r\n            }\r\n        }\r\n        case 'SET-PASSWORD/SET-INFO': {\r\n            return {\r\n                ...state,\r\n                info: action.info,\r\n                error: ''\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'SET-PASSWORD/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'SET-PASSWORD/SET-ERROR', error} as const)\r\nconst setInfoAC = (info: string) => ({type: 'SET-PASSWORD/SET-INFO', info} as const)\r\n\r\n//thunk\r\nexport const resetPasswordTC = (password: string, resetPasswordToken: string | undefined) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.resetPassword({password, resetPasswordToken})\r\n        .then(res => {\r\n            dispatch(setInfoAC(res.data.info))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\n//types\r\nexport type SetPasswordStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setInfoAC>\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {ChangeEvent, useState} from \"react\";\r\nimport style from \"./SetPassword.module.css\";\r\nimport {NavLink, Redirect, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {resetPasswordTC, SetPasswordStateType} from \"./set-password-reducer\";\r\nimport commonStyle from \"../../common/styles/error.module.css\";\r\n\r\nexport const SetPassword = () => {\r\n    const {requestStatus, error, info} = useSelector<AppRootStateType, SetPasswordStateType>(state => state.setPassword)\r\n    const dispatch = useDispatch()\r\n    const {token} = useParams<{ token?: string }>()\r\n\r\n    const [password1, setPassword1] = useState('')\r\n    const [password2, setPassword2] = useState('')\r\n    const [localError, setLocalError] = useState('')\r\n\r\n    const onPassword1Input = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword1(e.currentTarget.value)\r\n    }\r\n    const onPassword2Input = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword2(e.currentTarget.value)\r\n    }\r\n    const onSubmit = () => {\r\n        if (password1 === password2 && password1.length >= 8) {\r\n            dispatch(resetPasswordTC(password1, token))\r\n        } else if (password1 !== password2) {\r\n            setLocalError(\"Passwords don't match.\")\r\n        } else if (password1.length < 8 || password2.length < 8) {\r\n            setLocalError(\"Password must contain at least 8 characters.\")\r\n        }\r\n    }\r\n    if (requestStatus === 'success') return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={style.setPassword}>\r\n            Please enter your new password in each field.\r\n            {requestStatus === 'loading'\r\n                ? <div className={style.loading}>loading...</div>\r\n                : info && <i>{info}</i>}\r\n            <div className={error && commonStyle.error}>{error}</div>\r\n            {localError && !error && <div className={commonStyle.error}>{localError}</div>}\r\n            <input type=\"password\" value={password1} onChange={onPassword1Input}\r\n                   onKeyPress={() => setLocalError(\"\")}/>\r\n            <input type=\"password\" value={password2} onChange={onPassword2Input}\r\n                   onKeyPress={() => setLocalError(\"\")}/>\r\n            <button onClick={onSubmit} disabled={requestStatus === 'loading'}>Submit</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import React, {ChangeEvent, CSSProperties, useRef} from \"react\";\r\nimport {Button} from \"antd\";\r\n\r\nconst getLastModifiedDate = (epochDate: number) => {\r\n    let date = new Date(epochDate);\r\n    return date.toLocaleString()\r\n}\r\n\r\nconst getFileSize = (size: number) => {\r\n    if (size < 1024) {\r\n        return size + ' bytes'\r\n    } else if (size > 1024 && size < 1048576) {\r\n        return (size / 1024).toFixed(2) + 'KB'\r\n    } else if (size > 1048576) {\r\n        return (size / 1048576).toFixed(2) + 'MB'\r\n    }\r\n}\r\n\r\nexport type UploadedFileDataType = {\r\n    //base64 содержит base64 файла либо текст файла, если файл текстовый (получаем из reader.result)\r\n    base64: string\r\n    fileURL: string\r\n    fileName: string\r\n    fileType: string\r\n    fileSize?: string\r\n    fileLastModified: string\r\n    formData: FormData\r\n}\r\n\r\ntype FileUploaderPropsType = {\r\n    style?: CSSProperties\r\n    onClick: (fileData: UploadedFileDataType) => void\r\n    expectedFileType?: \"image\" | \"video\" | \"audio\" | \"text\"\r\n}\r\n\r\nexport const FileUploader: React.FC<FileUploaderPropsType> = React.memo(({\r\n                                                                             style,\r\n                                                                             onClick,\r\n                                                                             expectedFileType,\r\n                                                                             children\r\n                                                                         }) => {\r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n\r\n    const uploadFile = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const reader = new FileReader()\r\n        const formData = new FormData()\r\n        if (e.target.files !== null && e.target.files[0] instanceof Blob) {\r\n            // получаем base64 файла, необходимый для его отправки на сервер:\r\n            if (!/text\\/.+/.test(e.target.files[0].type)) reader.readAsDataURL(e.target.files[0])\r\n            // получаем текст файла, необходимый для отображения, если файл текстовый:\r\n            if (/text\\/.+/.test(e.target.files[0].type)) reader.readAsText(e.target.files[0])\r\n            // получаем url файла, необходимый для его предпросмотра до отправки на сервер:\r\n            const imageURL = window.URL.createObjectURL(e.target.files[0])\r\n            // получаем весь файл для отправки на второй сервер для файлов:\r\n            formData.append('myFile', e.target.files[0], e.target.files[0].name)\r\n            reader.onloadend = () => {\r\n                const newBase64 = reader.result\r\n                if (e.target.files && e.target.files[0].size < 2097152) {\r\n                    if (newBase64) onClick({\r\n                        base64: newBase64.toString(),\r\n                        fileURL: imageURL,\r\n                        fileName: e.target.files[0].name,\r\n                        fileType: e.target.files[0].type,\r\n                        fileSize: getFileSize(e.target.files[0].size),\r\n                        fileLastModified: getLastModifiedDate(e.target.files[0].lastModified),\r\n                        formData: formData\r\n                    })\r\n                } else if (e.target.files && e.target.files[0].size > 2097152) {\r\n                    alert('File size should be less than 2MB.')\r\n                }\r\n            }\r\n        } else return\r\n    }\r\n//в зависимости от expectedFileType в пропсах, выбираем, какой формат файлов подсказывать юзеру для выгрузки\r\n    const acceptOptions = expectedFileType === 'image'\r\n        ? 'image/*'\r\n        : expectedFileType === 'video'\r\n            ? 'video/*'\r\n            : expectedFileType === 'text'\r\n                ? '.txt, .doc, .docx, application/msword'\r\n                : expectedFileType === 'audio'\r\n                    ? 'audio/*'\r\n                    : ''\r\n\r\n    return <span style={{...style}}>\r\n        <input type=\"file\" multiple={false} accept={acceptOptions} ref={inputRef} style={{display: 'none'}}\r\n               onChange={uploadFile}/>\r\n        <Button onClick={() => inputRef && inputRef.current && inputRef.current.click()}\r\n                type={'link'}>\r\n            {/*внешний вид кнопки будет любым в зависимости от переданного childrena*/}\r\n            {children}\r\n        </Button>\r\n    </span>\r\n})\r\n","import React, {CSSProperties} from \"react\";\r\n\r\ntype ModalPropsType = {\r\n    enableBackground?: boolean\r\n    backgroundOnClick?: () => void\r\n    modalWidthPx: number\r\n    modalHeightPx: number\r\n    modalStyle?: CSSProperties\r\n    modalOnClick?: () => void\r\n    show: boolean\r\n}\r\n\r\nexport const Modal: React.FC<ModalPropsType> = React.memo((\r\n    {\r\n        enableBackground,\r\n        backgroundOnClick = () => {},\r\n        modalWidthPx,\r\n        modalHeightPx,\r\n        modalStyle,\r\n        modalOnClick = () => {},\r\n        show,\r\n        children,\r\n    }\r\n) => {\r\n    const top = `calc(50vh - ${modalHeightPx / 2}px)`\r\n    const left = `calc(50vw - ${modalWidthPx / 2}px)`\r\n\r\n    if (!show) return null;\r\n\r\n    return (\r\n        <>\r\n            {enableBackground && <div\r\n                style={{\r\n                    position: 'fixed',\r\n                    top: '0px',\r\n                    left: '0px',\r\n                    width: '100vw',\r\n                    height: '100vh',\r\n                    background: 'black',\r\n                    opacity: 0.6,\r\n                    zIndex: 20,\r\n                }}\r\n                onClick={backgroundOnClick}\r\n            />}\r\n            <div\r\n                style={{\r\n                    position: 'fixed',\r\n                    top,\r\n                    left,\r\n                    width: modalWidthPx,\r\n                    height: modalHeightPx,\r\n                    display: 'flex',\r\n                    flexFlow: 'column',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    backgroundColor: '#fafafa',\r\n                    borderRadius: '2px',\r\n                    zIndex: 21,\r\n                    ...modalStyle,\r\n                }}\r\n                onClick={modalOnClick}\r\n            >\r\n                {children}\r\n            </div>\r\n        </>\r\n    )\r\n})","import React from \"react\";\r\nimport style from \"./DeleteItemModal.module.css\";\r\nimport {Modal} from \"../../../common/Modal/Modal\";\r\n\r\ntype DeleteItemModalPropsType = {\r\n    itemToDelete: 'pack' | 'card' | 'image'\r\n    show: boolean\r\n    setShow: (show: boolean) => void\r\n    onDeleteBtnClick: (isToBeDeleted: boolean) => void\r\n}\r\n\r\nexport const DeleteItemModal: React.FC<DeleteItemModalPropsType> = React.memo(({\r\n                                                                                   itemToDelete,\r\n                                                                                   show,\r\n                                                                                   setShow,\r\n                                                                                   onDeleteBtnClick\r\n                                                                               }) => {\r\n\r\n    return <Modal enableBackground modalHeightPx={250} modalWidthPx={395} show={show}\r\n                  backgroundOnClick={() => setShow(false)}>\r\n        <div className={style.deleteBlock}>\r\n            <h4>Are you sure you want to delete this {itemToDelete}?</h4>\r\n            <div className={style.buttons}>\r\n                <button onClick={() => onDeleteBtnClick(true)}>Yes</button>\r\n                <button onClick={() => setShow(false)}>No</button>\r\n            </div>\r\n        </div>\r\n    </Modal>\r\n})\r\n","import React, {useCallback, useState} from \"react\";\r\nimport style from \"./Profile.module.css\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {InitialAuthStateType, logoutTC, updateUserDataTC} from \"../Login/auth-reducer\";\r\nimport {Avatar, Button, Tooltip, Typography} from 'antd';\r\nimport {CloudServerOutlined, DeleteTwoTone, EditTwoTone, PlusSquareTwoTone, UserOutlined} from '@ant-design/icons';\r\nimport {PATH} from \"../../app/App\";\r\nimport commonStyle from \"../../common/styles/error.module.css\";\r\nimport {FileUploader, UploadedFileDataType} from \"../../common/FileUploader/FileUploader\";\r\nimport {DeleteItemModal} from \"../Modals/DeleteItemModal/DeleteItemModal\";\r\n\r\nexport const Profile = () => {\r\n    const {\r\n        email,\r\n        name,\r\n        error,\r\n        avatar,\r\n        isLoggedIn,\r\n        requestStatus\r\n    } = useSelector<AppRootStateType, InitialAuthStateType>(state => state.auth)\r\n    const dispatch = useDispatch()\r\n    const {Paragraph} = Typography;\r\n    const [showDeleteItemModal, setShowDeleteItemModal] = useState<boolean>(false)\r\n\r\n    const onImageEditorClick = useCallback((fileData: UploadedFileDataType) => {\r\n        dispatch(updateUserDataTC({avatar: fileData.base64}))\r\n    }, [dispatch])\r\n    const onDeleteAvatarClick = useCallback((isToBeDeleted: boolean) => {\r\n        if (isToBeDeleted) {\r\n            dispatch(updateUserDataTC({avatar: \"0\"}))\r\n            setShowDeleteItemModal(false)\r\n        }\r\n    }, [dispatch])\r\n    const onNewNameSubmit = useCallback((newName: string) => {\r\n        dispatch(updateUserDataTC({name: newName}))\r\n    }, [dispatch])\r\n    const onLogoutClick = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isLoggedIn) return <Redirect to={PATH.LOGIN}/>\r\n\r\n    return (\r\n        <div className={style.profile}>\r\n            Welcome!\r\n            {requestStatus === 'loading' && <div className={style.loading}>loading...</div>}\r\n            <div className={error && commonStyle.error}>{error}</div>\r\n            <div className={style.avatarContainer}>\r\n                {avatar && avatar !== \"0\" ? <>\r\n                        <Avatar src={avatar} size={64}/>\r\n                        <div className={style.avatarButtons}>\r\n                            <FileUploader onClick={onImageEditorClick} expectedFileType={'image'}>\r\n                                <EditTwoTone style={{fontSize: '16px'}}/>\r\n                            </FileUploader>\r\n                            <div>\r\n                                <Button onClick={() => {\r\n                                    setShowDeleteItemModal(true)\r\n                                }} icon={<DeleteTwoTone style={{fontSize: '16px'}}/>} shape=\"circle\" ghost/>\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                    : <>\r\n                        <Avatar size={64} icon={<UserOutlined/>}/>\r\n                        <FileUploader onClick={onImageEditorClick} expectedFileType={'image'}\r\n                                      style={{position: \"absolute\", top: \"30%\", right: \"0\"}}>\r\n                            <PlusSquareTwoTone style={{fontSize: '16px'}}/>\r\n                        </FileUploader>\r\n                    </>}\r\n            </div>\r\n            <Paragraph editable={{onChange: onNewNameSubmit}}>{name}</Paragraph>\r\n            <div>{email}</div>\r\n            <button onClick={onLogoutClick} disabled={requestStatus === 'loading'}>Log out</button>\r\n            {/*картинка со ссылкой на Files*/}\r\n            <NavLink to={PATH.FILES}>\r\n                <Tooltip title=\"Go to Files 🙂\" color=\"#2db7f5\">\r\n                    <CloudServerOutlined\r\n                        style={{position: \"absolute\", top: \"30%\", right: \"30%\", fontSize: '52px', color: 'orange'}}/>\r\n                </Tooltip>\r\n            </NavLink>\r\n            {/*появляющаяся модалка для удаления аватара*/}\r\n            {showDeleteItemModal &&\r\n            <DeleteItemModal itemToDelete={'image'} onDeleteBtnClick={onDeleteAvatarClick}\r\n                             setShow={setShowDeleteItemModal}\r\n                             show={showDeleteItemModal}/>}\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport style from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../app/App\";\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div className={style.header}>\r\n            <NavLink to={PATH.PROFILE} activeClassName={style.active}>Profile</NavLink>\r\n            <NavLink to={PATH.PACKS} activeClassName={style.active}>Packs</NavLink>\r\n            <NavLink to={PATH.FILES} activeClassName={style.active}>Files</NavLink>\r\n        </div>\r\n    );\r\n}","import {GetSortedPacksType, NewPackType, PackDataType, packsAPI, SortDirections} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\n\r\nconst initialState = {\r\n    cardPacks: [] as Array<PackDataType>,\r\n    requestStatus: 'idle' as RequestStatusType,\r\n    error: \"\",\r\n    cardPacksTotalCount: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    sortParams: {\r\n        nameToSearch: '',\r\n        minCardsCount: 0,\r\n        maxCardsCount: 100,\r\n        sortDirection: SortDirections.Down,\r\n        propToSortBy: undefined,\r\n        page: 1,\r\n        pageCount: 10,\r\n        userId: ''\r\n    } as GetSortedPacksType\r\n}\r\n\r\nexport const packsReducer = (state = initialState, action: ActionsType): PacksStateType => {\r\n    switch (action.type) {\r\n        case 'PACKS/SET-PACKS': {\r\n            return {\r\n                ...state,\r\n                cardPacks: action.cardPacks,\r\n                cardPacksTotalCount: action.cardPacksTotalCount,\r\n                page: action.page,\r\n                pageCount: action.pageCount\r\n            }\r\n        }\r\n        case 'PACKS/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'PACKS/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        case 'PACKS/SET-SORT-PARAMS': {\r\n            return {\r\n                ...state,\r\n                sortParams: {...state.sortParams, ...action.sortParams}\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setPacksAC = (cardPacks: Array<PackDataType>, cardPacksTotalCount: number, page: number, pageCount: number) => ({\r\n    type: 'PACKS/SET-PACKS',\r\n    cardPacks, cardPacksTotalCount,\r\n    page, pageCount\r\n} as const)\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'PACKS/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\n\r\nconst setErrorAC = (error: string) => ({type: 'PACKS/SET-ERROR', error} as const)\r\nconst setSortParamsAC = (sortParams: GetSortedPacksType) => ({type: 'PACKS/SET-SORT-PARAMS', sortParams} as const)\r\n\r\n\r\n//thunk\r\nexport const getPacksTC = (params: GetSortedPacksType = {}) => (dispatch: ThunkCustomDispatch, getState: () => AppRootStateType) => {\r\n    if (params) dispatch(setSortParamsAC(params))\r\n    const sortParams = getState().packs.sortParams\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.getPacks(sortParams)\r\n        .then(res => {\r\n            dispatch(setPacksAC(res.data.cardPacks, res.data.cardPacksTotalCount, res.data.page, res.data.pageCount))\r\n            dispatch(setRequestStatusAC('success'))\r\n\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const addPackTC = (name?: string, deckCover?: string, isPrivate?: boolean) => (\r\n    dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.addPack(name, isPrivate, deckCover)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const deletePackTC = (packId: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.deletePack(packId)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const updatePackTC = (packId: string, params: NewPackType = {}) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.updatePack(packId, params)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type PacksStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setPacksAC>\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setSortParamsAC>\r\n\r\n\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {useCallback, useState} from \"react\";\r\nimport {Slider} from 'antd';\r\nimport style from \"./DoubleRange.module.css\";\r\n\r\ntype DoubleRangePropsType = {\r\n    minRangeLimit?: number\r\n    maxRangeLimit?: number\r\n    minValue: number | undefined\r\n    maxValue: number | undefined\r\n    onValuesChange: ([minValue, maxValue]: Array<number | undefined>) => void\r\n}\r\nexport const DoubleRange = React.memo(({\r\n                                           minRangeLimit = 0,\r\n                                           maxRangeLimit = 100,\r\n                                           minValue,\r\n                                           maxValue,\r\n                                           onValuesChange\r\n                                       }: DoubleRangePropsType) => {\r\n\r\n    const [min, setMin] = useState(minValue || 0)\r\n    const [max, setMax] = useState(maxValue || 5)\r\n\r\n    const onSliderValuesChange = useCallback((values: Array<number>) => {\r\n        setMin(values[0])\r\n        setMax(values[1])\r\n    }, [setMin, setMax])\r\n\r\n    const onMouseUpHandler = useCallback(() => {\r\n        onValuesChange([min, max])\r\n    }, [onValuesChange, min, max])\r\n\r\n    return <span className={style.rangeBlock}>\r\n        <Slider range={{draggableTrack: true}} value={[min, max]} min={minRangeLimit} max={maxRangeLimit}\r\n                onChange={onSliderValuesChange}\r\n                onAfterChange={onMouseUpHandler}\r\n                tooltipVisible\r\n        />\r\n    </span>\r\n})","import {Pagination} from 'antd';\r\nimport React from 'react';\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\n\r\ntype PaginatorType = {\r\n    onChange: (page: number, pageCount: number | undefined, packId?: string) => void\r\n    current: number\r\n    total: number\r\n    pageCount: number\r\n    requestStatus: RequestStatusType\r\n}\r\n\r\nexport const Paginator = (props: PaginatorType) => {\r\n\r\n    return <div>\r\n        <Pagination showQuickJumper current={props.current} total={props.total} onChange={props.onChange}\r\n                    pageSize={props.pageCount} disabled={props.requestStatus === 'loading'}/>\r\n    </div>\r\n\r\n}\r\n","import React, {ChangeEvent, useCallback, useState} from \"react\";\r\nimport style from \"./AddItemModal.module.css\";\r\nimport {Modal} from \"../../../common/Modal/Modal\";\r\nimport {Button} from 'antd';\r\nimport {DeleteTwoTone, UploadOutlined} from '@ant-design/icons';\r\nimport {FileUploader, UploadedFileDataType} from \"../../../common/FileUploader/FileUploader\";\r\nimport {UploadedImageDataType} from \"../UpdateItemModal/UpdateItemModal\";\r\n\r\ntype AddItemModalPropsType = {\r\n    inputLabels: Array<'Name: ' | 'Question: ' | 'Answer: '>\r\n    filesToUpload: Array<'deck cover' | 'question pic' | 'answer pic'>\r\n    itemToAdd: 'pack' | 'card'\r\n    show: boolean\r\n    setShow: (show: boolean) => void\r\n    onAddBtnClick: (values: Array<string>, fileData: Array<UploadedImageDataType>) => void\r\n}\r\n\r\nexport const AddItemModal: React.FC<AddItemModalPropsType> = React.memo(({\r\n                                                                             inputLabels,\r\n                                                                             filesToUpload,\r\n                                                                             itemToAdd,\r\n                                                                             show,\r\n                                                                             setShow,\r\n                                                                             onAddBtnClick\r\n                                                                         }) => {\r\n    //создаем массив initialValues с пустыми строками, кол-во которых совпадает с кол-вом лейблов в inputLabels\r\n    const initialValues = Array.from(inputLabels, () => \"\")\r\n    const initialFileData = Array.from(filesToUpload, () => ({base64: '', fileURL: ''}))\r\n    const [values, setValues] = useState<Array<string>>(initialValues)\r\n    const [fileData, setFileData] = useState<Array<UploadedImageDataType>>(initialFileData)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>, index: number) => {\r\n        setValues(values.map((v, i) => i === index ? e.currentTarget.value : v))\r\n    }\r\n    const onDeleteImageClick = useCallback((index: number) => {\r\n        setFileData(fileData.map((d, i) => i === index ? ({base64: '', fileURL: ''})\r\n            : d))\r\n    }, [fileData])\r\n    const onImageUpload = useCallback((base64: string, fileURL?: string, index?: number) => {\r\n        setFileData(fileData.map((d, i) => i === index ? ({base64, fileURL}) : d))\r\n    }, [fileData])\r\n    const onAddClick = () => {\r\n        onAddBtnClick(values, fileData)\r\n        setShow(false)\r\n    }\r\n\r\n    return <Modal enableBackground modalHeightPx={400} modalWidthPx={450} show={show}\r\n                  backgroundOnClick={() => setShow(false)}>\r\n        <div className={style.addBlock}>\r\n            <h4>Add new {itemToAdd}:</h4>\r\n            {/*мапим лейблы для получения соответствующего количества текстэрий с ними*/}\r\n            {inputLabels.map((l, i) => <div key={i}>\r\n                <label>\r\n                    <div>{l}</div>\r\n                    <textarea value={values[i]} onChange={(e) => onChangeHandler(e, i)}/>\r\n                </label>\r\n            </div>)}\r\n            <div>\r\n                {/*мапим названия файлов (картинок) для получения соответствующего количества кнопок для их выгрузки*/}\r\n                {filesToUpload.map((f, i) => <FileUploader\r\n                    key={i} expectedFileType={'image'}\r\n                    onClick={(fileData: UploadedFileDataType) => onImageUpload(fileData.base64, fileData.fileURL, i)}>\r\n                    <Button icon={<UploadOutlined/>}>Upload {f}</Button>\r\n                </FileUploader>)}\r\n            </div>\r\n            <div className={style.previews}>\r\n                {/*мапим файлы (картинки) для их отображения вместе с кнопкой для их удаления*/}\r\n                {fileData.map((f, i) => f.fileURL\r\n                    ? <div className={style.previewContainer}>\r\n                        {/*картинка*/}\r\n                        <div className={style.preview} style={{backgroundImage: `url(${f.fileURL})`}}> </div>\r\n                        {/*кнопка для удаления*/}\r\n                        <div className={style.bin}>\r\n                            <Button onClick={() => onDeleteImageClick(i)}\r\n                                    icon={<DeleteTwoTone style={{fontSize: '16px'}}/>} shape=\"circle\" ghost/>\r\n                        </div>\r\n                    </div>\r\n                    : null)}\r\n            </div>\r\n            <div className={style.buttons}>\r\n                <button onClick={() => setShow(false)}>Cancel</button>\r\n                <button onClick={onAddClick}>Add</button>\r\n            </div>\r\n        </div>\r\n    </Modal>\r\n})\r\n","import React, {ChangeEvent, useCallback, useState} from \"react\";\r\nimport {Modal} from \"../../../common/Modal/Modal\";\r\nimport style from \"./UpdateItemModal.module.css\";\r\nimport {FileUploader, UploadedFileDataType} from \"../../../common/FileUploader/FileUploader\";\r\nimport {Button} from \"antd\";\r\nimport {DeleteTwoTone, UploadOutlined} from \"@ant-design/icons\";\r\n\r\nexport type UploadedImageDataType = {\r\n    base64: string\r\n    fileURL?: string\r\n}\r\n\r\ntype UpdateItemModalPropsType = {\r\n    inputValues: Array<string>\r\n    inputLabels: Array<'Name: ' | 'Question: ' | 'Answer: '>\r\n    imageURLs: Array<string>\r\n    filesToUpload: Array<'deck cover' | 'question pic' | 'answer pic'>\r\n    itemToUpdate: 'pack' | 'card'\r\n    show: boolean\r\n    setShow: (show: boolean) => void\r\n    onUpdateBtnClick: (values: Array<string>, fileData: Array<UploadedImageDataType>) => void\r\n}\r\n\r\nexport const UpdateItemModal: React.FC<UpdateItemModalPropsType> = React.memo(({\r\n                                                                                   inputValues,\r\n                                                                                   inputLabels,\r\n                                                                                   filesToUpload,\r\n                                                                                   imageURLs,\r\n                                                                                   itemToUpdate,\r\n                                                                                   show,\r\n                                                                                   setShow,\r\n                                                                                   onUpdateBtnClick\r\n                                                                               }) => {\r\n    const initialFileData = Array.from(imageURLs, (url) => ({base64: '', fileURL: url}))\r\n    const [values, setValues] = useState<Array<string>>(inputValues)\r\n    const [fileData, setFileData] = useState<Array<UploadedImageDataType>>(initialFileData)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>, index: number) => {\r\n        setValues(values.map((v, i) => i === index ? e.currentTarget.value : v))\r\n    }\r\n    const onImageUpload = useCallback((base64: string, fileURL?: string, index?: number) => {\r\n        setFileData(fileData.map((d, i) => i === index ? ({base64, fileURL}) : d))\r\n    }, [fileData])\r\n    const onDeleteImageClick = useCallback((index: number) => {\r\n        setFileData(fileData.map((d, i) => i === index ? ({base64: '0', fileURL: '0'})\r\n            : d))\r\n    }, [fileData])\r\n    const onUpdateClick = () => {\r\n        onUpdateBtnClick(values, fileData)\r\n        setShow(false)\r\n    }\r\n\r\n    return <Modal enableBackground modalHeightPx={400} modalWidthPx={450} show={show}\r\n                  backgroundOnClick={() => setShow(false)}>\r\n        <div className={style.updateBlock}>\r\n            <h4>Update {itemToUpdate}:</h4>\r\n            <div>\r\n                {/*мапим лейблы для получения соответствующего количества текстэрий с ними*/}\r\n                {inputLabels.map((l, i) => <div>\r\n                    <label>\r\n                        <div>{l}</div>\r\n                        <textarea value={values[i]} onChange={(e) => onChangeHandler(e, i)}/>\r\n                    </label>\r\n                </div>)}\r\n            </div>\r\n            <div>\r\n                {/*мапим названия файлов (картинок) для получения соответствующего количества кнопок для их выгрузки*/}\r\n                {filesToUpload.map((f, i) => <FileUploader\r\n                    key={i} expectedFileType={'image'}\r\n                    onClick={(fileData: UploadedFileDataType) => onImageUpload(fileData.base64, fileData.fileURL, i)}>\r\n                    <Button icon={<UploadOutlined/>}>Upload {f}</Button>\r\n                </FileUploader>)}\r\n            </div>\r\n            <div className={style.previews}>\r\n                {/*мапим файлы (картинки) для их отображения вместе с кнопкой для их удаления*/}\r\n                {fileData.map((f, i) => f.fileURL && f.fileURL !== '0'\r\n                    ? <div className={style.previewContainer}>\r\n                        {/*картинка*/}\r\n                        <div className={style.preview} style={{backgroundImage: `url(${f.fileURL})`}}> </div>\r\n                        {/*кнопка для удаления*/}\r\n                        <div className={style.bin}>\r\n                            <Button onClick={() => onDeleteImageClick(i)}\r\n                                    icon={<DeleteTwoTone style={{fontSize: '16px'}}/>} shape=\"circle\" ghost/>\r\n                        </div>\r\n                    </div>\r\n                    : null)}\r\n            </div>\r\n            <div className={style.buttons}>\r\n                <button onClick={() => setShow(false)}>Cancel</button>\r\n                <button onClick={onUpdateClick}>Update</button>\r\n            </div>\r\n        </div>\r\n    </Modal>\r\n})\r\n","import {PackDataType, SortDirections} from \"../../api/api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addPackTC, deletePackTC, getPacksTC, updatePackTC} from \"./packs-reducer\";\r\nimport {ColumnsType, FilterValue} from \"antd/es/table/interface\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Button, Table, TablePaginationConfig} from \"antd\";\r\nimport {DeleteTwoTone, EditTwoTone, PlusSquareTwoTone} from '@ant-design/icons';\r\nimport {SorterResult} from \"antd/lib/table/interface\";\r\nimport React, {useCallback, useState} from \"react\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {AddItemModal} from \"../Modals/AddItemModal/AddItemModal\";\r\nimport {PATH} from \"../../app/App\";\r\nimport {DeleteItemModal} from \"../Modals/DeleteItemModal/DeleteItemModal\";\r\nimport {UpdateItemModal, UploadedImageDataType} from \"../Modals/UpdateItemModal/UpdateItemModal\";\r\n\r\ntype PacksTablePropsType = {\r\n    cardPacks: Array<PackDataType>\r\n    authUserId: string\r\n    requestStatus: RequestStatusType\r\n}\r\ntype ButtonsDataType = {\r\n    packId: string\r\n    packUserId: string\r\n    cardsCount: number\r\n    packName: string\r\n    deckCover: string\r\n}\r\ntype PackType = {\r\n    key: string,\r\n    name: string,\r\n    cardsCount: number,\r\n    updated: Date,\r\n    createdBy: string,\r\n    buttons: ButtonsDataType\r\n}\r\nexport const PacksTable = React.memo(({cardPacks, authUserId, requestStatus}: PacksTablePropsType) => {\r\n    const [showAddItemModal, setShowAddItemModal] = useState<boolean>(false)\r\n    const [showDeleteItemModal, setShowDeleteItemModal] = useState<boolean>(false)\r\n    const [showUpdateItemModal, setShowUpdateItemModal] = useState<boolean>(false)\r\n    const [currentPackID, setCurrentPackID] = useState<string>('')\r\n    const [currentPackName, setCurrentPackName] = useState<string>('')\r\n    const [currentPackCover, setCurrentPackCover] = useState<string>('')\r\n    const dispatch = useDispatch()\r\n\r\n    const onAddPackClick = useCallback((values: Array<string>, fileData: Array<UploadedImageDataType>) => {\r\n        //values содержатся в массиве в том порядке, в котором передаем inputLabels в AddItemModal\r\n        dispatch(addPackTC(values[0], fileData[0].base64))\r\n    }, [dispatch])\r\n\r\n    const onDeleteClick = useCallback((isToBeDeleted: boolean) => {\r\n        if (isToBeDeleted) {\r\n            dispatch(deletePackTC(currentPackID))\r\n            setShowDeleteItemModal(false)\r\n        }\r\n    }, [dispatch, currentPackID])\r\n\r\n    const onUpdateClick = useCallback((values: Array<string>, fileData: Array<UploadedImageDataType>) => {\r\n        //values содержатся в массиве в том порядке, в котором передаем inputLabels и inputValues в UpdateItemModal\r\n        dispatch(updatePackTC(currentPackID, {name: values[0], deckCover: fileData[0].base64}))\r\n    }, [dispatch, currentPackID])\r\n//мапим данные для таблицы:\r\n    const data: Array<PackType> = cardPacks.map(p => ({\r\n        key: p._id,\r\n        name: p.name,\r\n        deckCover: p.deckCover,\r\n        cardsCount: p.cardsCount,\r\n        updated: p.updated,\r\n        createdBy: p.user_name,\r\n        buttons: {\r\n            packId: p._id,\r\n            packUserId: p.user_id,\r\n            cardsCount: p.cardsCount,\r\n            packName: p.name,\r\n            deckCover: p.deckCover\r\n        }\r\n    }))\r\n// колонки (их заголовки и render в тех колонках, где надо отрисовывать элементы в таблице):\r\n    const columns: ColumnsType<PackType> = [\r\n        {title: 'Name', dataIndex: 'name', key: 'name', sorter: true},\r\n        {title: 'Cards Count', dataIndex: 'cardsCount', key: 'cardsCount', sorter: true},\r\n        {title: 'Last Update', dataIndex: 'updated', key: 'updated'},\r\n        {title: 'Created by', dataIndex: 'createdBy', key: 'createdBy'},\r\n        {\r\n            title: () => <Button onClick={() => setShowAddItemModal(true)} type={'ghost'} size={'large'}\r\n                                 icon={<PlusSquareTwoTone style={{fontSize: '16px'}}/>}/>,\r\n            dataIndex: 'buttons',\r\n            key: 'buttons',\r\n            render: ({packId, packUserId, cardsCount, packName, deckCover}: ButtonsDataType) => <>\r\n                {packUserId === authUserId && <>\r\n                    <Button onClick={() => {\r\n                        setCurrentPackID(packId)\r\n                        setShowDeleteItemModal(true)\r\n                    }} icon={<DeleteTwoTone style={{fontSize: '16px'}}/>} shape=\"circle\" ghost/>\r\n                    <Button onClick={() => {\r\n                        setCurrentPackID(packId)\r\n                        setCurrentPackName(packName)\r\n                        setCurrentPackCover(deckCover)\r\n                        setShowUpdateItemModal(true)\r\n                    }} icon={<EditTwoTone style={{fontSize: '16px'}}/>} shape=\"circle\" ghost/>\r\n                </>}\r\n                {packUserId === authUserId || cardsCount > 0\r\n                    ? <span><NavLink to={`${PATH.CARDS}/${packId}`}> 👁️ Cards </NavLink></span>\r\n                    : null}\r\n                {cardsCount > 0 &&\r\n                <span><span> | </span><NavLink to={`${PATH.LEARN}/${packId}`}> 🎓 Learn </NavLink></span>}\r\n            </>,\r\n        },\r\n    ];\r\n//диспатч экшенов при сортировке с помощью кнопкок сортировки там, где они есть (Name и Cards Count):\r\n    const onChange = (pagination: TablePaginationConfig, filters: Record<string, FilterValue | null>,\r\n                      sorter: SorterResult<PackType> | any) => {\r\n        if (sorter.columnKey === 'name' && sorter.order === 'ascend') {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Down, propToSortBy: 'name'}))\r\n        } else if (sorter.columnKey === 'name' && sorter.order === 'descend') {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Up, propToSortBy: 'name'}))\r\n        } else if (sorter.columnKey === 'name' && sorter.order === undefined) {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Up, propToSortBy: 'updated'}))\r\n        }\r\n        if (sorter.columnKey === 'cardsCount' && sorter.order === 'ascend') {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Down, propToSortBy: \"cardsCount\"}))\r\n        } else if (sorter.columnKey === 'cardsCount' && sorter.order === 'descend') {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Up, propToSortBy: \"cardsCount\"}))\r\n        } else if (sorter.columnKey === 'cardsCount' && sorter.order === undefined) {\r\n            dispatch(getPacksTC({sortDirection: SortDirections.Up, propToSortBy: 'updated'}))\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <Table columns={columns} dataSource={data} onChange={onChange} pagination={false} style={{width: '100%'}}\r\n               size={'small'} loading={requestStatus === 'loading'} tableLayout={'fixed'}/>\r\n        {/*модалка для добавления колоды*/}\r\n        {showAddItemModal &&\r\n        <AddItemModal show={showAddItemModal} setShow={setShowAddItemModal} inputLabels={[\"Name: \"]}\r\n                      itemToAdd={'pack'} filesToUpload={['deck cover']} onAddBtnClick={onAddPackClick}/>}\r\n        {/*модалка для удаления колоды*/}\r\n        {showDeleteItemModal && <DeleteItemModal show={showDeleteItemModal} setShow={setShowDeleteItemModal}\r\n                                                 itemToDelete={'pack'} onDeleteBtnClick={onDeleteClick}/>}\r\n        {/*модалка для редактирования колоды*/}\r\n        {showUpdateItemModal && <UpdateItemModal show={showUpdateItemModal} setShow={setShowUpdateItemModal}\r\n                                                 itemToUpdate={'pack'} onUpdateBtnClick={onUpdateClick}\r\n                                                 filesToUpload={['deck cover']} imageURLs={[currentPackCover]}\r\n                                                 inputLabels={[\"Name: \"]} inputValues={[currentPackName]}/>}\r\n    </>\r\n})","import React, {ChangeEvent, KeyboardEvent, useCallback, useEffect, useState} from \"react\";\r\nimport style from \"./Packs.module.css\";\r\nimport commonStyle from \"../../common/styles/error.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getPacksTC, PacksStateType} from \"./packs-reducer\";\r\nimport {GetSortedPacksType} from \"../../api/api\";\r\nimport {DoubleRange} from \"../../common/DoubleRange/DoubleRange\";\r\nimport {Paginator} from \"../Paginator/Paginator\";\r\nimport {PATH} from \"../../app/App\";\r\nimport {PacksTable} from \"./PacksTable\";\r\n\r\nexport const Packs = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const authUserId = useSelector<AppRootStateType, string>(state => state.auth._id)\r\n    const error = useSelector<AppRootStateType, string>(state => state.packs.error)\r\n    const {\r\n        cardPacksTotalCount,\r\n        page,\r\n        cardPacks,\r\n        pageCount,\r\n        requestStatus\r\n    } = useSelector<AppRootStateType, PacksStateType>(state => state.packs)\r\n\r\n    const {\r\n        minCardsCount,\r\n        maxCardsCount,\r\n        userId\r\n    } = useSelector<AppRootStateType, GetSortedPacksType>(state => state.packs.sortParams)\r\n    const dispatch = useDispatch()\r\n\r\n    const [searchByName, setSearchByName] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) dispatch(getPacksTC())\r\n    }, [])\r\n\r\n    const onPrivatePacksSearch = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.checked) {\r\n            dispatch(getPacksTC({userId: authUserId, page: 1}))\r\n        } else {\r\n            dispatch(getPacksTC({userId: '', page: 1}))\r\n        }\r\n    }\r\n\r\n    const onSearchByName = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            dispatch(getPacksTC({nameToSearch: searchByName}))\r\n        }\r\n    }\r\n    const onCardsCountChange = useCallback(([minValue, maxValue]: Array<number | undefined>) => {\r\n        dispatch(getPacksTC({minCardsCount: minValue, maxCardsCount: maxValue}))\r\n    }, [dispatch])\r\n\r\n    const paginatorPage = useCallback((page: number, pageCount: number | undefined) => {\r\n        dispatch(getPacksTC({page, pageCount}))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) return <Redirect to={PATH.LOGIN}/>\r\n\r\n    return (\r\n        <div className={style.packs}>\r\n            <h2>Packs</h2>\r\n            <div className={style.filter}>\r\n                {/*поиск приватных колод*/}\r\n                <label><input type=\"checkbox\" checked={!!userId} onChange={onPrivatePacksSearch}/>\r\n                    My packs</label>\r\n                {/*фильтр по названию колоды*/}\r\n                <label>Search packs by name: <input placeholder={'Press Enter to search'}\r\n                                                    onKeyPress={onSearchByName}\r\n                                                    value={searchByName}\r\n                                                    onChange={e => setSearchByName(e.currentTarget.value)}\r\n                /></label>\r\n\r\n                {/*двойной range для сортировки по кол-ву карточек в колоде*/}\r\n                <div className={style.rangeContainer}>\r\n                    Search packs by cards count:\r\n                    <DoubleRange minValue={minCardsCount} maxValue={maxCardsCount} onValuesChange={onCardsCountChange}\r\n                                 maxRangeLimit={200}/>\r\n                </div>\r\n            </div>\r\n            <div className={error && commonStyle.error}>{error}</div>\r\n            {/*таблица с колодами*/}\r\n            <PacksTable cardPacks={cardPacks} authUserId={authUserId} requestStatus={requestStatus}/>\r\n            {/*Pagination*/}\r\n            <div className={style.pagination}>\r\n                <Paginator current={page}\r\n                           pageCount={pageCount}\r\n                           total={cardPacksTotalCount}\r\n                           onChange={paginatorPage}\r\n                           requestStatus={requestStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {CardDataType, cardsAPI, GetSortedCardsType, NewCardDataType, SortDirections} from \"../../api/api\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - 'idle' (неактивный)\r\n    error: '',\r\n    cards: [] as Array<CardDataType>,\r\n    packUserId: \"\",\r\n    cardsTotalCount: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    sortParams: {\r\n        question: '',\r\n        answer: '',\r\n        sortDirection: SortDirections.Down,\r\n        propToSortBy: undefined,\r\n        minGrade: 0,\r\n        maxGrade: 5,\r\n        page: 1,\r\n        pageCount: 10\r\n    } as GetSortedCardsType,\r\n}\r\n\r\nexport const cardsReducer = (state = initialState, action: ActionsType): CardsStateType => {\r\n    switch (action.type) {\r\n        case 'CARDS/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'CARDS/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        case 'CARDS/SET-SORT-PARAMS': {\r\n            return {\r\n                ...state,\r\n                sortParams: {...state.sortParams, ...action.sortParams}\r\n            }\r\n        }\r\n        case 'CARDS/SET-CARDS': {\r\n            return {\r\n                ...state,\r\n                cards: action.cards,\r\n                packUserId: action.packUserId,\r\n                page: action.page,\r\n                cardsTotalCount: action.cardsTotalCount,\r\n                pageCount: action.pageCount\r\n            }\r\n        }\r\n        case 'CARDS/SET-NEW-GRADE': {\r\n            return {\r\n                ...state,\r\n                cards: state.cards.map(c => c._id === action.cardId ? {...c, grade: action.grade} : c)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'CARDS/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'CARDS/SET-ERROR', error} as const)\r\nconst setSortParamsAC = (sortParams: GetSortedCardsType) => ({type: 'CARDS/SET-SORT-PARAMS', sortParams} as const)\r\nexport const setCardsAC = (cards: Array<CardDataType>, packUserId: string, page: number, cardsTotalCount: number, pageCount: number) =>\r\n    ({type: 'CARDS/SET-CARDS', cards, packUserId, page, cardsTotalCount, pageCount} as const)\r\nexport const setNewGradeAC = (grade: number, cardId: string) => ({type: 'CARDS/SET-NEW-GRADE', grade, cardId} as const)\r\n\r\n//thunk\r\nexport const getCardsTC = (packId: string, params: GetSortedCardsType = {}) => (dispatch: ThunkCustomDispatch,\r\n                                                                                getState: () => AppRootStateType) => {\r\n    if (params) dispatch(setSortParamsAC(params))\r\n    const sortParams = getState().cards.sortParams\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.getCards(packId, sortParams)\r\n        .then(res => {\r\n            dispatch(setCardsAC(res.data.cards, res.data.packUserId, res.data.page, res.data.cardsTotalCount, res.data.pageCount))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const addCardTC = (packId: string, params: NewCardDataType = {}) => (\r\n    dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.addCard(packId, params)\r\n        .then(() => {\r\n            dispatch(getCardsTC(packId))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const deleteCardTC = (packId: string, cardId: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.deleteCard(cardId)\r\n        .then(() => {\r\n            dispatch(getCardsTC(packId))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const updateCardTC = (packId: string, cardId: string, params: NewCardDataType = {}, comments?: string) => (\r\n    dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.updateCard(cardId, params, comments)\r\n        .then(() => {\r\n            dispatch(getCardsTC(packId))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const updateGradeTC = (grade: number, cardId: string) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.updateGrade(grade, cardId)\r\n        .then(res => {\r\n            dispatch(setNewGradeAC(res.data.updatedGrade.grade, res.data.updatedGrade.card_id))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type CardsStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setSortParamsAC>\r\n    | ReturnType<typeof setCardsAC>\r\n    | ReturnType<typeof setNewGradeAC>\r\n\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import {CardDataType} from \"../../api/api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {ColumnsType} from \"antd/es/table/interface\";\r\nimport {Button, Table} from \"antd\";\r\nimport {DeleteTwoTone, EditTwoTone, PlusSquareTwoTone} from '@ant-design/icons';\r\nimport React, {useCallback, useState} from \"react\";\r\nimport {addCardTC, deleteCardTC, updateCardTC} from \"./cards-reducer\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {AddItemModal} from \"../Modals/AddItemModal/AddItemModal\";\r\nimport {UpdateItemModal, UploadedImageDataType} from \"../Modals/UpdateItemModal/UpdateItemModal\";\r\nimport {DeleteItemModal} from \"../Modals/DeleteItemModal/DeleteItemModal\";\r\n\r\ntype CardsTablePropsType = {\r\n    cards: Array<CardDataType>\r\n    packId: string\r\n    packUserId: string\r\n    authUserId: string\r\n    requestStatus: RequestStatusType\r\n}\r\ntype ButtonsDataType = {\r\n    cardId: string\r\n    question: string\r\n    answer: string\r\n    questionImg: string\r\n    answerImg: string\r\n}\r\ntype CardType = {\r\n    key: string\r\n    question: string\r\n    answer: string\r\n    grade: number\r\n    updated: Date\r\n    packId: string\r\n    buttons: ButtonsDataType\r\n}\r\n\r\nexport const CardsTable = React.memo(({cards, packId, packUserId, authUserId, requestStatus}: CardsTablePropsType) => {\r\n    const [showAddItemModal, setShowAddItemModal] = useState<boolean>(false)\r\n    const [currentCardID, setCurrentCardID] = useState<string>(\"\")\r\n    const [question, setQuestion] = useState<string>(\"\")\r\n    const [answer, setAnswer] = useState<string>(\"\")\r\n    const [questionImg, setQuestionImg] = useState<string>(\"\")\r\n    const [answerImg, setAnswerImg] = useState<string>(\"\")\r\n    const [showUpdateItemModal, setShowUpdateItemModal] = useState<boolean>(false)\r\n    const [showDeleteItemModal, setShowDeleteItemModal] = useState<boolean>(false)\r\n    const dispatch = useDispatch()\r\n\r\n    const onAddCardClick = useCallback((values: Array<string>, fileData: Array<UploadedImageDataType>) => {\r\n        //values содержатся в массиве в том порядке, в котором передаем inputLabels в AddItemModal\r\n        dispatch(addCardTC(packId, {\r\n            question: values[0],\r\n            answer: values[1],\r\n            questionImg: fileData[0].base64,\r\n            answerImg: fileData[1].base64\r\n        }))\r\n    }, [dispatch, packId])\r\n\r\n    const onDeleteClick = useCallback((isToBeDeleted: boolean) => {\r\n        if (isToBeDeleted) {\r\n            dispatch(deleteCardTC(packId, currentCardID))\r\n            setShowDeleteItemModal(false)\r\n        }\r\n    }, [dispatch, packId, currentCardID])\r\n\r\n    const onUpdateClick = useCallback((values: Array<string>, fileData: Array<UploadedImageDataType>) => {\r\n        //values содержатся в массиве в том порядке, в котором передаем inputLabels и inputValues в UpdateItemModal\r\n        dispatch(updateCardTC(packId, currentCardID, {\r\n            question: values[0],\r\n            answer: values[1],\r\n            questionImg: fileData[0].base64,\r\n            answerImg: fileData[1].base64\r\n        }))\r\n    }, [dispatch, packId, currentCardID])\r\n//мапим данные для таблицы:\r\n    const data: Array<CardType> = cards.map(c => ({\r\n        key: c._id,\r\n        question: c.question,\r\n        questionImg: c.questionImg,\r\n        answer: c.answer,\r\n        answerImg: c.answerImg,\r\n        grade: c.grade,\r\n        updated: c.updated,\r\n        packId: c.cardsPack_id,\r\n        buttons: {\r\n            cardId: c._id,\r\n            question: c.question,\r\n            answer: c.answer,\r\n            questionImg: c.questionImg,\r\n            answerImg: c.answerImg\r\n        }\r\n    }))\r\n// колонки (их заголовки и render в тех колонках, где надо отрисовывать элементы в таблице):\r\n    const columns: ColumnsType<CardType> = [\r\n        {title: 'Question', dataIndex: 'question', key: 'question'},\r\n        {title: 'Answer', dataIndex: 'answer', key: 'answer'},\r\n        {title: 'Grade', dataIndex: 'grade', key: 'grade'},\r\n        {title: 'Last Update', dataIndex: 'updated', key: 'updated'},\r\n        {title: 'Pack ID', dataIndex: 'packId', key: 'packId'},\r\n        {\r\n            title: () => <>\r\n                {packUserId === authUserId &&\r\n                <Button onClick={() => setShowAddItemModal(true)} type={'ghost'} size={'large'}\r\n                        icon={<PlusSquareTwoTone style={{fontSize: '16px'}}/>}/>\r\n                }\r\n            </>,\r\n            dataIndex: 'buttons',\r\n            key: 'buttons',\r\n            render: ({cardId, question, answer, questionImg, answerImg}: ButtonsDataType) => <>\r\n                {packUserId === authUserId && <>\r\n                    <Button onClick={() => {\r\n                        setCurrentCardID(cardId)\r\n                        setShowDeleteItemModal(true)\r\n                    }} icon={<DeleteTwoTone style={{fontSize: '16px'}}/>} shape=\"circle\" ghost/>\r\n                    <Button onClick={() => {\r\n                        setCurrentCardID(cardId)\r\n                        setQuestion(question)\r\n                        setAnswer(answer)\r\n                        setQuestionImg(questionImg)\r\n                        setAnswerImg(answerImg)\r\n                        setShowUpdateItemModal(true)\r\n                    }} icon={<EditTwoTone style={{fontSize: '16px'}}/>} shape=\"circle\" ghost/>\r\n                </>}\r\n            </>,\r\n        },\r\n    ];\r\n\r\n    return <>\r\n        <Table columns={columns} dataSource={data} pagination={false} style={{width: '100%'}}\r\n               size={'small'} loading={requestStatus === 'loading'} tableLayout={'fixed'}/>\r\n        {/*модалка для добавления карточки*/}\r\n        {showAddItemModal &&\r\n        <AddItemModal show={showAddItemModal} setShow={setShowAddItemModal} inputLabels={[\"Question: \", \"Answer: \"]}\r\n                      itemToAdd={'card'} filesToUpload={['question pic', 'answer pic']}\r\n                      onAddBtnClick={onAddCardClick}/>}\r\n        {/*модалка для удаления карточки*/}\r\n        {showDeleteItemModal && <DeleteItemModal show={showDeleteItemModal} setShow={setShowDeleteItemModal}\r\n                                                 itemToDelete={'pack'} onDeleteBtnClick={onDeleteClick}/>}\r\n        {/*модалка для редактирования карточки*/}\r\n        {showUpdateItemModal && <UpdateItemModal show={showUpdateItemModal} setShow={setShowUpdateItemModal}\r\n                                                 itemToUpdate={'card'} onUpdateBtnClick={onUpdateClick}\r\n                                                 filesToUpload={['question pic', 'answer pic']}\r\n                                                 imageURLs={[questionImg, answerImg]}\r\n                                                 inputLabels={[\"Question: \", \"Answer: \"]}\r\n                                                 inputValues={[question, answer]}/>}\r\n    </>\r\n})","import React, {KeyboardEvent, useCallback, useEffect, useState} from \"react\";\r\nimport style from \"./Cards.module.css\";\r\nimport {NavLink, Redirect, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {GetSortedCardsType, PackDataType} from \"../../api/api\";\r\nimport {DoubleRange} from \"../../common/DoubleRange/DoubleRange\";\r\nimport {CardsStateType, getCardsTC, setCardsAC} from \"./cards-reducer\";\r\nimport {Paginator} from \"../Paginator/Paginator\";\r\nimport {PATH} from \"../../app/App\";\r\nimport {CardsTable} from \"./CardsTable\";\r\nimport commonStyle from \"../../common/styles/error.module.css\";\r\n\r\n\r\nexport const Cards = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const authUserId = useSelector<AppRootStateType, string>(state => state.auth._id)\r\n    const {packId} = useParams<{ packId?: any }>()    //читаем id колоды из URL\r\n    const {minGrade, maxGrade} = useSelector<AppRootStateType, GetSortedCardsType>(state => state.cards.sortParams)\r\n    const {\r\n        cards,\r\n        packUserId,\r\n        cardsTotalCount,\r\n        page,\r\n        pageCount,\r\n        error,\r\n        requestStatus\r\n    } = useSelector<AppRootStateType, CardsStateType>(state => state.cards)\r\n    const packs = useSelector<AppRootStateType, Array<PackDataType>>(state => state.packs.cardPacks)\r\n    const dispatch = useDispatch()\r\n\r\n    const [answer, setAnswer] = useState<string>(\"\")\r\n    const [question, setQuestion] = useState<string>(\"\")\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn && packId) dispatch(getCardsTC(packId))   //запрашиваем карточки, если залогинен и есть packId\r\n        //зачищаем карточки при выходе со страницы Cards, чтобы во время запроса новых карточек в Cards не просвечивались старые\r\n        return () => {\r\n            dispatch(setCardsAC([], \"\", 1, 0, 10))\r\n        }\r\n    }, [])\r\n\r\n    const onGradeRangeChange = useCallback(([minValue, maxValue]: Array<number | undefined>) => {\r\n        dispatch(getCardsTC(packId, {minGrade: minValue, maxGrade: maxValue}))\r\n    }, [packId, dispatch])\r\n\r\n    const onSearchByQuestion = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            dispatch(getCardsTC(packId, {question: question}))\r\n        }\r\n    }\r\n    const onSearchByAnswer = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            dispatch(getCardsTC(packId, {answer: answer}))\r\n        }\r\n    }\r\n    const paginatorPage = useCallback((page: number, pageCount: number | undefined) => {\r\n        dispatch(getCardsTC(packId, {page, pageCount}))\r\n    }, [packId, dispatch])\r\n    //защита от попытки открыть Learn с выдуманным packId в url\r\n    let isPackFound = packs.some(p => p._id === packId)\r\n\r\n    if (!isLoggedIn) return <Redirect to={PATH.LOGIN}/>\r\n    if (isLoggedIn && !packId || isLoggedIn && !isPackFound) return <Redirect to={PATH.PACKS}/>\r\n\r\n    return (\r\n        <div className={style.cards}>\r\n            <h2><NavLink to={PATH.PACKS} activeClassName={style.active}>⏴ Packs</NavLink></h2>\r\n            <div className={style.filter}>\r\n                {/*фильтр карточек по вопросу*/}\r\n                <label>Search cards by question: <input placeholder={'Press Enter to search'}\r\n                                                        onKeyPress={onSearchByQuestion}\r\n                                                        value={question}\r\n                                                        onChange={e => setQuestion(e.currentTarget.value)}/></label>\r\n                {/*фильтр карточек по ответу*/}\r\n                <label>Search cards by answer: <input placeholder={'Press Enter to search'}\r\n                                                      onKeyPress={onSearchByAnswer}\r\n                                                      value={answer}\r\n                                                      onChange={e => setAnswer(e.currentTarget.value)}/></label>\r\n                {/*двойной range для сортировки по оценкам (grade)*/}\r\n                <div className={style.rangeContainer}>Search cards by grade:\r\n                    <DoubleRange minValue={minGrade} maxValue={maxGrade} onValuesChange={onGradeRangeChange}\r\n                                 maxRangeLimit={5}/></div>\r\n            </div>\r\n            <div className={error && commonStyle.error}>{error}</div>\r\n            {/*таблица с карточками*/}\r\n            <CardsTable cards={cards} packId={packId} packUserId={packUserId} authUserId={authUserId} requestStatus={requestStatus}/>\r\n            {/*Pagination*/}\r\n            <div className={style.pagination}>\r\n                <Paginator current={page}\r\n                           pageCount={pageCount}\r\n                           total={cardsTotalCount}\r\n                           onChange={paginatorPage}\r\n                           requestStatus={requestStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {RequestStatusType, setAuthUserDataAC} from \"../features/Login/auth-reducer\";\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialAppStateType = initialState, action: AppActionsType): InitialAppStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {type: 'APP/SET-STATUS', status} as const\r\n}\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {type: 'APP/SET-ERROR', error} as const\r\n}\r\nexport const setIsInitializedAC = (isInitialized: boolean) => {\r\n    return {type: 'APP/SET-INITIALIZED', isInitialized} as const\r\n}\r\n\r\n//thunk\r\nexport const initializeAppTC = () => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.me()\r\n        .then(res => {\r\n            dispatch(setAuthUserDataAC(res.data._id, res.data.email, res.data.name, res.data.avatar, true))\r\n            dispatch(setAppStatusAC('success'))\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setAppErrorAC(error))\r\n            dispatch(setAppStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setAppErrorAC(''))\r\n            }, 3000)\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialAppStateType = typeof initialState\r\n\r\nexport type AppActionsType =\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setIsInitializedAC>\r\n\r\ntype ThunkCustomDispatch = Dispatch<AppActionsType | ReturnType<typeof setAuthUserDataAC>>","import {CardDataType} from \"../api/api\";\r\n\r\nexport const getRandomCard = (cards: Array<CardDataType>): CardDataType => {\r\n    let cardsCopy = [...cards]\r\n    let totalSum = cardsCopy.reduce((acc, card) => acc + ((6 - card.grade)**2), 0)\r\n    let random = Math.random() * totalSum\r\n    let i = 0\r\n    let sum = 0\r\n    while (sum < random) {\r\n        sum += (6 - cardsCopy[i].grade)**2\r\n        i++\r\n    }\r\n    return cardsCopy[i-1]\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport style from \"./Learn.module.css\";\r\nimport {NavLink, Redirect, useHistory, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {CardDataType, PackDataType} from \"../../api/api\";\r\nimport {CardsStateType, getCardsTC, setCardsAC, updateGradeTC} from \"../Cards/cards-reducer\";\r\nimport {PATH} from \"../../app/App\";\r\nimport {Modal} from \"../../common/Modal/Modal\";\r\nimport {getRandomCard} from \"../../utils/get-random-card\";\r\nimport commonStyle from \"../../common/styles/error.module.css\";\r\n\r\n\r\nexport const Learn = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const history = useHistory()\r\n    const [showAnswer, setShowAnswer] = useState<boolean>(false)\r\n    const {packId} = useParams<{ packId?: any }>()    //читаем id колоды из URL\r\n    const {\r\n        cards,\r\n        error,\r\n    } = useSelector<AppRootStateType, CardsStateType>(state => state.cards)\r\n    const packs = useSelector<AppRootStateType, Array<PackDataType>>(state => state.packs.cardPacks)\r\n    const dispatch = useDispatch()\r\n    const [isFirstCard, setIsFirstCard] = useState<boolean>(true);\r\n    const [card, setCard] = useState<CardDataType>({\r\n        _id: '',\r\n        user_id: '',\r\n        cardsPack_id: '',\r\n        answer: '',\r\n        question: '',\r\n        grade: 0,\r\n        shots: 0,\r\n        type: 'card',\r\n        rating: 0,\r\n        comments: '',\r\n        created: new Date(),\r\n        updated: new Date(),\r\n        answerImg: '',\r\n        questionImg: ''\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        if (isFirstCard) {\r\n            dispatch(getCardsTC(packId)); //запрашиваем карточки\r\n            setIsFirstCard(false);\r\n        }\r\n        if (cards.length > 0 && card._id === '') setCard(getRandomCard(cards))\r\n    }, [dispatch, packId, cards, card, isFirstCard])\r\n\r\n    useEffect(() => {\r\n        //зачищаем карточки при выходе со страницы Learn, чтобы во время запроса новых карточек в Cards не просвечивались старые\r\n        return () => {\r\n            dispatch(setCardsAC([], \"\", 1, 0, 10))\r\n        }\r\n    }, [])\r\n\r\n    const onGradeBtnClick = (grade: string | undefined) => {\r\n        dispatch(updateGradeTC(grade && +grade || 0, card._id))\r\n        setCard(getRandomCard(cards))\r\n        setShowAnswer(false)\r\n    }\r\n    const onNextClick = () => {\r\n        setCard(getRandomCard(cards))\r\n        setShowAnswer(false)\r\n    }\r\n\r\n    //защита от попытки открыть Learn с выдуманным packId в url\r\n    let isPackFound = packs.some(p => p._id === packId)\r\n\r\n    if (!isLoggedIn) return <Redirect to={PATH.LOGIN}/>\r\n    if (!isPackFound) return <Redirect to={PATH.PACKS}/>\r\n\r\n    return <Modal show enableBackground modalWidthPx={800} modalHeightPx={600}\r\n                  backgroundOnClick={() => history.push(PATH.PACKS)}>\r\n        <div className={error && commonStyle.error}>{error}</div>\r\n        {/*вопрос*/}\r\n        <div className={style.learn}>\r\n            <div className={style.section}>\r\n                <h4>Question: </h4>\r\n                <p className={style.text}>{card.question}</p>\r\n            </div>\r\n            {!showAnswer && <button className={style.section} onClick={() => setShowAnswer(true)}>Check answer</button>}\r\n            {/*ответ*/}\r\n            {showAnswer && <>\r\n                <div className={style.section}>\r\n                    <h4>Answer: </h4>\r\n                    <p className={style.text}>{card.answer}</p>\r\n                </div>\r\n                <div className={style.buttons}>\r\n                    <button onClick={e => onGradeBtnClick(e.currentTarget.dataset.grade)} data-grade={'1'}>\r\n                        Не знал/<br/>Didn’t know\r\n                    </button>\r\n                    <button onClick={e => onGradeBtnClick(e.currentTarget.dataset.grade)} data-grade={'2'}>\r\n                        Забыл/<br/>Forgot\r\n                    </button>\r\n                    <button onClick={e => onGradeBtnClick(e.currentTarget.dataset.grade)} data-grade={'3'}>\r\n                        Долго думал/<br/>Thought too long\r\n                    </button>\r\n                    <button onClick={e => onGradeBtnClick(e.currentTarget.dataset.grade)} data-grade={'4'}>\r\n                        Почти угадал/<br/>Nearly guessed\r\n                    </button>\r\n                    <button onClick={e => onGradeBtnClick(e.currentTarget.dataset.grade)} data-grade={'5'}>\r\n                        Знал/<br/>I knew it\r\n                    </button>\r\n                </div>\r\n            </>\r\n            }\r\n            <div className={style.buttons}>\r\n                <NavLink to={PATH.PACKS}> Cancel </NavLink>\r\n                <button onClick={onNextClick}>Next</button>\r\n            </div>\r\n        </div>\r\n    </Modal>\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {Modal} from \"../../../common/Modal/Modal\";\r\n\r\ntype ScrollUpModalPropsType = {}\r\n\r\nexport const ScrollUpModal: React.FC<ScrollUpModalPropsType> = React.memo(({}) => {\r\n    const [show, setShow] = useState(false)\r\n    let scrollSpeed = 10 // пауза между интервалами: 50мс, поэтому 10 здесь означает, что полный скролл займёт 500мс (полсекунды)\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', handleScroll)\r\n    }, [])\r\n\r\n    const handleScroll = () => { //условия появления модалки\r\n        if (window.pageYOffset > 400) {\r\n            setShow(true)\r\n        } else {\r\n            setShow(false)\r\n        }\r\n    }\r\n\r\n    const scroll = () => {\r\n        const singleScrollLength = window.pageYOffset / scrollSpeed //отрезок, проскролленый за 1 интервал (ниже)\r\n        let lastScrollPosition = window.pageYOffset // позиция скролла во время предыдущего интервала (ниже)\r\n\r\n        const timer = setInterval(() => {\r\n            if (lastScrollPosition < window.pageYOffset) { //остановить скролл, если юзер скроллит вниз во время скролла вверх\r\n                clearInterval(timer)\r\n            } else {\r\n                lastScrollPosition = window.pageYOffset //иначе обновляем значение предыдущей позиции скролла\r\n            }\r\n\r\n            window.scroll(0, lastScrollPosition - singleScrollLength) //скроллим на 1 отрезок вверх\r\n            if (window.pageYOffset === 0) clearInterval(timer) //остановить скролл, если находимся в самом верху\r\n        }, 50)\r\n    }\r\n\r\n    return <Modal enableBackground={false} modalHeightPx={50} modalWidthPx={50} show={show}\r\n                  modalOnClick={scroll} modalStyle={{\r\n        top: '85vh',\r\n        left: '60px',\r\n        border: '1px solid #d9d9d9',\r\n        borderRadius: '2px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        backgroundColor: '#fafafa',\r\n        boxShadow: '5px 5px 5px grey',\r\n        opacity: '0.5',\r\n        cursor: 'pointer'\r\n    }}>\r\n        <h2>⏶</h2>\r\n    </Modal>\r\n})\r\n","export default __webpack_public_path__ + \"static/media/maria.85ce96e4.jpeg\";","export default __webpack_public_path__ + \"static/media/leonid.50e258e4.jpg\";","export default __webpack_public_path__ + \"static/media/anton.01b75db7.png\";","import React from \"react\";\r\nimport style from \"./TeamPresentation.module.css\";\r\nimport maria from \"../../assets/images/maria.jpeg\"\r\nimport leonid from \"../../assets/images/leonid.jpg\";\r\nimport anton from \"../../assets/images/anton.png\";\r\n\r\nexport const TeamPresentation = React.memo(() => {\r\n\r\n    return (\r\n        <div className={style.teamPresentation}>\r\n            <div className={style.section}>Dream Team</div>\r\n            <div className={style.avatars}>\r\n                <div className={style.maria} style={{backgroundImage: `url(${maria})`}}> </div>\r\n                <div className={style.leonid} style={{backgroundImage: `url(${leonid})`}}> </div>\r\n                <div className={style.anton} style={{backgroundImage: `url(${anton})`}}> </div>\r\n            </div>\r\n            <div className={style.section}>Presents...</div>\r\n        </div>\r\n    );\r\n})","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://dry-forest-56016.herokuapp.com/'\r\n})\r\n\r\nexport const filesAPI = {\r\n    getFile() { // получение файла\r\n        return instance.get(`file`, {responseType: 'blob'})\r\n    },\r\n    sendFile(file: FormData) {  // отправка файла\r\n        return instance.post<FileResponseType>(`file`, file)\r\n    }\r\n}\r\n\r\n//types\r\ntype FileResponseType = {\r\n    fileName: string\r\n    success: boolean\r\n}","import {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {filesAPI} from \"../../api/files-api\";\r\n\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType,\r\n    error: \"\",\r\n}\r\n\r\nexport const filesReducer = (state = initialState, action: ActionsType): FilesStateType => {\r\n    switch (action.type) {\r\n        case 'FILES/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'FILES/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'FILES/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'FILES/SET-ERROR', error} as const)\r\n\r\n//thunk\r\nexport const getFileTC = (fileName: string) => (dispatch: ThunkCustomDispatch) => { //скачиваем файл с сервера на устройство\r\n    dispatch(setRequestStatusAC('loading'))\r\n    filesAPI.getFile()\r\n        .then(({data}) => {\r\n            const blob = new Blob([data], {type: 'image/jpeg'})\r\n            // создаём ссылку на файл\r\n            const downloadUrl = window.URL.createObjectURL(blob)\r\n            // создаём тег \"ссылка\" на наш файл\r\n            const link = document.createElement('a')\r\n            link.href = downloadUrl\r\n            // добавляем атрибуты нашему тегу: загрузочный, имя файла\r\n            link.setAttribute('download', fileName)\r\n            // добавляем тег в документ\r\n            document.body.appendChild(link)\r\n            // кликаем по ссылке\r\n            link.click()\r\n            // удаляем тег из документа\r\n            link.remove()\r\n\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\nexport const sendFileTC = (file: FormData) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    filesAPI.sendFile(file)\r\n        .then(() => {\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\n//types\r\nexport type FilesStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n\r\n\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","export default __webpack_public_path__ + \"static/media/mute.ccd4e6fb.svg\";","import React, {useEffect, useRef, useState} from \"react\";\r\nimport style from \"./Files.module.css\";\r\nimport muteIcon from \"../../assets/images/mute.svg\";\r\nimport {\r\n    CaretRightOutlined,\r\n    DashboardOutlined,\r\n    FullscreenOutlined,\r\n    PauseOutlined,\r\n    PlaySquareOutlined,\r\n    SoundOutlined\r\n} from '@ant-design/icons';\r\nimport {Button, Popover, Radio, RadioChangeEvent, Slider, Space} from \"antd\";\r\n\r\n//преобразуем время видео в формат 00:00:\r\nconst formatTime = (seconds: number | undefined) => {\r\n    if (seconds) {\r\n        let minutes = Math.floor(seconds / 60);\r\n        let minutesString = (minutes >= 10) ? minutes : \"0\" + minutes;\r\n        seconds = Math.floor(seconds % 60);\r\n        let secondsString = (seconds >= 10) ? seconds : \"0\" + seconds;\r\n        return minutesString + \":\" + secondsString;\r\n    } else return '00:00'\r\n}\r\n\r\ntype VideoPropsType = {\r\n    fileURL: string\r\n}\r\nexport const Video: React.FC<VideoPropsType> = React.memo(({fileURL}) => {\r\n    const videoRef = useRef<HTMLVideoElement>(null)\r\n    const [duration, setDuration] = useState<number | undefined>()\r\n    const [currentTime, setCurrentTime] = useState<number | undefined>()\r\n    const [volume, setVolume] = useState<number | undefined>()\r\n    const [isPaused, setIsPaused] = useState<boolean>(true)\r\n    const [showSpeedRates, setShowSpeedRates] = useState<boolean>(false)\r\n    const formattedDuration = formatTime(duration)\r\n    const formattedCurrentTime = formatTime(currentTime)\r\n\r\n    useEffect(() => {\r\n        // сетаем данные видео каждые 300мс:\r\n        const intervalId = setInterval(() => {\r\n            videoRef.current && setDuration(videoRef.current && videoRef.current.duration)\r\n            if (videoRef.current && videoRef.current.currentTime === videoRef.current.duration) {\r\n                videoRef.current.currentTime = 0\r\n                videoRef.current.play()\r\n            }\r\n            videoRef.current && setCurrentTime(videoRef.current && videoRef.current.currentTime)\r\n            videoRef.current && setVolume(videoRef.current && videoRef.current.volume)\r\n        }, 300)\r\n\r\n        return () => {\r\n            clearInterval(intervalId)\r\n        }\r\n    }, [])\r\n\r\n    const play = () => videoRef.current && videoRef.current.play()\r\n    const pause = () => videoRef.current && videoRef.current.pause()\r\n    const onCurrentTimeChange = (value: number) => {\r\n        if (videoRef.current) {\r\n            videoRef.current.currentTime = value\r\n        }\r\n    }\r\n    const onVolumeChange = (value: number) => {\r\n        if (videoRef.current) {\r\n            videoRef.current.volume = value\r\n        }\r\n    }\r\n    const onSpeedChange = (e: RadioChangeEvent) => {\r\n        if (videoRef.current) {\r\n            videoRef.current.playbackRate = e.target.value\r\n        }\r\n        setShowSpeedRates(false)\r\n    }\r\n    // слайдер-контроллер громкости:\r\n    const volumeRate = (\r\n        <Slider style={{height: '60px', margin: '0', padding: '0'}} vertical\r\n                value={volume} min={0} max={1} onChange={onVolumeChange} step={0.1}/>\r\n    )\r\n    // кнопки для выбора скорости воспроизведения:\r\n    const playbackSpeed = (\r\n        <Radio.Group defaultValue={1.0} size=\"small\" onChange={onSpeedChange}>\r\n            <Space direction=\"vertical\">\r\n                <Radio.Button style={{padding: '0', margin: '0'}} value={0.25}>0.25x</Radio.Button>\r\n                <Radio.Button style={{padding: '0', margin: '0'}} value={0.5}>0.5x</Radio.Button>\r\n                <Radio.Button style={{padding: '0', margin: '0'}} value={0.75}>0.75x</Radio.Button>\r\n                <Radio.Button style={{padding: '0', margin: '0'}} value={1.0}>Normal</Radio.Button>\r\n                <Radio.Button style={{padding: '0', margin: '0'}} value={1.25}>1.25x</Radio.Button>\r\n                <Radio.Button style={{padding: '0', margin: '0'}} value={1.5}>1.5x</Radio.Button>\r\n                <Radio.Button style={{padding: '0', margin: '0'}} value={1.75}>1.75x</Radio.Button>\r\n                <Radio.Button style={{padding: '0', margin: '0'}} value={2}>2x</Radio.Button>\r\n            </Space>\r\n        </Radio.Group>\r\n    )\r\n\r\n    return <div className={style.video}>\r\n        <video src={fileURL} ref={videoRef}/>\r\n        {/*дивка с кнопками*/}\r\n        <div className={style.videoControls}>\r\n            {/*большая кнопка play*/}\r\n            <div className={style.playBtn} onClick={() => {\r\n                isPaused ? play() : pause()\r\n                setIsPaused(!isPaused)\r\n            }}>\r\n                {isPaused\r\n                    ? <PlaySquareOutlined style={{color: '#1890ff', fontSize: '60px'}}/>\r\n                    : null}\r\n            </div>\r\n            <div className={style.controlBtns}>\r\n                {/*маленькая кнопка play/pause*/}\r\n                <div className={style.playAndTime}>\r\n                    {isPaused\r\n                        ? <Button onClick={() => {\r\n                            play()\r\n                            setIsPaused(false)\r\n                        }} icon={<CaretRightOutlined style={{color: '#1890ff', fontSize: '25px'}}/>}\r\n                                  type={'link'} ghost/>\r\n                        : <Button onClick={() => {\r\n                            pause()\r\n                            setIsPaused(true)\r\n                        }} icon={<PauseOutlined style={{color: '#1890ff', fontSize: '25px'}}/>}\r\n                                  type={'link'} ghost/>}\r\n                    {/*время*/}\r\n                    <span>{formattedCurrentTime}/{formattedDuration}</span>\r\n                </div>\r\n                {/*слайдер для перемотки*/}\r\n                <Slider style={{width: '500px'}} tooltipVisible={false}\r\n                        value={currentTime} min={0} max={duration} step={0.01}\r\n                        onChange={onCurrentTimeChange}\r\n                />\r\n                <div className={style.settings}>\r\n                    {/*звук*/}\r\n                    <Popover content={volumeRate} overlayStyle={{width: '35px'}} overlayInnerStyle={{opacity: '0.9'}}>\r\n                        {volume && volume > 0\r\n                            ? <Button onClick={() => {\r\n                                if (videoRef.current) {\r\n                                    videoRef.current.volume = 0\r\n                                }\r\n                            }} icon={<SoundOutlined style={{color: '#1890ff', fontSize: '20px'}}/>}\r\n                                      type={'link'} ghost/>\r\n                            : <Button onClick={() => {\r\n                                if (videoRef.current) {\r\n                                    videoRef.current.volume = 0.5\r\n                                }\r\n                            }} icon={<img src={muteIcon} alt={'mute'}/>}\r\n                                      type={'link'} ghost/>}\r\n                    </Popover>\r\n                    {/*скорость воспроизведения*/}\r\n                    <Popover content={playbackSpeed} overlayStyle={{width: '64px'}} overlayInnerStyle={{opacity: '0.9'}}\r\n                             trigger=\"click\" visible={showSpeedRates} onVisibleChange={(visible) => {\r\n                        setShowSpeedRates(visible)\r\n                    }}>\r\n                        <DashboardOutlined style={{color: '#1890ff', fontSize: '20px'}}/>\r\n                    </Popover>\r\n                    {/*полноэкранный режим*/}\r\n                    <Button onClick={() => {\r\n                        if (videoRef.current) {\r\n                            videoRef.current.requestFullscreen()\r\n                        }\r\n                    }} icon={<FullscreenOutlined style={{color: '#1890ff', fontSize: '20px'}}/>}\r\n                            type={'link'} ghost/>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n})","import React, {useCallback, useState} from \"react\";\r\nimport style from \"./Files.module.css\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {PATH} from \"../../app/App\";\r\nimport {FileUploader, UploadedFileDataType} from \"../../common/FileUploader/FileUploader\";\r\nimport {Button, Progress} from \"antd\";\r\nimport {DeleteTwoTone, UploadOutlined} from \"@ant-design/icons\";\r\nimport {FilesStateType, getFileTC, sendFileTC} from \"./files-reducer\";\r\nimport commonStyle from \"../../common/styles/error.module.css\";\r\nimport {Video} from \"./Video\";\r\n\r\nexport const downloadUpdatedFile = (fileName: string, text: string) => {\r\n    const link = document.createElement(\"a\");\r\n    link.href = \"data:text/plain;content-disposition=attachment;filename=file,\" + text;\r\n    link.download = fileName;\r\n    link.style.display = \"none\";\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n};\r\n\r\nexport const Files = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const {error, requestStatus} = useSelector<AppRootStateType, FilesStateType>(state => state.files)\r\n    const [fileData, setFileData] = useState<FormData>()\r\n    const [base64, setBase64] = useState<string>('')\r\n    const [fileURL, setFileURL] = useState<string>('')\r\n    const [fileName, setFileName] = useState<string>('')\r\n    const [fileLastModified, setFileLastModified] = useState<string>('')\r\n    const [fileSize, setFileSize] = useState<string | undefined>('')\r\n    const [fileType, setFileType] = useState<string>('')\r\n    const [newText, setNewText] = useState<string>('')\r\n    const [showDownloadButton, setShowDownloadButton] = useState<boolean>(false)\r\n    const dispatch = useDispatch()\r\n\r\n    const onFileUpload = useCallback((fileData: UploadedFileDataType) => {\r\n        setFileName(fileData.fileName)\r\n        setFileSize(fileData.fileSize)\r\n        setFileType(fileData.fileType)\r\n        setFileLastModified(fileData.fileLastModified)\r\n        setFileURL(fileData.fileURL)\r\n        setBase64(fileData.base64)\r\n        setFileData(fileData.formData)\r\n    }, [setFileName, setFileSize, setFileType, setFileURL, setBase64, setFileData])\r\n\r\n    const onSendClick = () => {\r\n        fileData && dispatch(sendFileTC(fileData))\r\n        setShowDownloadButton(true)\r\n    }\r\n    const onDownloadClick = () => {\r\n        fileData && dispatch(getFileTC(fileName))\r\n    }\r\n\r\n    const onSaveClick = () => {\r\n        let text = base64 + `\\r\\n` + newText\r\n        downloadUpdatedFile(fileName, text)\r\n    }\r\n    const onDeleteImageClick = () => {\r\n        setFileName('')\r\n        setFileSize('')\r\n        setFileType('')\r\n        setFileLastModified('')\r\n        setFileURL('')\r\n        setBase64('')\r\n        setFileData(undefined)\r\n    }\r\n\r\n    if (!isLoggedIn) return <Redirect to={PATH.LOGIN}/>\r\n\r\n    return (\r\n        <div className={style.files}>\r\n            {requestStatus === 'loading' && <Progress status=\"active\" percent={99.9} style={{position: \"absolute\", top: 0}}\r\n                                                      strokeColor={{from: '#1890ff', to: '#76ff7a'}} strokeWidth={7}/>}\r\n            <div className={error && commonStyle.error}>{error}</div>\r\n            <FileUploader onClick={onFileUpload} style={{margin: '20px'}}>\r\n                <Button icon={<UploadOutlined/>}>Upload file</Button>\r\n            </FileUploader>\r\n            {/*данные файла*/}\r\n            {fileName && <p>File Name: {fileName}</p>}\r\n            {fileSize && <p>File Size: {fileSize}</p>}\r\n            {fileLastModified && <p>Last Modified: {fileLastModified}</p>}\r\n            {/*превью картинки*/}\r\n            {/image\\/.+/.test(fileType) && fileURL && <div className={style.previewContainer}>\r\n                {/*картинка*/}\r\n                <div className={style.preview} style={{backgroundImage: `url(${fileURL})`}}> </div>\r\n                {/*кнопка для удаления*/}\r\n                <div className={style.bin}>\r\n                    <Button onClick={onDeleteImageClick}\r\n                            icon={<DeleteTwoTone style={{fontSize: '16px'}}/>} shape=\"circle\" ghost/>\r\n                </div>\r\n            </div>}\r\n            {/*превью текста*/}\r\n            {/text\\/.+/.test(fileType) && <>\r\n                <b><pre>{base64}</pre></b>\r\n                <textarea value={newText} onChange={e => setNewText(e.currentTarget.value)}/>\r\n                <Button onClick={onSaveClick}>Add text and Download file</Button>\r\n            </>}\r\n            {/*превью видео*/}\r\n            {/video\\/.+/.test(fileType) && <>\r\n                <Video fileURL={fileURL}/>\r\n            </>}\r\n            {/*кнопки для отправки картинки на сервер*/}\r\n            {fileData && <>\r\n                <Button onClick={onSendClick}>Send file to server</Button>\r\n            </>}\r\n            {showDownloadButton && <Button onClick={onDownloadClick}>Download my file from server</Button>}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Forgot} from \"../features/Forgot/Forgot\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Register} from \"../features/Register/Register\";\r\nimport {SetPassword} from \"../features/SetPassword/SetPassword\";\r\nimport {Profile} from \"../features/Profile/Profile\";\r\nimport {Header} from \"../features/Header/Header\";\r\nimport {Packs} from \"../features/Packs/Packs\";\r\nimport {Cards} from \"../features/Cards/Cards\";\r\nimport {initializeAppTC} from \"./app-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {Learn} from \"../features/Learn/Learn\";\r\nimport {ScrollUpModal} from '../features/Modals/ScrollUpModal/ScrollUpModal';\r\nimport {TeamPresentation} from \"../preloader/TeamPresentation/TeamPresentation\";\r\nimport {Files} from \"../features/Files/Files\";\r\n\r\nexport const PATH = {\r\n    LOGIN: \"/login\",\r\n    REGISTER: \"/register\",\r\n    FORGOT: \"/forgot\",\r\n    SET_PASSWORD: \"/set-new-password\",\r\n    PROFILE: \"/profile\",\r\n    PACKS: \"/packs\",\r\n    CARDS: \"/cards\",\r\n    LEARN: \"/learn\",\r\n    FILES: \"/files\",\r\n}\r\n\r\nconst App = () => {\r\n    let isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    let dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <TeamPresentation/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <Switch>\r\n                <Route exact path={['/', `${PATH.PROFILE}`]} render={() => <Profile/>}/>\r\n                <Route path={PATH.REGISTER} render={() => <Register/>}/>\r\n                <Route path={PATH.FORGOT} render={() => <Forgot/>}/>\r\n                <Route path={`${PATH.SET_PASSWORD}/:token?`} render={() => <SetPassword/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.PACKS} render={() => <Packs/>}/>\r\n                <Route path={`${PATH.CARDS}/:packId?`} render={() => <Cards/>}/>\r\n                <Route path={`${PATH.LEARN}/:packId?`} render={() => <Learn/>}/>\r\n                <Route path={PATH.FILES} render={() => <Files/>}/>\r\n                <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                <Redirect from={'*'} to={'/404'}/>\r\n            </Switch>\r\n            {/*кнопка для скролла вверх появится только, если юзер промотал вниз на 400px*/}\r\n            <ScrollUpModal/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    //\r\n}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        //cases\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\n// export const setSomethingAC = () => ({type: 'PROFILE/SET-SOMETHING'} as const)\r\n\r\n//thunk\r\n// export const doSomethingTC = () => (dispatch: ThunkDispatch) => {\r\n//\r\n// }\r\n\r\n//types\r\nexport type InitialStateType = typeof initialState\r\n//объединение типов actionов:\r\n// export type ActionsType = ReturnType<typeof setSomethingAC>\r\n// тип диспатча:\r\n// type ThunkDispatch = Dispatch<ReturnType<typeof setSomethingAC>>","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {registerReducer} from \"../features/Register/register-reducer\";\r\nimport {setPasswordReducer} from \"../features/SetPassword/set-password-reducer\";\r\nimport {profileReducer} from \"../features/Profile/profile-reducer\";\r\nimport {forgotReducer} from \"../features/Forgot/forgot-reducer\";\r\nimport {packsReducer} from \"../features/Packs/packs-reducer\";\r\nimport {cardsReducer} from \"../features/Cards/cards-reducer\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {filesReducer} from \"../features/Files/files-reducer\";\r\n\r\n// комбайним редюсеры\r\nconst rootReducer = combineReducers({  //стейт\r\n    auth: authReducer,\r\n    register: registerReducer,\r\n    forgot: forgotReducer,\r\n    setPassword: setPasswordReducer,\r\n    profile: profileReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer,\r\n    app: appReducer,\r\n    files: filesReducer\r\n})\r\n//создаем store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n//тип стейта\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// для вызова store из консоли\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"error_error__yFEcl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"files\":\"Files_files__3QEbh\",\"previewContainer\":\"Files_previewContainer__EROhm\",\"preview\":\"Files_preview__2tjLk\",\"bin\":\"Files_bin__1qd21\",\"video\":\"Files_video__2-ONZ\",\"videoControls\":\"Files_videoControls__1GxeD\",\"playBtn\":\"Files_playBtn__24FeQ\",\"controlBtns\":\"Files_controlBtns__2xjcI\",\"playAndTime\":\"Files_playAndTime__2z5DD\",\"settings\":\"Files_settings__2-4S4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2ck6i\",\"notice\":\"Login_notice__3_Xcq\",\"loading\":\"Login_loading__1oP3o\",\"error\":\"Login_error__1oq8R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"learn\":\"Learn_learn__14aic\",\"text\":\"Learn_text__1YGOt\",\"section\":\"Learn_section__2rsjK\",\"buttons\":\"Learn_buttons__w58Zp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"teamPresentation\":\"TeamPresentation_teamPresentation__4hEdD\",\"section\":\"TeamPresentation_section__34MZX\",\"avatars\":\"TeamPresentation_avatars__2UZnj\",\"maria\":\"TeamPresentation_maria__1JPVL\",\"leonid\":\"TeamPresentation_leonid__1ONdJ\",\"anton\":\"TeamPresentation_anton__2_K7M\",\"oneAvatarAnimation\":\"TeamPresentation_oneAvatarAnimation__17Hsj\",\"twoAvatarsAnimation\":\"TeamPresentation_twoAvatarsAnimation__2r1dO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addBlock\":\"AddItemModal_addBlock__1Lc0x\",\"previews\":\"AddItemModal_previews__cne1L\",\"previewContainer\":\"AddItemModal_previewContainer__16w5N\",\"preview\":\"AddItemModal_preview__2TLkv\",\"bin\":\"AddItemModal_bin__1FavX\",\"buttons\":\"AddItemModal_buttons__eAz8j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"updateBlock\":\"UpdateItemModal_updateBlock__1jU3R\",\"previews\":\"UpdateItemModal_previews__3bdeF\",\"previewContainer\":\"UpdateItemModal_previewContainer__3sN_K\",\"preview\":\"UpdateItemModal_preview__KKBDg\",\"bin\":\"UpdateItemModal_bin__3w9fc\",\"buttons\":\"UpdateItemModal_buttons__11I2E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cards\":\"Cards_cards__1nz5C\",\"filter\":\"Cards_filter__3iNkp\",\"rangeContainer\":\"Cards_rangeContainer__1ny9W\",\"error\":\"Cards_error__2Xcy8\",\"pagination\":\"Cards_pagination__34Qpn\"};"],"sourceRoot":""}