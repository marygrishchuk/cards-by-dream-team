{"version":3,"sources":["api/api.ts","features/Forgot/forgot-reducer.ts","features/Forgot/Forgot.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","features/Register/register-reducer.ts","features/Register/Register.tsx","features/SetPassword/set-password-reducer.ts","features/SetPassword/SetPassword.tsx","features/Profile/Profile.tsx","features/Header/Header.tsx","common/SortButtons/SortButtons.tsx","features/Packs/packs-reducer.ts","common/DoubleRange/DoubleRange.tsx","features/Packs/Pack/Pack.tsx","features/Packs/Packs.tsx","features/Cards/cards-reducer.ts","features/Cards/Cards.tsx","app/App.tsx","reportWebVitals.ts","features/Profile/profile-reducer.ts","app/store.ts","index.tsx","features/Header/Header.module.css","features/Packs/Packs.module.css","features/Login/Login.module.css","features/Cards/Cards.module.css","features/Forgot/Forgot.module.css","features/Register/Register.module.css","features/SetPassword/SetPassword.module.css","features/Packs/Pack/Pack.module.css","features/Profile/Profile.module.css","common/DoubleRange/DoubleRange.module.css"],"names":["SortDirections","instance","axios","create","withCredentials","baseURL","authAPI","post","loginData","regData","delete","newUserData","put","email","from","message","resetPassData","packsAPI","params","nameToSearch","maxCardsCount","minCardsCount","page","pageCount","sortDirection","propToSortBy","userId","get","name","isPrivate","deckCover","cardsPack","private","packId","_id","cardsAPI","question","answer","minGrade","maxGrade","grade","shots","rating","answerImg","questionImg","questionVideo","answerVideo","type","card","cardsPack_id","cardId","comments","initialState","requestStatus","error","info","setRequestStatusAC","Forgot","useSelector","state","forgot","dispatch","useDispatch","useState","setEmail","className","style","color","value","onChange","e","currentTarget","trim","onClick","then","res","data","catch","response","setErrorAC","sendEmailToResetPassTC","disabled","to","activeClassName","active","avatar","isLoggedIn","setAuthUserDataAC","payload","getAuthUserDataTC","setTimeout","updateUserDataTC","newData","getState","auth","Login","formik","useFormik","validate","values","password","initialValues","rememberMe","onSubmit","handleSubmit","login","getFieldProps","errors","checked","responseText","isRegistration","setResponseTextAC","text","setRegistrationAC","Register","register","emailValue","setEmailValue","setPassword","confirmPassword","setConfirmPassword","errorPassowrd","setErrorPassword","clearError","placeholder","onKeyPress","length","err","requestRegister","SetPassword","token","useParams","password1","setPassword1","password2","setPassword2","localError","setLocalError","resetPasswordToken","Profile","newAvatarUrl","setNewAvatarUrl","newName","setNewName","useEffect","setAvatarTools","setNameTools","profile","content","title","trigger","src","size","icon","UserOutlined","Header","header","PATH","LOGIN","REGISTER","FORGOT","SET_PASSWORD","PROFILE","PACKS","CARDS","SortButtons","React","memo","margin","Up","Down","cardPacks","sortParams","undefined","setPacksAC","setSortParamsAC","getPacksTC","packs","DoubleRange","minRangeLimit","maxRangeLimit","minValue","maxValue","onValuesChange","min","setMin","max","setMax","onSliderValuesChange","useCallback","onMouseUpHandler","rangeBlock","range","draggableTrack","onAfterChange","tooltipVisible","Pack","pack","authUserId","row","cardsCount","updated","user_name","user_id","Packs","onCardsCountChange","onSortByName","onSortByCardsCount","filter","key","display","width","cellPadding","table","outline","cellWithButtons","map","p","pagination","cards","packUserId","setCardsAC","getCardsTC","Cards","setAnswer","setQuestion","onSortByGrade","onGradeRangeChange","onDeleteClick","deleteCardTC","onAddBtnClick","addCardTC","onUpdateClick","updateCardTC","c","App","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.de98c443.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/'\r\n}) //перед каждым pushем на gitHub менять baseURL с http://localhost:7542/2.0/ на https://neko-back.herokuapp.com/2.0/ !\r\n\r\nexport const authAPI = {\r\n    me() { // проверка на залогиненность\r\n        return instance.post<AuthUserData>(`auth/me`)\r\n    },\r\n    login(loginData: LoginDataType) {\r\n        return instance.post<AuthUserData>(`auth/login`, loginData)\r\n    },\r\n    register(regData: RegDataType) {\r\n        return instance.post<{ addedUser: {}, error?: string }>(`auth/register`, regData)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/me`)\r\n    },\r\n    updateUserData(newUserData: NewUserDataType) { // обновление name или аватарки юзера\r\n        return instance.put<{ updatedUser: {}, error?: string }>(`auth/me`, newUserData)\r\n    },\r\n    sendEmailToResetPass(email: string) { // отправляем емайл, если забыл пароль, со страницы Forgot\r\n        return instance.post<ResponseType>(`auth/forgot`, {\r\n            email,\r\n            from: \"test-front-admin <ai73a@yandex.by>\",\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\n                 password recovery link:\r\n                 <a href='http://marygrishchuk.github.io/cards-by-dream-team/#/set-new-password/$token$'>\r\n                 Reset Password</a></div>`\r\n        })\r\n    },\r\n    resetPassword(resetPassData: ResetPassDataType) { // отправка нового пароля со страницы Set New Password\r\n        return instance.post<ResponseType>(`auth/set-new-password`, resetPassData)\r\n    }\r\n}\r\n\r\nexport const packsAPI = {\r\n    getPacks(params: GetSortedPacksType = {}) { // получение колод\r\n        const {\r\n            nameToSearch = '', maxCardsCount = '', minCardsCount = '', page = '', pageCount = '',\r\n            sortDirection = '', propToSortBy = '', userId = ''\r\n        } = params\r\n        return instance.get<GetPackResponseType>(`cards/pack?packName=${nameToSearch}&sortPacks=${sortDirection}` +\r\n            `${propToSortBy}&min=${minCardsCount}&max=${maxCardsCount}&page=${page}&pageCount=${pageCount}&user_id=${userId}`)\r\n    },\r\n    addPack(name?: string, isPrivate?: boolean, deckCover?: string) {  // добавление (создание) колоды\r\n        return instance.post<AddPackResponseType>(`cards/pack`, {cardsPack: {name, private: isPrivate, deckCover}})\r\n    },\r\n    deletePack(packId: string) { //удаление колоды\r\n        return instance.delete<DeletePackResponseType>(`cards/pack?id=${packId}`)\r\n    },\r\n    updatePack(packId: string, name?: string) { //изменение колоды\r\n        return instance.put<UpdatePackResponseType>(`cards/pack`, {cardsPack: {_id: packId, name}})\r\n    },\r\n}\r\n\r\nexport const cardsAPI = {\r\n    getCards(packId: string, params: GetSortedCardsType = {}) { // получение карточек по id колоды\r\n        const {\r\n            question = '', answer = '', sortDirection = '', propToSortBy = '', minGrade = '',\r\n            maxGrade = '', page = '', pageCount = ''\r\n        } = params\r\n        return instance.get<GetCardsResponseType>(`cards/card?cardsPack_id=${packId}&cardQuestion=${question}` +\r\n            `&cardAnswer=${answer}&sortCards=${sortDirection}${propToSortBy}&min=${minGrade}&max=${maxGrade}` +\r\n            `&page=${page}&pageCount=${pageCount}\r\n`)\r\n    },\r\n    addCard(packId: string, params: NewCardDataType = {}) {  // добавление (создание) карточки\r\n        const {\r\n            question, answer, grade, shots, rating, answerImg, questionImg,\r\n            questionVideo, answerVideo, type\r\n        } = params\r\n        return instance.post(`cards/card`, {\r\n            card: {\r\n                cardsPack_id: packId, question, answer, grade, shots,\r\n                rating, answerImg, questionImg, questionVideo, answerVideo, type\r\n            }\r\n        })\r\n    },\r\n    deleteCard(cardId: string) { //удаление карточки\r\n        return instance.delete(`cards/card?id=${cardId}`)\r\n    },\r\n    updateCard(cardId: string, params: NewCardDataType = {}, comments?: string) { //изменение карточки\r\n        const {\r\n            question, answer, grade, shots, rating, answerImg, questionImg,\r\n            questionVideo, answerVideo, type\r\n        } = params\r\n        return instance.put(`cards/card`, {\r\n            card: {\r\n                _id: cardId, question, answer, grade, shots,\r\n                rating, answerImg, questionImg, questionVideo, answerVideo, type, comments\r\n            }\r\n        })\r\n    },\r\n}\r\n\r\n//types\r\nexport type LoginDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type RegDataType = {\r\n    email: string\r\n    password: string\r\n}\r\nexport type NewUserDataType = {\r\n    name: string\r\n    avatar?: string\r\n}\r\nexport type ResetPassDataType = {\r\n    password: string\r\n    resetPasswordToken: string | undefined\r\n}\r\nexport type AuthUserData = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\nexport type ResponseType = {\r\n    info: string\r\n    error?: string\r\n}\r\n\r\nexport type GetPackResponseType = {\r\n    cardPacks: Array<PackDataType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n\r\n}\r\n\r\nexport type PackDataType = {\r\n    _id: string\r\n    name: string\r\n    cardsCount: number\r\n    created: Date\r\n    updated: Date\r\n    user_id: string\r\n    user_name: string\r\n    deckCover: string\r\n    grade: number\r\n    path: string\r\n    private: boolean\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n}\r\n\r\nexport type NewPackType = {\r\n    name?: string\r\n    deckCover?: string\r\n    private?: boolean\r\n}\r\n\r\nexport type AddPackResponseType = {\r\n    newCardsPack: PackDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type DeletePackResponseType = {\r\n    deletedCardsPack: PackDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type UpdatePackResponseType = {\r\n    updatedCardsPack: PackDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport type GetCardsResponseType = {\r\n    cards: Array<CardDataType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\n\r\nexport type CardDataType = {\r\n    _id: string\r\n    question: string\r\n    answer: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: Date\r\n    updated: Date\r\n}\r\n\r\nexport enum SortDirections {\r\n    Up = 0,\r\n    Down = 1,\r\n}\r\n\r\nexport type GetSortedPacksType = {\r\n    nameToSearch?: string\r\n    minCardsCount?: number\r\n    maxCardsCount?: number\r\n    sortDirection?: SortDirections\r\n    propToSortBy?: \"name\" | \"cardsCount\"\r\n    page?: number\r\n    pageCount?: number\r\n    userId?: string\r\n\r\n}\r\nexport type GetSortedCardsType = {\r\n    question?: string\r\n    answer?: string\r\n    sortDirection?: SortDirections\r\n    propToSortBy?: \"grade\"\r\n    minGrade?: number\r\n    maxGrade?: number\r\n    page?: number\r\n    pageCount?: number\r\n}\r\n\r\nexport type NewCardDataType = {\r\n    question?: string\r\n    answer?: string\r\n    grade?: 0 | 1 | 2 | 3 | 4 | 5\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n    type?: \"card\"\r\n}\r\n","import {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../api/api\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - \"неактивный\"\r\n    error: '',\r\n    info: ''\r\n}\r\n\r\nexport const forgotReducer = (state: InitialForgotStateType = initialState, action: ActionsType): InitialForgotStateType => {\r\n    switch (action.type) {\r\n        case 'FORGOT/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'FORGOT/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                info: ''\r\n            }\r\n        }\r\n        case 'FORGOT/SET-INFO': {\r\n            return {\r\n                ...state,\r\n                info: action.info,\r\n                error: ''\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'FORGOT/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'FORGOT/SET-ERROR', error} as const)\r\nconst setInfoAC = (info: string) => ({type: 'FORGOT/SET-INFO', info} as const)\r\n\r\n//thunk\r\nexport const sendEmailToResetPassTC = (email: string) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.sendEmailToResetPass(email)\r\n        .then(res => {\r\n            dispatch(setInfoAC(res.data.info))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialForgotStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setInfoAC>\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {ChangeEvent, useState} from \"react\";\r\nimport style from \"./Forgot.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {InitialForgotStateType, sendEmailToResetPassTC} from \"./forgot-reducer\";\r\n\r\nexport const Forgot = () => {\r\n    const {requestStatus, error, info} = useSelector<AppRootStateType, InitialForgotStateType>(state => state.forgot)\r\n    const dispatch = useDispatch()\r\n\r\n    const [email, setEmail] = useState('')\r\n\r\n    const onEmailInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value.trim())\r\n    }\r\n    const onSendBtnClick = () => {\r\n        dispatch(sendEmailToResetPassTC(email))\r\n    }\r\n\r\n    return (\r\n        <div className={style.forgot}>\r\n            Please enter your email, and we'll send you a link to reset your password.\r\n            {requestStatus === 'loading'\r\n                ? <div style={{color: 'green'}}>loading...</div>\r\n                : info && <i>{info}</i>}\r\n            {error && <div style={{color: 'red'}}>{error}</div>}\r\n            <input type=\"email\" value={email} onChange={onEmailInput}/>\r\n            <button onClick={onSendBtnClick} disabled={requestStatus === 'loading'}>Send</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI, LoginDataType} from \"../../api/api\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\nconst initialState = {\r\n    _id: \"\",\r\n    email: \"\",\r\n    name: \"\",\r\n    avatar: \"\" as string | undefined,\r\n    error: \"\",\r\n    isLoggedIn: false,\r\n    requestStatus: 'idle' as RequestStatusType //изначально статус запроса - \"неактивный\"\r\n}\r\n\r\nexport const authReducer = (state: InitialAuthStateType = initialState, action: ActionsType): InitialAuthStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET-AUTH-USER-DATA': {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        case 'AUTH/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'AUTH/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setAuthUserDataAC = (_id: string, email: string, name: string, avatar: string | undefined, isLoggedIn: boolean) => ({\r\n    type: 'AUTH/SET-AUTH-USER-DATA',\r\n    payload: {_id, email, name, avatar, isLoggedIn}\r\n} as const)\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'AUTH/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\n\r\nconst setErrorAC = (error: string) => ({type: 'AUTH/SET-ERROR', error} as const)\r\n\r\n\r\n//thunks\r\nexport const loginTC = (loginData: LoginDataType) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.login(loginData)\r\n        .then((res) => {\r\n            dispatch(setAuthUserDataAC(res.data._id, res.data.email, res.data.name, res.data.avatar, true))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(() => {\r\n            dispatch(setAuthUserDataAC(\"\", \"\", \"\", \"\", false))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\nexport const getAuthUserDataTC = () => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.me()\r\n        .then(res => {\r\n            dispatch(setAuthUserDataAC(res.data._id, res.data.email, res.data.name, res.data.avatar, true))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\nexport const updateUserDataTC = (newData: {name?: string, avatar?: string}) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>, getState: () => AppRootStateType) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.updateUserData({name: newData.name || getState().auth.name, avatar: newData.avatar || getState().auth.avatar})\r\n        .then(res => {\r\n            dispatch(getAuthUserDataTC())\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialAuthStateType = typeof initialState\r\nexport type RequestStatusType = 'idle' | 'loading' | 'success' | 'failed'\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setAuthUserDataAC>\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React from \"react\";\r\nimport style from \"./Login.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {InitialAuthStateType, loginTC} from \"./auth-reducer\";\r\nimport {Simulate} from \"react-dom/test-utils\";\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {isLoggedIn, requestStatus, error} = useSelector<AppRootStateType, InitialAuthStateType>(state => state.auth)\r\n\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: \"Email is required\"\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: \"Password is required\"\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n\r\n                <div className={style.login}>\r\n                    {requestStatus === 'loading' && <div style={{color: 'green'}}>loading...</div>}\r\n                    {error && <div style={{color: 'red'}}>{error}</div>}\r\n                    <label>Email</label>\r\n                    <input type=\"email\" {...formik.getFieldProps(\"email\")}/>\r\n                    {formik.errors.email ? <div className={style.error}>{formik.errors.email}</div> : null}\r\n\r\n                    <label>Password</label>\r\n                    <input type=\"password\" {...formik.getFieldProps(\"password\")}/>\r\n                    {formik.errors.password ? <div className={style.error}>{formik.errors.password}</div> : null}\r\n\r\n                    <NavLink to=\"/forgot\" activeClassName={style.active}>Forgot password?</NavLink>\r\n\r\n                    <label>Remember Me<input type=\"checkbox\" {...formik.getFieldProps(\"rememberMe\")}\r\n                                             checked={formik.values.rememberMe}/></label>\r\n\r\n                    <button type={'submit'} color={'primary'}>Login</button>\r\n                    <NavLink to=\"/register\" activeClassName={style.active}>Registration</NavLink>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}","import {authAPI, RegDataType} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nconst initialState = {\r\n    responseText: '',\r\n    isRegistration: false\r\n}\r\n\r\nexport const registerReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        //cases\r\n        case \"REGISTER/SUCCESS_REGISTER\": {\r\n            return {...state, responseText: action.text}\r\n        }\r\n        case \"REGISTER/SET-REGISTRATION\": {\r\n            return {\r\n                ...state, isRegistration: action.isRegistration,\r\n                responseText: state.isRegistration === true ? '' : state.responseText\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\n// export const setSomethingAC = () => ({type: 'REGISTER/SET-SOMETHING'} as const)\r\nconst setResponseTextAC = (text: string) => ({type: 'REGISTER/SUCCESS_REGISTER', text} as const)\r\nconst setRegistrationAC = (isRegistration: boolean) => ({type: 'REGISTER/SET-REGISTRATION', isRegistration} as const)\r\n//thunk\r\n// export const doSomethingTC = () => (dispatch: ThunkDispatch) => {\r\n//\r\n// }\r\nexport const requestRegister = (regData: RegDataType) => (dispatch: ThunkCustomDispatch) => {\r\n    authAPI.register(regData)\r\n        .then((res) => {\r\n            dispatch(setResponseTextAC('success'))\r\n\r\n            setTimeout(() => {\r\n                dispatch(setRegistrationAC(true))\r\n                dispatch(setRegistrationAC(false))\r\n            }, 1000)\r\n\r\n        })\r\n        .catch((err) => {\r\n\r\n            dispatch(setResponseTextAC(err.response.data.error))\r\n            setTimeout(() => {\r\n                dispatch(setResponseTextAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n//types\r\nexport type InitialStateType = typeof initialState\r\n//объединение типов actionов:\r\n// export type ActionsType = ReturnType<typeof setSomethingAC>\r\ntype ActionsType = ReturnType<typeof setResponseTextAC> | ReturnType<typeof setRegistrationAC>\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {useState} from \"react\";\r\nimport style from \"./Register.module.css\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {requestRegister} from \"./register-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\nexport const Register = () => {\r\n    const text = useSelector<AppRootStateType, string>(state => state.register.responseText)\r\n    const isRegistration = useSelector<AppRootStateType, boolean>(state => state.register.isRegistration)\r\n\r\n    const dispatch = useDispatch()\r\n    const [emailValue, setEmailValue] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [errorPassowrd, setErrorPassword] = useState('')\r\n\r\n    const regData = {email: emailValue, password: password}\r\n    const setRegister = () => {\r\n        if (password === confirmPassword && password.length >= 8) {\r\n            dispatch(requestRegister(regData))\r\n        } else if (password !== confirmPassword) {\r\n            setErrorPassword(\"Passwords don't match.\")\r\n        } else if (password.length < 8 || confirmPassword.length < 8) {\r\n            setErrorPassword(\"Password must contain at least 8 characters.\")\r\n        }\r\n    }\r\n    const clearError = () => {\r\n        setErrorPassword('')\r\n    }\r\n\r\n\r\n    if (isRegistration) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.register}>\r\n            <h3>{text}</h3>\r\n            Register\r\n            <input type=\"email\" placeholder={'email'} onChange={(e) => setEmailValue(e.currentTarget.value)}\r\n                   onKeyPress={clearError}/>\r\n            <input type=\"password\" placeholder={'password'} onChange={(e) => setPassword(e.currentTarget.value)}\r\n                   onKeyPress={clearError}/>\r\n            <input type=\"password\" placeholder={'confirm password'} onKeyPress={clearError}\r\n                   onChange={(e) => setConfirmPassword(e.currentTarget.value)}/>\r\n            {errorPassowrd}\r\n            <button onClick={setRegister}>Register</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import {authAPI} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - \"неактивный\"\r\n    error: '',\r\n    info: ''\r\n}\r\n\r\nexport const setPasswordReducer = (state: SetPasswordStateType = initialState, action: ActionsType): SetPasswordStateType => {\r\n    switch (action.type) {\r\n        case 'SET-PASSWORD/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'SET-PASSWORD/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                info: ''\r\n            }\r\n        }\r\n        case 'SET-PASSWORD/SET-INFO': {\r\n            return {\r\n                ...state,\r\n                info: action.info,\r\n                error: ''\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'SET-PASSWORD/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'SET-PASSWORD/SET-ERROR', error} as const)\r\nconst setInfoAC = (info: string) => ({type: 'SET-PASSWORD/SET-INFO', info} as const)\r\n\r\n//thunk\r\nexport const resetPasswordTC = (password: string, resetPasswordToken: string | undefined) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.resetPassword({password, resetPasswordToken})\r\n        .then(res => {\r\n            dispatch(setInfoAC(res.data.info))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\n//types\r\nexport type SetPasswordStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setInfoAC>\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {ChangeEvent, useState} from \"react\";\r\nimport style from \"./SetPassword.module.css\";\r\nimport {NavLink, Redirect, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {resetPasswordTC, SetPasswordStateType} from \"./set-password-reducer\";\r\n\r\nexport const SetPassword = () => {\r\n    const {requestStatus, error, info} = useSelector<AppRootStateType, SetPasswordStateType>(state => state.setPassword)\r\n    const dispatch = useDispatch()\r\n    const {token} = useParams<{ token?: string }>()\r\n\r\n    const [password1, setPassword1] = useState('')\r\n    const [password2, setPassword2] = useState('')\r\n    const [localError, setLocalError] = useState('')\r\n\r\n    const onPassword1Input = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword1(e.currentTarget.value)\r\n    }\r\n    const onPassword2Input = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword2(e.currentTarget.value)\r\n    }\r\n    const onSubmit = () => {\r\n        if (password1 === password2 && password1.length >= 8) {\r\n            dispatch(resetPasswordTC(password1, token))\r\n        } else if (password1 !== password2) {\r\n            setLocalError(\"Passwords don't match.\")\r\n        } else if (password1.length < 8 || password2.length < 8) {\r\n            setLocalError(\"Password must contain at least 8 characters.\")\r\n        }\r\n    }\r\n    if (requestStatus === 'success') return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={style.setPassword}>\r\n            Please enter your new password in each field.\r\n            {requestStatus === 'loading'\r\n                ? <div style={{color: 'green'}}>loading...</div>\r\n                : info && <i>{info}</i>}\r\n            {error && <div style={{color: 'red'}}>{error}</div>}\r\n            {localError && <div style={{color: 'red'}}>{localError}</div>}\r\n            <input type=\"password\" value={password1} onChange={onPassword1Input}\r\n                   onKeyPress={() => setLocalError(\"\")}/>\r\n            <input type=\"password\" value={password2} onChange={onPassword2Input}\r\n                   onKeyPress={() => setLocalError(\"\")}/>\r\n            <button onClick={onSubmit} disabled={requestStatus === 'loading'}>Submit</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport style from \"./Profile.module.css\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {getAuthUserDataTC, InitialAuthStateType, logoutTC, updateUserDataTC} from \"../Login/auth-reducer\";\r\nimport {Avatar} from 'antd';\r\nimport {UserOutlined} from '@ant-design/icons';\r\nimport {Popover} from 'antd';\r\n\r\nexport const Profile = () => {\r\n    const {\r\n        email,\r\n        name,\r\n        error,\r\n        avatar,\r\n        isLoggedIn,\r\n        requestStatus\r\n    } = useSelector<AppRootStateType, InitialAuthStateType>(state => state.auth)\r\n    const dispatch = useDispatch()\r\n    const [newAvatarUrl, setNewAvatarUrl] = useState('')\r\n    const [newName, setNewName] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) return\r\n        dispatch(getAuthUserDataTC())\r\n    }, [])\r\n\r\n    const onLogoutClick = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    const onChangeAvatarClick = () => {\r\n        dispatch(updateUserDataTC({avatar: newAvatarUrl}))\r\n    }\r\n    const onChangeNameClick = () => {\r\n        dispatch(updateUserDataTC({name: newName}))\r\n    }\r\n\r\n    const setAvatarTools = (\r\n        <span>\r\n            <label>Enter avatar URL or Base64:\r\n                <input onChange={e => setNewAvatarUrl(e.currentTarget.value)}\r\n                       value={newAvatarUrl}/>\r\n            </label>\r\n            <button onClick={onChangeAvatarClick}>Set Avatar</button>\r\n        </span>\r\n    )\r\n\r\n    const setNameTools = (\r\n        <span>\r\n            <input onChange={e => setNewName(e.currentTarget.value)}\r\n                   value={newName}/>\r\n            <button onClick={onChangeNameClick}>Set name</button>\r\n        </span>\r\n    )\r\n\r\n    if (!isLoggedIn) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={style.profile}>\r\n            Welcome!\r\n            {requestStatus === 'loading' && <div style={{color: 'green'}}>loading...</div>}\r\n            {error && <div style={{color: 'red'}}>{error}</div>}\r\n            {avatar\r\n                ? <Popover content={setAvatarTools} title=\"Change avatar\" trigger=\"hover\">\r\n                    <Avatar src={avatar} size={64}/>\r\n                </Popover>\r\n                : <Popover content={setAvatarTools} title=\"Add avatar\" trigger=\"hover\">\r\n                    <Avatar size={64}\r\n                            icon={<UserOutlined/>}/>\r\n                </Popover>}\r\n            <Popover content={setNameTools} title=\"Change your name\" trigger=\"hover\">\r\n                <div>{name}</div>\r\n            </Popover>\r\n            <div>{email}</div>\r\n            <button onClick={onLogoutClick} disabled={requestStatus === 'loading'}>Log out</button>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport style from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../app/App\";\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div className={style.header}>\r\n            <NavLink to={PATH.LOGIN} activeClassName={style.active}>Login</NavLink>\r\n            <NavLink to={PATH.REGISTER} activeClassName={style.active}>Register</NavLink>\r\n            <NavLink to={PATH.FORGOT} activeClassName={style.active}>Forgot</NavLink>\r\n            <NavLink to={PATH.SET_PASSWORD} activeClassName={style.active}>Set New Password</NavLink>\r\n            <NavLink to={PATH.PROFILE} activeClassName={style.active}>Profile</NavLink>\r\n            <NavLink to={PATH.PACKS} activeClassName={style.active}>Packs</NavLink>\r\n            <NavLink to={PATH.CARDS} activeClassName={style.active}>Cards</NavLink>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport {SortDirections} from \"../../api/api\";\r\n\r\ntype SortButtonsProps = {\r\n    onClick: (sortDirection: SortDirections) => void //сообщаем родителю направление сортировки\r\n}\r\n\r\nexport const SortButtons = React.memo(({onClick}: SortButtonsProps) => {\r\n\r\n    const onUpClick = () => {\r\n        onClick(SortDirections.Up)\r\n    }\r\n    const onDownClick = () => {\r\n        onClick(SortDirections.Down)\r\n    }\r\n\r\n    return <span style={{margin: '0 5px'}}>\r\n        <div>\r\n            <button onClick={onUpClick}>↑</button>\r\n        </div>\r\n        <div>\r\n            <button onClick={onDownClick}>↓</button>\r\n        </div>\r\n    </span>\r\n})","import {GetSortedPacksType, PackDataType, packsAPI, SortDirections} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\nconst initialState = {\r\n    cardPacks: [] as Array<PackDataType>,\r\n    requestStatus: 'idle' as RequestStatusType,\r\n    error: \"\",\r\n    sortParams: {\r\n        nameToSearch: '',\r\n        minCardsCount: 0,\r\n        maxCardsCount: 100,\r\n        sortDirection: SortDirections.Down,\r\n        propToSortBy: undefined,\r\n        page: 1,\r\n        pageCount: 10,\r\n        userId: ''\r\n    } as GetSortedPacksType\r\n}\r\n\r\nexport const packsReducer = (state = initialState, action: ActionsType): PacksStateType => {\r\n    switch (action.type) {\r\n        case 'PACKS/SET-PACKS': {\r\n            return {\r\n                ...state,\r\n                cardPacks: action.cardPacks\r\n            }\r\n        }\r\n        case 'PACKS/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'PACKS/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        case 'PACKS/SET-SORT-PARAMS': {\r\n            return {\r\n                ...state,\r\n                sortParams: {...state.sortParams, ...action.sortParams}\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setPacksAC = (cardPacks: Array<PackDataType>) => ({\r\n    type: 'PACKS/SET-PACKS',\r\n    cardPacks\r\n} as const)\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'PACKS/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\n\r\nconst setErrorAC = (error: string) => ({type: 'PACKS/SET-ERROR', error} as const)\r\nconst setSortParamsAC = (sortParams: GetSortedPacksType) => ({type: 'PACKS/SET-SORT-PARAMS', sortParams} as const)\r\n\r\n//thunk\r\nexport const getPacksTC = (params: GetSortedPacksType = {}) => (dispatch: ThunkCustomDispatch, getState: () => AppRootStateType) => {\r\n    if (params) dispatch(setSortParamsAC(params))\r\n    const sortParams = getState().packs.sortParams\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.getPacks(sortParams)\r\n        .then(res => {\r\n            dispatch(setPacksAC(res.data.cardPacks))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const addPackTC = (name?: string, isPrivate?: boolean, deckCover?: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.addPack(name, isPrivate, deckCover)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const deletePackTC = (packId: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.deletePack(packId)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const updatePackTC = (packId: string, name?: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.updatePack(packId, name)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type PacksStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setPacksAC>\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setSortParamsAC>\r\n\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {useCallback, useState} from \"react\";\r\nimport {Slider} from 'antd';\r\nimport style from \"./DoubleRange.module.css\";\r\n\r\ntype DoubleRangePropsType = {\r\n    minRangeLimit?: number\r\n    maxRangeLimit?: number\r\n    minValue: number | undefined\r\n    maxValue: number | undefined\r\n    onValuesChange: ([minValue, maxValue]: Array<number | undefined>) => void\r\n}\r\nexport const DoubleRange = React.memo(({\r\n                                           minRangeLimit = 0,\r\n                                           maxRangeLimit = 100,\r\n                                           minValue,\r\n                                           maxValue,\r\n                                           onValuesChange\r\n                                       }: DoubleRangePropsType) => {\r\n\r\n    const [min, setMin] = useState(minValue || 0)\r\n    const [max, setMax] = useState(maxValue || 5)\r\n\r\n    const onSliderValuesChange = useCallback((values: Array<number>) => {\r\n        setMin(values[0])\r\n        setMax(values[1])\r\n    }, [setMin, setMax])\r\n\r\n    const onMouseUpHandler = useCallback(() => {\r\n        onValuesChange([min, max])\r\n    }, [min, max])\r\n\r\n    return <span className={style.rangeBlock}>\r\n        <Slider range={{draggableTrack: true}} value={[min, max]} min={minRangeLimit} max={maxRangeLimit}\r\n                onChange={onSliderValuesChange}\r\n                onAfterChange={onMouseUpHandler}\r\n                tooltipVisible\r\n        />\r\n    </span>\r\n})","import {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {PackDataType} from \"../../../api/api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {deletePackTC, updatePackTC} from \"../packs-reducer\";\r\nimport style from \"./Pack.module.css\";\r\n\r\ntype PackPropsType = {\r\n    pack: PackDataType\r\n    authUserId: string\r\n}\r\nexport const Pack = ({pack, authUserId}: PackPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onDeleteClick = () => {\r\n        dispatch(deletePackTC(pack._id))\r\n    }\r\n\r\n    const onUpdateClick = () => {\r\n        dispatch(updatePackTC(pack._id))\r\n    }\r\n\r\n    return <tr className={style.row}>\r\n        <td>{pack.name}</td>\r\n        <td>{pack.cardsCount}</td>\r\n        <td>{pack.updated}</td>\r\n        <td>{pack.user_name}</td>\r\n        <td>\r\n            <button onClick={onDeleteClick} disabled={pack.user_id !== authUserId}>Delete</button>\r\n            <button onClick={onUpdateClick} disabled={pack.user_id !== authUserId}>Update</button>\r\n            <NavLink to={`/cards/${pack._id}`} activeClassName={style.active}>Cards</NavLink>\r\n        </td>\r\n    </tr>\r\n}","import React, {ChangeEvent, KeyboardEvent, useCallback, useEffect} from \"react\";\r\nimport style from \"./Packs.module.css\";\r\nimport {SortButtons} from \"../../common/SortButtons/SortButtons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {getAuthUserDataTC} from \"../Login/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {addPackTC, getPacksTC} from \"./packs-reducer\";\r\nimport {GetSortedPacksType, PackDataType, SortDirections} from \"../../api/api\";\r\nimport {DoubleRange} from \"../../common/DoubleRange/DoubleRange\";\r\nimport {Pack} from \"./Pack/Pack\";\r\n\r\nexport const Packs = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const authUserId = useSelector<AppRootStateType, string>(state => state.auth._id)\r\n    const packs = useSelector<AppRootStateType, Array<PackDataType>>(state => state.packs.cardPacks)\r\n    const error = useSelector<AppRootStateType, string>(state => state.packs.error)\r\n    const {\r\n        minCardsCount,\r\n        maxCardsCount,\r\n        userId\r\n    } = useSelector<AppRootStateType, GetSortedPacksType>(state => state.packs.sortParams)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) dispatch(getPacksTC())\r\n        if (!isLoggedIn) dispatch(getAuthUserDataTC())\r\n    }, [])\r\n\r\n    const onPrivatePacksSearch = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.checked) {\r\n            dispatch(getPacksTC({userId: authUserId}))\r\n        } else {\r\n            dispatch(getPacksTC({userId: ''}))\r\n        }\r\n    }\r\n\r\n    const onSearchByName = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n\r\n        }\r\n    }\r\n    const onCardsCountChange = useCallback(([minValue, maxValue]: Array<number | undefined>) => {\r\n        dispatch(getPacksTC({minCardsCount: minValue, maxCardsCount: maxValue}))\r\n    }, [dispatch])\r\n\r\n    const onSortByName = useCallback((sortDirection: SortDirections) => {\r\n        dispatch(getPacksTC({sortDirection, propToSortBy: \"name\"}))\r\n    }, [dispatch])\r\n\r\n    const onSortByCardsCount = useCallback((sortDirection: SortDirections) => {\r\n        dispatch(getPacksTC({sortDirection, propToSortBy: \"cardsCount\"}))\r\n    }, [dispatch])\r\n\r\n    const onAddBtnClick = () => {\r\n        dispatch(addPackTC())\r\n    }\r\n\r\n    if (!isLoggedIn) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={style.packs}>\r\n            <h2>Packs</h2>\r\n            <div className={style.filter}>\r\n                {/*поиск приватных колод*/}\r\n                <label><input type=\"checkbox\" checked={!!userId} onChange={onPrivatePacksSearch}/> show my private packs</label>\r\n                {/*фильтр по названию колоды*/}\r\n                <label>Search packs by name: <input placeholder={'Press Enter to search'}\r\n                                                    onKeyPress={onSearchByName}/></label>\r\n\r\n                {/*двойной range для сортировки по кол-ву карточек в колоде*/}\r\n                <div style={{display: \"flex\"}}>Search packs by cards count:\r\n                <DoubleRange minValue={minCardsCount} maxValue={maxCardsCount} onValuesChange={onCardsCountChange}\r\n                             maxRangeLimit={200}/></div>\r\n            </div>\r\n            {error && <div style={{color: 'red', margin: '0 auto'}}>{error}</div>}\r\n            <table width=\"100%\" cellPadding=\"4\" className={style.table}>\r\n                <tr style={{outline: 'medium solid'}}>\r\n                    <th>\r\n                        <div className={style.cellWithButtons}>Name<SortButtons onClick={onSortByName}/></div>\r\n                    </th>\r\n                    <th>\r\n                        <div className={style.cellWithButtons}>Cards Count<SortButtons onClick={onSortByCardsCount}/>\r\n                        </div>\r\n                    </th>\r\n                    <th>Last Updated</th>\r\n                    <th>Created by</th>\r\n                    <th>\r\n                        <button onClick={onAddBtnClick}>Add</button>\r\n                    </th>\r\n                </tr>\r\n\r\n                {/*мапим колоды, чтобы они появились в таблице*/}\r\n                {packs.map(p => <Pack key={p._id} pack={p} authUserId={authUserId}/>)}\r\n            </table>\r\n            {/*Pagination*/}\r\n            <div className={style.pagination}>\r\n                Pagination\r\n                {/*номер текущей страницы (сначала вводим, а затем сетаем значение с сервера),*/}\r\n                <input type=\"number\"/>\r\n                {/*отмапленные кнопки для перехода на другие страницы и*/}\r\n                <button>кнопки для перехода на другие страницы</button>\r\n                {/*общее количество страниц*/}\r\n                <span>общее кол-во страниц</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {\r\n    CardDataType,\r\n    cardsAPI,\r\n    GetSortedCardsType, GetSortedPacksType, NewCardDataType, PackDataType, packsAPI,\r\n    SortDirections\r\n} from \"../../api/api\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {getPacksTC} from \"../Packs/packs-reducer\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - \"неактивный\"\r\n    error: '',\r\n    cards: [] as Array<CardDataType>,\r\n    packUserId: \"\",\r\n    sortParams: {\r\n        question: '',\r\n        answer: '',\r\n        sortDirection: SortDirections.Down,\r\n        propToSortBy: undefined,\r\n        minGrade: 0,\r\n        maxGrade: 5,\r\n        page: 1,\r\n        pageCount: 10\r\n    } as GetSortedCardsType\r\n}\r\n\r\nexport const cardsReducer = (state = initialState, action: ActionsType): CardsStateType => {\r\n    switch (action.type) {\r\n        case 'CARDS/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'CARDS/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        case 'CARDS/SET-SORT-PARAMS': {\r\n            return {\r\n                ...state,\r\n                sortParams: {...state.sortParams, ...action.sortParams}\r\n            }\r\n        }\r\n        case 'CARDS/SET-CARDS': {\r\n            return {\r\n                ...state,\r\n                cards: action.cards,\r\n                packUserId: action.packUserId\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'CARDS/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'CARDS/SET-ERROR', error} as const)\r\nconst setSortParamsAC = (sortParams: GetSortedCardsType) => ({type: 'CARDS/SET-SORT-PARAMS', sortParams} as const)\r\nconst setCardsAC = (cards: Array<CardDataType> , packUserId: string) => ({ type: 'CARDS/SET-CARDS', cards, packUserId } as const)\r\n\r\n\r\n\r\n\r\n//thunk\r\nexport const getCardsTC = (packId: string, params: GetSortedCardsType = {}) => (dispatch: ThunkCustommDispatch, getState: () => AppRootStateType) => {\r\n    if (params) dispatch(setSortParamsAC(params))\r\n    const sortParams = getState().cards.sortParams\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.getCards(packId, sortParams)\r\n        .then(res => {\r\n            dispatch(setCardsAC(res.data.cards, res.data.packUserId))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const addCardTC = (packId: string, params?: GetSortedCardsType) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.addCard(packId, params)\r\n        .then(() => {\r\n            dispatch(getCardsTC(packId, params))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const deleteCardTC = (packId: string, cardId: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.deleteCard(cardId)\r\n        .then(() => {\r\n            dispatch(getCardsTC(packId))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const updateCardTC = (packId:string, cardId: string, params: NewCardDataType = {}, comments?: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.updateCard(cardId, params, comments)\r\n        .then(() => {\r\n            dispatch(getCardsTC(packId))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type CardsStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setSortParamsAC>\r\n    | ReturnType<typeof setCardsAC>\r\n\r\n// тип диспатча:\r\ntype ThunkCustommDispatch = Dispatch<ActionsType>","import React, {KeyboardEvent, MouseEventHandler, useCallback, useEffect, useState} from \"react\";\r\nimport style from \"./Cards.module.css\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {SortButtons} from \"../../common/SortButtons/SortButtons\";\r\nimport {getAuthUserDataTC} from \"../Login/auth-reducer\";\r\nimport {CardDataType, GetSortedCardsType, PackDataType, SortDirections} from \"../../api/api\";\r\nimport {DoubleRange} from \"../../common/DoubleRange/DoubleRange\";\r\nimport {addCardTC, deleteCardTC, getCardsTC, updateCardTC} from \"./cards-reducer\";\r\n\r\n\r\nexport const Cards = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const authUserId = useSelector<AppRootStateType, string>(state => state.auth._id)\r\n    const cards = useSelector<AppRootStateType, Array<CardDataType>>(state => state.cards.cards)\r\n    const packUserId = useSelector<AppRootStateType, string>(state => state.cards.packUserId)\r\n    const {packId} = useParams<{ packId?: any }>()    //читаем id колоды из URL\r\n    const error = useSelector<AppRootStateType, string>(state => state.cards.error)\r\n    const {minGrade, maxGrade} = useSelector<AppRootStateType, GetSortedCardsType>(state => state.cards.sortParams)\r\n    const dispatch = useDispatch()\r\n\r\n    const [answer, setAnswer] = useState<string>(\"\")\r\n    const [question, setQuestion] = useState<string>(\"\")\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn && packId) dispatch(getCardsTC(packId))   //запрашиваем карточки, если залогинен и есть packId\r\n        if (!isLoggedIn) dispatch(getAuthUserDataTC())\r\n    }, [])\r\n\r\n    const onSortByGrade = useCallback((sortDirection: SortDirections) => {\r\n        dispatch(getCardsTC(packId, {sortDirection, propToSortBy: \"grade\"}))\r\n    }, [dispatch])\r\n\r\n    const onGradeRangeChange = useCallback(([minValue, maxValue]: Array<number | undefined>) => {\r\n        dispatch(getCardsTC(packId, {minGrade: minValue, maxGrade: maxValue}))\r\n    }, [dispatch])\r\n\r\n    const onSearchByQuestion = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            dispatch(getCardsTC(packId, {question: question}))\r\n        }\r\n    }\r\n    const onSearchByAnswer = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            dispatch(getCardsTC(packId, {answer: answer}))\r\n        }\r\n    }\r\n    const onDeleteClick = (cardId: string) => {\r\n        dispatch(deleteCardTC(packId, cardId))\r\n    }\r\n    const onAddBtnClick = (packId: string) => {\r\n        dispatch(addCardTC(packId))\r\n    }\r\n    const onUpdateClick = (cardId: string) => {\r\n        dispatch(updateCardTC(packId, cardId))\r\n    }\r\n\r\n\r\n    if (!isLoggedIn) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={style.cards}>\r\n            <h2>Cards</h2>\r\n            <div className={style.filter}>\r\n                {/*фильтр карточек по вопросу*/}\r\n                <label>Search cards by question: <input placeholder={'Press Enter to search'}\r\n                                                        onKeyPress={onSearchByQuestion}\r\n                                                        value={question}\r\n                                                        onChange={e => setQuestion(e.currentTarget.value)}/></label>\r\n                {/*фильтр карточек по ответу*/}\r\n                <label>Search cards by answer: <input placeholder={'Press Enter to search'}\r\n                                                      onKeyPress={onSearchByAnswer}\r\n                                                      value={answer}\r\n                                                      onChange={e => setAnswer(e.currentTarget.value)}/></label>\r\n                {/*двойной range для сортировки по оценкам (grade)*/}\r\n                <div style={{display: \"flex\"}}>Search cards by grade:\r\n                <DoubleRange minValue={minGrade} maxValue={maxGrade} onValuesChange={onGradeRangeChange}\r\n                             maxRangeLimit={5}/></div>\r\n            </div>\r\n            {error && <div style={{color: 'red', margin: '0 auto'}}>{error}</div>}\r\n            <table width=\"100%\" cellPadding=\"4\" className={style.table}>\r\n                <tr style={{outline: 'medium solid'}}>\r\n                    <th>Question</th>\r\n                    <th>Answer</th>\r\n                    <th>\r\n                        <div className={style.cellWithButtons}>Grade<SortButtons onClick={onSortByGrade}/></div>\r\n                    </th>\r\n                    <th>Last Updated</th>\r\n                    <th>URL</th>\r\n                    <th>\r\n                        <button onClick={() => {\r\n                            onAddBtnClick(packId)\r\n                        }} disabled={packUserId !== authUserId}>Add\r\n                        </button>\r\n                    </th>\r\n                </tr>\r\n                {/*мапим карточки, чтобы они появились в таблице*/}\r\n                {cards.map(c => <tr key={c._id}>\r\n                    <td>{c.question}</td>\r\n                    <td>{c.answer}</td>\r\n                    <td>{c.grade}</td>\r\n                    <td>{c.updated}</td>\r\n                    <td>string</td>\r\n                    <td>\r\n\r\n                        <button onClick={() => onDeleteClick(c._id)} disabled={packUserId !== authUserId}>Delete\r\n                        </button>\r\n                        <button onClick={() => onUpdateClick(c._id)} disabled={packUserId !== authUserId}>Update\r\n                        </button>\r\n                    </td>\r\n                </tr>)}\r\n\r\n            </table>\r\n            {/*Pagination*/}\r\n            <div className={style.pagination}>\r\n                Pagination\r\n                {/*номер текущей страницы (сначала вводим, а затем сетаем значение с сервера),*/}\r\n                <input type=\"number\"/>\r\n                {/*отмапленные кнопки для перехода на другие страницы и*/}\r\n                <button>кнопки для перехода на другие страницы</button>\r\n                {/*общее количество страниц*/}\r\n                <span>общее кол-во страниц</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Forgot} from \"../features/Forgot/Forgot\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Register} from \"../features/Register/Register\";\r\nimport {SetPassword} from \"../features/SetPassword/SetPassword\";\r\nimport {Profile} from \"../features/Profile/Profile\";\r\nimport {Header} from \"../features/Header/Header\";\r\nimport {Packs} from \"../features/Packs/Packs\";\r\nimport {Cards} from \"../features/Cards/Cards\";\r\n\r\nexport const PATH = {\r\n    LOGIN: \"/login\",\r\n    REGISTER: \"/register\",\r\n    FORGOT: \"/forgot\",\r\n    SET_PASSWORD: \"/set-new-password\",\r\n    PROFILE: \"/profile\",\r\n    PACKS: \"/packs\",\r\n    CARDS: \"/cards\",\r\n}\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header/>\r\n      <Switch>\r\n        <Route exact path={['/', `${PATH.LOGIN}`]} render={() => <Login/>}/>\r\n        <Route path={PATH.REGISTER} render={() => <Register/>}/>\r\n        <Route path={PATH.FORGOT} render={() => <Forgot/>}/>\r\n        <Route path={`${PATH.SET_PASSWORD}/:token?`} render={() => <SetPassword/>}/>\r\n        <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n        <Route path={PATH.PACKS} render={() => <Packs/>}/>\r\n        <Route path={`${PATH.CARDS}/:packId?`} render={() => <Cards/>}/>\r\n        <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n        <Redirect from={'*'} to={'/404'}/>\r\n\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    //\r\n}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        //cases\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\n// export const setSomethingAC = () => ({type: 'PROFILE/SET-SOMETHING'} as const)\r\n\r\n//thunk\r\n// export const doSomethingTC = () => (dispatch: ThunkDispatch) => {\r\n//\r\n// }\r\n\r\n//types\r\nexport type InitialStateType = typeof initialState\r\n//объединение типов actionов:\r\n// export type ActionsType = ReturnType<typeof setSomethingAC>\r\n// тип диспатча:\r\n// type ThunkDispatch = Dispatch<ReturnType<typeof setSomethingAC>>","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {registerReducer} from \"../features/Register/register-reducer\";\r\nimport {setPasswordReducer} from \"../features/SetPassword/set-password-reducer\";\r\nimport {profileReducer} from \"../features/Profile/profile-reducer\";\r\nimport {forgotReducer} from \"../features/Forgot/forgot-reducer\";\r\nimport {packsReducer} from \"../features/Packs/packs-reducer\";\r\nimport {cardsReducer} from \"../features/Cards/cards-reducer\";\r\n\r\n// комбайним редюсеры\r\nconst rootReducer = combineReducers({  //стейт\r\n    auth: authReducer,\r\n    register: registerReducer,\r\n    forgot: forgotReducer,\r\n    setPassword: setPasswordReducer,\r\n    profile: profileReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer\r\n})\r\n//создаем store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n//тип стейта\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// для вызова store из консоли\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__10VB5\",\"active\":\"Header_active__3B1Kt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packs\":\"Packs_packs__11aat\",\"filter\":\"Packs_filter__3-7jv\",\"table\":\"Packs_table__3gfqm\",\"cellWithButtons\":\"Packs_cellWithButtons__i3Ikn\",\"pagination\":\"Packs_pagination__3tqEx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2ck6i\",\"error\":\"Login_error__1oq8R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cards\":\"Cards_cards__1nz5C\",\"filter\":\"Cards_filter__3iNkp\",\"table\":\"Cards_table__39AGJ\",\"cellWithButtons\":\"Cards_cellWithButtons__1wX-M\",\"pagination\":\"Cards_pagination__34Qpn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgot\":\"Forgot_forgot__3iT7N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Register_register__298wP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setPassword\":\"SetPassword_setPassword__ji0HF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Pack_row__1vaZe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__OylV9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rangeBlock\":\"DoubleRange_rangeBlock__eFtuj\"};"],"sourceRoot":""}