{"version":3,"sources":["features/SetPassword/SetPassword.module.css","features/Packs/Pack/Pack.module.css","features/Profile/Profile.module.css","common/DoubleRange/DoubleRange.module.css","features/Cards/Card/Card.module.css","api/api.ts","features/Forgot/forgot-reducer.ts","features/Forgot/Forgot.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","features/Register/register-reducer.ts","features/Register/Register.tsx","features/SetPassword/set-password-reducer.ts","features/SetPassword/SetPassword.tsx","features/Profile/Profile.tsx","features/Header/Header.tsx","common/SortButtons/SortButtons.tsx","features/Packs/packs-reducer.ts","common/DoubleRange/DoubleRange.tsx","features/Packs/Pack/Pack.tsx","features/Paginator/Paginator.tsx","features/Packs/Packs.tsx","features/Cards/cards-reducer.ts","features/Cards/Card/Card.tsx","features/Cards/Cards.tsx","app/app-reducer.ts","app/App.tsx","reportWebVitals.ts","features/Profile/profile-reducer.ts","app/store.ts","index.tsx","features/Header/Header.module.css","features/Packs/Packs.module.css","features/Login/Login.module.css","features/Cards/Cards.module.css","features/Forgot/Forgot.module.css","features/Register/Register.module.css"],"names":["module","exports","SortDirections","instance","axios","create","withCredentials","baseURL","authAPI","post","loginData","regData","delete","newUserData","put","email","from","message","resetPassData","packsAPI","params","nameToSearch","maxCardsCount","minCardsCount","page","pageCount","sortDirection","propToSortBy","userId","get","name","isPrivate","deckCover","cardsPack","private","packId","_id","cardsAPI","question","answer","minGrade","maxGrade","grade","shots","rating","answerImg","questionImg","questionVideo","answerVideo","type","card","cardsPack_id","cardId","comments","initialState","requestStatus","error","info","setRequestStatusAC","Forgot","useSelector","state","forgot","dispatch","useDispatch","useState","setEmail","className","style","color","value","onChange","e","currentTarget","trim","onClick","then","res","data","catch","response","setErrorAC","sendEmailToResetPassTC","disabled","to","activeClassName","active","avatar","isLoggedIn","setAuthUserDataAC","payload","updateUserDataTC","newData","getState","auth","updatedUser","setTimeout","Login","formik","useFormik","validate","values","password","initialValues","rememberMe","onSubmit","PATH","PROFILE","handleSubmit","login","getFieldProps","errors","checked","responseText","isRegistration","setResponseTextAC","text","setRegistrationAC","Register","register","emailValue","setEmailValue","setPassword","confirmPassword","setConfirmPassword","errorPassowrd","setErrorPassword","clearError","placeholder","onKeyPress","length","err","requestRegister","SetPassword","token","useParams","password1","setPassword1","password2","setPassword2","localError","setLocalError","resetPasswordToken","Profile","Paragraph","Typography","newAvatarUrl","setNewAvatarUrl","setAvatarTools","profile","content","title","trigger","src","size","icon","UserOutlined","editable","newName","LOGIN","Header","header","REGISTER","FORGOT","SET_PASSWORD","PACKS","CARDS","SortButtons","React","memo","margin","Up","Down","cardPacks","cardPacksTotalCount","sortParams","undefined","setPacksAC","setSortParamsAC","getPacksTC","packs","DoubleRange","minRangeLimit","maxRangeLimit","minValue","maxValue","onValuesChange","min","setMin","max","setMax","onSliderValuesChange","useCallback","onMouseUpHandler","rangeBlock","range","draggableTrack","onAfterChange","tooltipVisible","Pack","pack","authUserId","row","cardsCount","updated","user_name","user_id","Paginator","props","showQuickJumper","current","total","pageSize","Packs","searchByName","setSearchByName","useEffect","onCardsCountChange","onSortByName","onSortByCardsCount","paginatorPage","filter","key","display","width","cellPadding","table","outline","cellWithButtons","map","p","pagination","cards","packUserId","cardsTotalCount","setCardsAC","getCardsTC","Card","deleteCardTC","updateCardTC","Cards","setAnswer","setQuestion","onSortByGrade","onGradeRangeChange","onAddBtnClick","addCardTC","c","status","isInitialized","setAppStatusAC","setAppErrorAC","setIsInitializedAC","App","app","antIcon","LoadingOutlined","fontSize","spin","exact","path","render","position","top","textAlign","indicator","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b295f0f6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"setPassword\":\"SetPassword_setPassword__ji0HF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Pack_row__1vaZe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__OylV9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rangeBlock\":\"DoubleRange_rangeBlock__eFtuj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Card_row__10igB\"};","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/'\r\n}) //перед каждым pushем на gitHub менять baseURL с http://localhost:7542/2.0/ на https://neko-back.herokuapp.com/2.0/ !\r\n\r\nexport const authAPI = {\r\n    me() { // проверка на залогиненность\r\n        return instance.post<AuthUserData>(`auth/me`)\r\n    },\r\n    login(loginData: LoginDataType) {\r\n        return instance.post<AuthUserData>(`auth/login`, loginData)\r\n    },\r\n    register(regData: RegDataType) {\r\n        return instance.post<{ addedUser: AuthUserData, error?: string }>(`auth/register`, regData)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/me`)\r\n    },\r\n    updateUserData(newUserData: NewUserDataType) { // обновление name или аватарки юзера\r\n        return instance.put<{ updatedUser: AuthUserData, error?: string }>(`auth/me`, newUserData)\r\n    },\r\n    sendEmailToResetPass(email: string) { // отправляем емайл, если забыл пароль, со страницы Forgot\r\n        return instance.post<ResponseType>(`auth/forgot`, {\r\n            email,\r\n            from: \"test-front-admin <ai73a@yandex.by>\",\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\n                 password recovery link:\r\n                 <a href='http://marygrishchuk.github.io/cards-by-dream-team/#/set-new-password/$token$'>\r\n                 Reset Password</a></div>`\r\n        })\r\n    },\r\n    resetPassword(resetPassData: ResetPassDataType) { // отправка нового пароля со страницы Set New Password\r\n        return instance.post<ResponseType>(`auth/set-new-password`, resetPassData)\r\n    }\r\n}\r\n\r\nexport const packsAPI = {\r\n    getPacks(params: GetSortedPacksType = {}) { // получение колод\r\n        const {\r\n            nameToSearch = '', maxCardsCount = '', minCardsCount = '', page = '', pageCount = '',\r\n            sortDirection = '', propToSortBy = '', userId = ''\r\n        } = params\r\n        return instance.get<GetPackResponseType>(`cards/pack?packName=${nameToSearch}&sortPacks=${sortDirection}` +\r\n            `${propToSortBy}&min=${minCardsCount}&max=${maxCardsCount}&page=${page}&pageCount=${pageCount}&user_id=${userId}`)\r\n    },\r\n    addPack(name?: string, isPrivate?: boolean, deckCover?: string) {  // добавление (создание) колоды\r\n        return instance.post<AddPackResponseType>(`cards/pack`, {cardsPack: {name, private: isPrivate, deckCover}})\r\n    },\r\n    deletePack(packId: string) { //удаление колоды\r\n        return instance.delete<DeletePackResponseType>(`cards/pack?id=${packId}`)\r\n    },\r\n    updatePack(packId: string, name?: string) { //изменение колоды\r\n        return instance.put<UpdatePackResponseType>(`cards/pack`, {cardsPack: {_id: packId, name}})\r\n    },\r\n}\r\n\r\nexport const cardsAPI = {\r\n    getCards(packId: string, params: GetSortedCardsType = {}) { // получение карточек по id колоды\r\n        const {\r\n            question = '', answer = '', sortDirection = '', propToSortBy = '', minGrade = '',\r\n            maxGrade = '', page = '', pageCount = ''\r\n        } = params\r\n        return instance.get<GetCardsResponseType>(`cards/card?cardsPack_id=${packId}&cardQuestion=${question}` +\r\n            `&cardAnswer=${answer}&sortCards=${sortDirection}${propToSortBy}&min=${minGrade}&max=${maxGrade}` +\r\n            `&page=${page}&pageCount=${pageCount}\r\n`)\r\n    },\r\n    addCard(packId: string, params: NewCardDataType = {}) {  // добавление (создание) карточки\r\n        const {\r\n            question, answer, grade, shots, rating, answerImg, questionImg,\r\n            questionVideo, answerVideo, type\r\n        } = params\r\n        return instance.post<AddCardResponseType>(`cards/card`, {\r\n            card: {\r\n                cardsPack_id: packId, question, answer, grade, shots,\r\n                rating, answerImg, questionImg, questionVideo, answerVideo, type\r\n            }\r\n        })\r\n    },\r\n    deleteCard(cardId: string) { //удаление карточки\r\n        return instance.delete<DeleteCardResponseType>(`cards/card?id=${cardId}`)\r\n    },\r\n    updateCard(cardId: string, params: NewCardDataType = {}, comments?: string) { //изменение карточки\r\n        const {\r\n            question, answer, grade, shots, rating, answerImg, questionImg,\r\n            questionVideo, answerVideo, type\r\n        } = params\r\n        return instance.put<UpdateCardResponseType>(`cards/card`, {\r\n            card: {\r\n                _id: cardId, question, answer, grade, shots,\r\n                rating, answerImg, questionImg, questionVideo, answerVideo, type, comments\r\n            }\r\n        })\r\n    },\r\n}\r\n\r\n//types\r\nexport type LoginDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type RegDataType = {\r\n    email: string\r\n    password: string\r\n}\r\nexport type NewUserDataType = {\r\n    name: string\r\n    avatar?: string\r\n}\r\nexport type ResetPassDataType = {\r\n    password: string\r\n    resetPasswordToken: string | undefined\r\n}\r\nexport type AuthUserData = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\nexport type ResponseType = {\r\n    info: string\r\n    error?: string\r\n}\r\n\r\nexport type GetPackResponseType = {\r\n    cardPacks: Array<PackDataType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n\r\n}\r\n\r\nexport type PackDataType = {\r\n    _id: string\r\n    name: string\r\n    cardsCount: number\r\n    created: Date\r\n    updated: Date\r\n    user_id: string\r\n    user_name: string\r\n    deckCover: string\r\n    grade: number\r\n    path: string\r\n    private: boolean\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n}\r\n\r\nexport type NewPackType = {\r\n    name?: string\r\n    deckCover?: string\r\n    private?: boolean\r\n}\r\n\r\nexport type AddPackResponseType = {\r\n    newCardsPack: PackDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type DeletePackResponseType = {\r\n    deletedCardsPack: PackDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type UpdatePackResponseType = {\r\n    updatedCardsPack: PackDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport type GetCardsResponseType = {\r\n    cards: Array<CardDataType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\n\r\nexport type CardDataType = {\r\n    _id: string\r\n    question: string\r\n    answer: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: Date\r\n    updated: Date\r\n    comments: string\r\n}\r\n\r\nexport enum SortDirections {\r\n    Up = 0,\r\n    Down = 1,\r\n}\r\n\r\nexport type GetSortedPacksType = {\r\n    nameToSearch?: string\r\n    minCardsCount?: number\r\n    maxCardsCount?: number\r\n    sortDirection?: SortDirections\r\n    propToSortBy?: \"name\" | \"cardsCount\"\r\n    page?: number\r\n    pageCount?: number\r\n    userId?: string\r\n\r\n}\r\nexport type GetSortedCardsType = {\r\n    question?: string\r\n    answer?: string\r\n    sortDirection?: SortDirections\r\n    propToSortBy?: \"grade\"\r\n    minGrade?: number\r\n    maxGrade?: number\r\n    page?: number\r\n    pageCount?: number\r\n}\r\n\r\nexport type NewCardDataType = {\r\n    question?: string\r\n    answer?: string\r\n    grade?: 0 | 1 | 2 | 3 | 4 | 5\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n    type?: \"card\"\r\n}\r\n\r\nexport type AddCardResponseType = {\r\n    newCard: CardDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type DeleteCardResponseType = {\r\n    deletedCard: CardDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\nexport type UpdateCardResponseType = {\r\n    updatedCard: CardDataType\r\n    token: string\r\n    tokenDeathTime: number\r\n}","import {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../api/api\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - \"неактивный\"\r\n    error: '',\r\n    info: ''\r\n}\r\n\r\nexport const forgotReducer = (state: InitialForgotStateType = initialState, action: ActionsType): InitialForgotStateType => {\r\n    switch (action.type) {\r\n        case 'FORGOT/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'FORGOT/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                info: ''\r\n            }\r\n        }\r\n        case 'FORGOT/SET-INFO': {\r\n            return {\r\n                ...state,\r\n                info: action.info,\r\n                error: ''\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'FORGOT/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'FORGOT/SET-ERROR', error} as const)\r\nconst setInfoAC = (info: string) => ({type: 'FORGOT/SET-INFO', info} as const)\r\n\r\n//thunk\r\nexport const sendEmailToResetPassTC = (email: string) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.sendEmailToResetPass(email)\r\n        .then(res => {\r\n            dispatch(setInfoAC(res.data.info))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialForgotStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setInfoAC>\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {ChangeEvent, useState} from \"react\";\r\nimport style from \"./Forgot.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {InitialForgotStateType, sendEmailToResetPassTC} from \"./forgot-reducer\";\r\n\r\nexport const Forgot = () => {\r\n    const {requestStatus, error, info} = useSelector<AppRootStateType, InitialForgotStateType>(state => state.forgot)\r\n    const dispatch = useDispatch()\r\n\r\n    const [email, setEmail] = useState('')\r\n\r\n    const onEmailInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value.trim())\r\n    }\r\n    const onSendBtnClick = () => {\r\n        dispatch(sendEmailToResetPassTC(email))\r\n    }\r\n\r\n    return (\r\n        <div className={style.forgot}>\r\n            Please enter your email, and we'll send you a link to reset your password.\r\n            {requestStatus === 'loading'\r\n                ? <div style={{color: 'green'}}>loading...</div>\r\n                : info && <i>{info}</i>}\r\n            {error && <div style={{color: 'red'}}>{error}</div>}\r\n            <input type=\"email\" value={email} onChange={onEmailInput}/>\r\n            <button onClick={onSendBtnClick} disabled={requestStatus === 'loading'}>Send</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI, LoginDataType} from \"../../api/api\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\nconst initialState = {\r\n    _id: \"\",\r\n    email: \"\",\r\n    name: \"\",\r\n    avatar: \"\" as string | undefined,\r\n    error: \"\",\r\n    isLoggedIn: false,\r\n    requestStatus: 'idle' as RequestStatusType //изначально статус запроса - \"неактивный\"\r\n}\r\n\r\nexport const authReducer = (state: InitialAuthStateType = initialState, action: ActionsType): InitialAuthStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET-AUTH-USER-DATA': {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        case 'AUTH/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'AUTH/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nexport const setAuthUserDataAC = (_id: string, email: string, name: string, avatar: string | undefined, isLoggedIn: boolean) => ({\r\n    type: 'AUTH/SET-AUTH-USER-DATA',\r\n    payload: {_id, email, name, avatar, isLoggedIn}\r\n} as const)\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'AUTH/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\n\r\nconst setErrorAC = (error: string) => ({type: 'AUTH/SET-ERROR', error} as const)\r\n\r\n\r\n//thunks\r\nexport const loginTC = (loginData: LoginDataType) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.login(loginData)\r\n        .then((res) => {\r\n            dispatch(setAuthUserDataAC(res.data._id, res.data.email, res.data.name, res.data.avatar, true))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(() => {\r\n            dispatch(setAuthUserDataAC(\"\", \"\", \"\", \"\", false))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\nexport const updateUserDataTC = (newData: { name?: string, avatar?: string }) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>,\r\n                                                                                  getState: () => AppRootStateType) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.updateUserData({\r\n        name: newData.name || getState().auth.name,\r\n        avatar: newData.avatar || getState().auth.avatar\r\n    })\r\n        .then(res => {\r\n            dispatch(setAuthUserDataAC(res.data.updatedUser._id, res.data.updatedUser.email,\r\n                res.data.updatedUser.name, res.data.updatedUser.avatar, getState().auth.isLoggedIn))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialAuthStateType = typeof initialState\r\nexport type RequestStatusType = 'idle' | 'loading' | 'success' | 'failed'\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setAuthUserDataAC>\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React from \"react\";\r\nimport style from \"./Login.module.css\"\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {InitialAuthStateType, loginTC} from \"./auth-reducer\";\r\nimport {PATH} from \"../../app/App\";\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {isLoggedIn, requestStatus, error} = useSelector<AppRootStateType, InitialAuthStateType>(state => state.auth)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: \"Email is required\"\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: \"Password is required\"\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n\r\n                <div className={style.login}>\r\n                    {requestStatus === 'loading' && <div style={{color: 'green'}}>loading...</div>}\r\n                    {error && <div style={{color: 'red'}}>{error}</div>}\r\n                    <label>Email</label>\r\n                    <input type=\"email\" {...formik.getFieldProps(\"email\")}/>\r\n                    {formik.errors.email ? <div className={style.error}>{formik.errors.email}</div> : null}\r\n\r\n                    <label>Password</label>\r\n                    <input type=\"password\" {...formik.getFieldProps(\"password\")}/>\r\n                    {formik.errors.password ? <div className={style.error}>{formik.errors.password}</div> : null}\r\n\r\n                    <NavLink to=\"/forgot\" activeClassName={style.active}>Forgot password?</NavLink>\r\n\r\n                    <label>Remember Me<input type=\"checkbox\" {...formik.getFieldProps(\"rememberMe\")}\r\n                                             checked={formik.values.rememberMe}/></label>\r\n\r\n                    <button type={'submit'} color={'primary'}>Login</button>\r\n                    <NavLink to=\"/register\" activeClassName={style.active}>Registration</NavLink>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}","import {authAPI, RegDataType} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nconst initialState = {\r\n    responseText: '',\r\n    isRegistration: false\r\n}\r\n\r\nexport const registerReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        //cases\r\n        case \"REGISTER/SUCCESS_REGISTER\": {\r\n            return {...state, responseText: action.text}\r\n        }\r\n        case \"REGISTER/SET-REGISTRATION\": {\r\n            return {\r\n                ...state, isRegistration: action.isRegistration,\r\n                responseText: state.isRegistration === true ? '' : state.responseText\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\n// export const setSomethingAC = () => ({type: 'REGISTER/SET-SOMETHING'} as const)\r\nconst setResponseTextAC = (text: string) => ({type: 'REGISTER/SUCCESS_REGISTER', text} as const)\r\nconst setRegistrationAC = (isRegistration: boolean) => ({type: 'REGISTER/SET-REGISTRATION', isRegistration} as const)\r\n//thunk\r\n// export const doSomethingTC = () => (dispatch: ThunkDispatch) => {\r\n//\r\n// }\r\nexport const requestRegister = (regData: RegDataType) => (dispatch: ThunkCustomDispatch) => {\r\n    authAPI.register(regData)\r\n        .then((res) => {\r\n            dispatch(setResponseTextAC('success'))\r\n\r\n            setTimeout(() => {\r\n                dispatch(setRegistrationAC(true))\r\n                dispatch(setRegistrationAC(false))\r\n            }, 1000)\r\n\r\n        })\r\n        .catch((err) => {\r\n\r\n            dispatch(setResponseTextAC(err.response.data.error))\r\n            setTimeout(() => {\r\n                dispatch(setResponseTextAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n//types\r\nexport type InitialStateType = typeof initialState\r\n//объединение типов actionов:\r\n// export type ActionsType = ReturnType<typeof setSomethingAC>\r\ntype ActionsType = ReturnType<typeof setResponseTextAC> | ReturnType<typeof setRegistrationAC>\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {useState} from \"react\";\r\nimport style from \"./Register.module.css\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {requestRegister} from \"./register-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\nexport const Register = () => {\r\n    const text = useSelector<AppRootStateType, string>(state => state.register.responseText)\r\n    const isRegistration = useSelector<AppRootStateType, boolean>(state => state.register.isRegistration)\r\n\r\n    const dispatch = useDispatch()\r\n    const [emailValue, setEmailValue] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [errorPassowrd, setErrorPassword] = useState('')\r\n\r\n    const regData = {email: emailValue, password: password}\r\n    const setRegister = () => {\r\n        if (password === confirmPassword && password.length >= 8) {\r\n            dispatch(requestRegister(regData))\r\n        } else if (password !== confirmPassword) {\r\n            setErrorPassword(\"Passwords don't match.\")\r\n        } else if (password.length < 8 || confirmPassword.length < 8) {\r\n            setErrorPassword(\"Password must contain at least 8 characters.\")\r\n        }\r\n    }\r\n    const clearError = () => {\r\n        setErrorPassword('')\r\n    }\r\n\r\n\r\n    if (isRegistration) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.register}>\r\n            <h3>{text}</h3>\r\n            Register\r\n            <input type=\"email\" placeholder={'email'} onChange={(e) => setEmailValue(e.currentTarget.value)}\r\n                   onKeyPress={clearError}/>\r\n            <input type=\"password\" placeholder={'password'} onChange={(e) => setPassword(e.currentTarget.value)}\r\n                   onKeyPress={clearError}/>\r\n            <input type=\"password\" placeholder={'confirm password'} onKeyPress={clearError}\r\n                   onChange={(e) => setConfirmPassword(e.currentTarget.value)}/>\r\n            {errorPassowrd}\r\n            <button onClick={setRegister}>Register</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import {authAPI} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - \"неактивный\"\r\n    error: '',\r\n    info: ''\r\n}\r\n\r\nexport const setPasswordReducer = (state: SetPasswordStateType = initialState, action: ActionsType): SetPasswordStateType => {\r\n    switch (action.type) {\r\n        case 'SET-PASSWORD/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'SET-PASSWORD/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                info: ''\r\n            }\r\n        }\r\n        case 'SET-PASSWORD/SET-INFO': {\r\n            return {\r\n                ...state,\r\n                info: action.info,\r\n                error: ''\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'SET-PASSWORD/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'SET-PASSWORD/SET-ERROR', error} as const)\r\nconst setInfoAC = (info: string) => ({type: 'SET-PASSWORD/SET-INFO', info} as const)\r\n\r\n//thunk\r\nexport const resetPasswordTC = (password: string, resetPasswordToken: string | undefined) => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    authAPI.resetPassword({password, resetPasswordToken})\r\n        .then(res => {\r\n            dispatch(setInfoAC(res.data.info))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setErrorAC(''))\r\n            }, 3000)\r\n        })\r\n}\r\n\r\n//types\r\nexport type SetPasswordStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setInfoAC>\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {ChangeEvent, useState} from \"react\";\r\nimport style from \"./SetPassword.module.css\";\r\nimport {NavLink, Redirect, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {resetPasswordTC, SetPasswordStateType} from \"./set-password-reducer\";\r\n\r\nexport const SetPassword = () => {\r\n    const {requestStatus, error, info} = useSelector<AppRootStateType, SetPasswordStateType>(state => state.setPassword)\r\n    const dispatch = useDispatch()\r\n    const {token} = useParams<{ token?: string }>()\r\n\r\n    const [password1, setPassword1] = useState('')\r\n    const [password2, setPassword2] = useState('')\r\n    const [localError, setLocalError] = useState('')\r\n\r\n    const onPassword1Input = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword1(e.currentTarget.value)\r\n    }\r\n    const onPassword2Input = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword2(e.currentTarget.value)\r\n    }\r\n    const onSubmit = () => {\r\n        if (password1 === password2 && password1.length >= 8) {\r\n            dispatch(resetPasswordTC(password1, token))\r\n        } else if (password1 !== password2) {\r\n            setLocalError(\"Passwords don't match.\")\r\n        } else if (password1.length < 8 || password2.length < 8) {\r\n            setLocalError(\"Password must contain at least 8 characters.\")\r\n        }\r\n    }\r\n    if (requestStatus === 'success') return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={style.setPassword}>\r\n            Please enter your new password in each field.\r\n            {requestStatus === 'loading'\r\n                ? <div style={{color: 'green'}}>loading...</div>\r\n                : info && <i>{info}</i>}\r\n            {error && <div style={{color: 'red'}}>{error}</div>}\r\n            {localError && <div style={{color: 'red'}}>{localError}</div>}\r\n            <input type=\"password\" value={password1} onChange={onPassword1Input}\r\n                   onKeyPress={() => setLocalError(\"\")}/>\r\n            <input type=\"password\" value={password2} onChange={onPassword2Input}\r\n                   onKeyPress={() => setLocalError(\"\")}/>\r\n            <button onClick={onSubmit} disabled={requestStatus === 'loading'}>Submit</button>\r\n            <NavLink to=\"/login\" activeClassName={style.active}>Log in</NavLink>\r\n        </div>\r\n    );\r\n}","import React, {useState} from \"react\";\r\nimport style from \"./Profile.module.css\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {InitialAuthStateType, logoutTC, updateUserDataTC} from \"../Login/auth-reducer\";\r\nimport {Avatar, Popover} from 'antd';\r\nimport {UserOutlined} from '@ant-design/icons';\r\nimport { Typography } from 'antd';\r\nimport {PATH} from \"../../app/App\";\r\n\r\nexport const Profile = () => {\r\n    const {\r\n        email,\r\n        name,\r\n        error,\r\n        avatar,\r\n        isLoggedIn,\r\n        requestStatus\r\n    } = useSelector<AppRootStateType, InitialAuthStateType>(state => state.auth)\r\n    const dispatch = useDispatch()\r\n    const { Paragraph } = Typography;\r\n    const [newAvatarUrl, setNewAvatarUrl] = useState('')\r\n\r\n    const onLogoutClick = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    const onChangeAvatarClick = () => {\r\n        dispatch(updateUserDataTC({avatar: newAvatarUrl}))\r\n    }\r\n    const onNewNameSubmit = (newName: string) => {\r\n        dispatch(updateUserDataTC({name: newName}))\r\n    }\r\n\r\n    const setAvatarTools = (\r\n        <span>\r\n            <label>Enter avatar URL or Base64:\r\n                <input onChange={e => setNewAvatarUrl(e.currentTarget.value)}\r\n                       value={newAvatarUrl}/>\r\n            </label>\r\n            <button onClick={onChangeAvatarClick}>Set Avatar</button>\r\n        </span>\r\n    )\r\n\r\n    if (!isLoggedIn) return <Redirect to={PATH.LOGIN}/>\r\n\r\n    return (\r\n        <div className={style.profile}>\r\n            Welcome!\r\n            {requestStatus === 'loading' && <div style={{color: 'green'}}>loading...</div>}\r\n            {error && <div style={{color: 'red'}}>{error}</div>}\r\n            {avatar\r\n                ? <Popover content={setAvatarTools} title=\"Change avatar\" trigger=\"hover\">\r\n                    <Avatar src={avatar} size={64}/>\r\n                </Popover>\r\n                : <Popover content={setAvatarTools} title=\"Add avatar\" trigger=\"hover\">\r\n                    <Avatar size={64}\r\n                            icon={<UserOutlined/>}/>\r\n                </Popover>}\r\n            <Paragraph editable={{ onChange: onNewNameSubmit }}>{name}</Paragraph>\r\n            <div>{email}</div>\r\n            <button onClick={onLogoutClick} disabled={requestStatus === 'loading'}>Log out</button>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport style from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../app/App\";\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div className={style.header}>\r\n            <NavLink to={PATH.LOGIN} activeClassName={style.active}>Login</NavLink>\r\n            <NavLink to={PATH.REGISTER} activeClassName={style.active}>Register</NavLink>\r\n            <NavLink to={PATH.FORGOT} activeClassName={style.active}>Forgot</NavLink>\r\n            <NavLink to={PATH.SET_PASSWORD} activeClassName={style.active}>Set New Password</NavLink>\r\n            <NavLink to={PATH.PROFILE} activeClassName={style.active}>Profile</NavLink>\r\n            <NavLink to={PATH.PACKS} activeClassName={style.active}>Packs</NavLink>\r\n            <NavLink to={PATH.CARDS} activeClassName={style.active}>Cards</NavLink>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport {SortDirections} from \"../../api/api\";\r\n\r\ntype SortButtonsProps = {\r\n    onClick: (sortDirection: SortDirections) => void //сообщаем родителю направление сортировки\r\n}\r\n\r\nexport const SortButtons = React.memo(({onClick}: SortButtonsProps) => {\r\n\r\n    const onUpClick = () => {\r\n        onClick(SortDirections.Up)\r\n    }\r\n    const onDownClick = () => {\r\n        onClick(SortDirections.Down)\r\n    }\r\n\r\n    return <span style={{margin: '0 5px'}}>\r\n        <div>\r\n            <button onClick={onUpClick}>↑</button>\r\n        </div>\r\n        <div>\r\n            <button onClick={onDownClick}>↓</button>\r\n        </div>\r\n    </span>\r\n})","import {GetSortedPacksType, PackDataType, packsAPI, SortDirections} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\n\r\nconst initialState = {\r\n    cardPacks: [] as Array<PackDataType>,\r\n    requestStatus: 'idle' as RequestStatusType,\r\n    error: \"\",\r\n    cardPacksTotalCount: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    sortParams: {\r\n        nameToSearch: '',\r\n        minCardsCount: 0,\r\n        maxCardsCount: 100,\r\n        sortDirection: SortDirections.Down,\r\n        propToSortBy: undefined,\r\n        page: 1,\r\n        pageCount: 10,\r\n        userId: ''\r\n    } as GetSortedPacksType\r\n}\r\n\r\nexport const packsReducer = (state = initialState, action: ActionsType): PacksStateType => {\r\n    switch (action.type) {\r\n        case 'PACKS/SET-PACKS': {\r\n            return {\r\n                ...state,\r\n                cardPacks: action.cardPacks,\r\n                cardPacksTotalCount: action.cardPacksTotalCount,\r\n                page: action.page,\r\n                pageCount: action.pageCount\r\n            }\r\n        }\r\n        case 'PACKS/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'PACKS/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        case 'PACKS/SET-SORT-PARAMS': {\r\n            return {\r\n                ...state,\r\n                sortParams: {...state.sortParams, ...action.sortParams}\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setPacksAC = (cardPacks: Array<PackDataType>, cardPacksTotalCount: number, page: number, pageCount: number) => ({\r\n    type: 'PACKS/SET-PACKS',\r\n    cardPacks, cardPacksTotalCount,\r\n    page, pageCount\r\n} as const)\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'PACKS/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\n\r\nconst setErrorAC = (error: string) => ({type: 'PACKS/SET-ERROR', error} as const)\r\nconst setSortParamsAC = (sortParams: GetSortedPacksType) => ({type: 'PACKS/SET-SORT-PARAMS', sortParams} as const)\r\n\r\n\r\n//thunk\r\nexport const getPacksTC = (params: GetSortedPacksType = {}) => (dispatch: ThunkCustomDispatch, getState: () => AppRootStateType) => {\r\n    if (params) dispatch(setSortParamsAC(params))\r\n    const sortParams = getState().packs.sortParams\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.getPacks(sortParams)\r\n        .then(res => {\r\n            dispatch(setPacksAC(res.data.cardPacks, res.data.cardPacksTotalCount, res.data.page, res.data.pageCount))\r\n            dispatch(setRequestStatusAC('success'))\r\n\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const addPackTC = (name?: string, isPrivate?: boolean, deckCover?: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.addPack(name, isPrivate, deckCover)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const deletePackTC = (packId: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.deletePack(packId)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const updatePackTC = (packId: string, name?: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    packsAPI.updatePack(packId, name)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type PacksStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setPacksAC>\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setSortParamsAC>\r\n\r\n\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React, {useCallback, useState} from \"react\";\r\nimport {Slider} from 'antd';\r\nimport style from \"./DoubleRange.module.css\";\r\n\r\ntype DoubleRangePropsType = {\r\n    minRangeLimit?: number\r\n    maxRangeLimit?: number\r\n    minValue: number | undefined\r\n    maxValue: number | undefined\r\n    onValuesChange: ([minValue, maxValue]: Array<number | undefined>) => void\r\n}\r\nexport const DoubleRange = React.memo(({\r\n                                           minRangeLimit = 0,\r\n                                           maxRangeLimit = 100,\r\n                                           minValue,\r\n                                           maxValue,\r\n                                           onValuesChange\r\n                                       }: DoubleRangePropsType) => {\r\n\r\n    const [min, setMin] = useState(minValue || 0)\r\n    const [max, setMax] = useState(maxValue || 5)\r\n\r\n    const onSliderValuesChange = useCallback((values: Array<number>) => {\r\n        setMin(values[0])\r\n        setMax(values[1])\r\n    }, [setMin, setMax])\r\n\r\n    const onMouseUpHandler = useCallback(() => {\r\n        onValuesChange([min, max])\r\n    }, [onValuesChange, min, max])\r\n\r\n    return <span className={style.rangeBlock}>\r\n        <Slider range={{draggableTrack: true}} value={[min, max]} min={minRangeLimit} max={maxRangeLimit}\r\n                onChange={onSliderValuesChange}\r\n                onAfterChange={onMouseUpHandler}\r\n                tooltipVisible\r\n        />\r\n    </span>\r\n})","import {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {PackDataType} from \"../../../api/api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {deletePackTC, updatePackTC} from \"../packs-reducer\";\r\nimport style from \"./Pack.module.css\";\r\n\r\ntype PackPropsType = {\r\n    pack: PackDataType\r\n    authUserId: string\r\n}\r\nexport const Pack = ({pack, authUserId}: PackPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onDeleteClick = () => {\r\n        dispatch(deletePackTC(pack._id))\r\n    }\r\n\r\n    const onUpdateClick = () => {\r\n        dispatch(updatePackTC(pack._id))\r\n    }\r\n\r\n    return <tr className={style.row}>\r\n        <td>{pack.name}</td>\r\n        <td>{pack.cardsCount}</td>\r\n        <td>{pack.updated}</td>\r\n        <td>{pack.user_name}</td>\r\n        <td>\r\n            <button onClick={onDeleteClick} disabled={pack.user_id !== authUserId}>Delete</button>\r\n            <button onClick={onUpdateClick} disabled={pack.user_id !== authUserId}>Update</button>\r\n            <NavLink to={`/cards/${pack._id}`} activeClassName={style.active}>Cards</NavLink>\r\n        </td>\r\n    </tr>\r\n}","import {Pagination} from 'antd';\r\nimport React from 'react';\r\n\r\ntype PaginatorType = {\r\n    onChange: (page: number, pageCount: number | undefined, packId?: string) => void\r\n    current: number\r\n    total: number\r\n    pageCount: number\r\n}\r\n\r\nexport const Paginator = (props: PaginatorType) => {\r\n\r\n    return <div>\r\n        <Pagination showQuickJumper current={props.current} total={props.total} onChange={props.onChange}\r\n                    pageSize={props.pageCount}/>\r\n    </div>\r\n\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useEffect, useState} from \"react\";\r\nimport style from \"./Packs.module.css\";\r\nimport {SortButtons} from \"../../common/SortButtons/SortButtons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {addPackTC, getPacksTC, PacksStateType} from \"./packs-reducer\";\r\nimport {GetSortedPacksType, SortDirections} from \"../../api/api\";\r\nimport {DoubleRange} from \"../../common/DoubleRange/DoubleRange\";\r\nimport {Pack} from \"./Pack/Pack\";\r\nimport {Paginator} from \"../Paginator/Paginator\";\r\nimport {PATH} from \"../../app/App\";\r\n\r\nexport const Packs = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const authUserId = useSelector<AppRootStateType, string>(state => state.auth._id)\r\n    const error = useSelector<AppRootStateType, string>(state => state.packs.error)\r\n    const {\r\n        cardPacksTotalCount,\r\n        page,\r\n        cardPacks,\r\n        pageCount\r\n    } = useSelector<AppRootStateType, PacksStateType>(state => state.packs)\r\n\r\n    const {\r\n        minCardsCount,\r\n        maxCardsCount,\r\n        userId\r\n    } = useSelector<AppRootStateType, GetSortedPacksType>(state => state.packs.sortParams)\r\n    const dispatch = useDispatch()\r\n\r\n    const [searchByName, setSearchByName] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) dispatch(getPacksTC())\r\n    }, [])\r\n\r\n    const onPrivatePacksSearch = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.checked) {\r\n            dispatch(getPacksTC({userId: authUserId}))\r\n        } else {\r\n            dispatch(getPacksTC({userId: ''}))\r\n        }\r\n    }\r\n\r\n    const onSearchByName = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            dispatch(getPacksTC({nameToSearch: searchByName}))\r\n        }\r\n    }\r\n    const onCardsCountChange = useCallback(([minValue, maxValue]: Array<number | undefined>) => {\r\n        dispatch(getPacksTC({minCardsCount: minValue, maxCardsCount: maxValue}))\r\n    }, [dispatch])\r\n\r\n    const onSortByName = useCallback((sortDirection: SortDirections) => {\r\n        dispatch(getPacksTC({sortDirection, propToSortBy: \"name\"}))\r\n    }, [dispatch])\r\n\r\n    const onSortByCardsCount = useCallback((sortDirection: SortDirections) => {\r\n        dispatch(getPacksTC({sortDirection, propToSortBy: \"cardsCount\"}))\r\n    }, [dispatch])\r\n\r\n    const onAddBtnClick = () => {\r\n        dispatch(addPackTC())\r\n    }\r\n\r\n    const paginatorPage = useCallback((page: number, pageCount: number | undefined) => {\r\n        dispatch(getPacksTC({page, pageCount}))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) return <Redirect to={PATH.LOGIN}/>\r\n\r\n    return (\r\n        <div className={style.packs}>\r\n            <h2>Packs</h2>\r\n            <div className={style.filter}>\r\n                {/*поиск приватных колод*/}\r\n                <label><input type=\"checkbox\" checked={!!userId} onChange={onPrivatePacksSearch}/>\r\n                    show my private packs</label>\r\n                {/*фильтр по названию колоды*/}\r\n                <label>Search packs by name: <input placeholder={'Press Enter to search'}\r\n                                                    onKeyPress={onSearchByName}\r\n                                                    value={searchByName}\r\n                                                    onChange={e => setSearchByName(e.currentTarget.value)}\r\n                /></label>\r\n\r\n                {/*двойной range для сортировки по кол-ву карточек в колоде*/}\r\n                <div style={{display: \"flex\"}}>Search packs by cards count:\r\n                    <DoubleRange minValue={minCardsCount} maxValue={maxCardsCount} onValuesChange={onCardsCountChange}\r\n                                 maxRangeLimit={200}/></div>\r\n            </div>\r\n            {error && <div style={{color: 'red', margin: '0 auto'}}>{error}</div>}\r\n            <table width=\"100%\" cellPadding=\"4\" className={style.table}>\r\n                <thead style={{outline: 'medium solid'}}>\r\n                <tr>\r\n                    <th>\r\n                        <div className={style.cellWithButtons}>Name<SortButtons onClick={onSortByName}/></div>\r\n                    </th>\r\n                    <th>\r\n                        <div className={style.cellWithButtons}>Cards Count<SortButtons onClick={onSortByCardsCount}/>\r\n                        </div>\r\n                    </th>\r\n                    <th>Last Update</th>\r\n                    <th>Created by</th>\r\n                    <th>\r\n                        <button onClick={onAddBtnClick}>Add</button>\r\n                    </th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {/*мапим колоды, чтобы они появились в таблице*/}\r\n                {cardPacks.map(p => <Pack key={p._id} pack={p} authUserId={authUserId}/>)}\r\n                </tbody>\r\n            </table>\r\n            {/*Pagination*/}\r\n            <div className={style.pagination}>\r\n                <Paginator current={page}\r\n                           pageCount={pageCount}\r\n                           total={cardPacksTotalCount}\r\n                           onChange={paginatorPage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import {Dispatch} from \"redux\";\r\nimport {RequestStatusType} from \"../Login/auth-reducer\";\r\nimport {CardDataType, cardsAPI, GetSortedCardsType, NewCardDataType, SortDirections} from \"../../api/api\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\n\r\nconst initialState = {\r\n    requestStatus: 'idle' as RequestStatusType, //изначально статус запроса - \"неактивный\"\r\n    error: '',\r\n    cards: [] as Array<CardDataType>,\r\n    packUserId: \"\",\r\n    cardsTotalCount: 0,\r\n    page: 0,\r\n    pageCount: 10,\r\n    sortParams: {\r\n        question: '',\r\n        answer: '',\r\n        sortDirection: SortDirections.Down,\r\n        propToSortBy: undefined,\r\n        minGrade: 0,\r\n        maxGrade: 5,\r\n        page: 1,\r\n        pageCount: 10\r\n    } as GetSortedCardsType\r\n}\r\n\r\nexport const cardsReducer = (state = initialState, action: ActionsType): CardsStateType => {\r\n    switch (action.type) {\r\n        case 'CARDS/SET-REQUEST-STATUS': {\r\n            return {\r\n                ...state,\r\n                requestStatus: action.requestStatus,\r\n                error: action.requestStatus === 'success'\r\n                    ? ''\r\n                    : state.error\r\n            }\r\n        }\r\n        case 'CARDS/SET-ERROR': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n        case 'CARDS/SET-SORT-PARAMS': {\r\n            return {\r\n                ...state,\r\n                sortParams: {...state.sortParams, ...action.sortParams}\r\n            }\r\n        }\r\n        case 'CARDS/SET-CARDS': {\r\n            return {\r\n                ...state,\r\n                cards: action.cards,\r\n                packUserId: action.packUserId,\r\n                page: action.page,\r\n                cardsTotalCount: action.cardsTotalCount,\r\n                pageCount: action.pageCount\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\nconst setRequestStatusAC = (requestStatus: RequestStatusType) => ({\r\n    type: 'CARDS/SET-REQUEST-STATUS',\r\n    requestStatus\r\n} as const)\r\nconst setErrorAC = (error: string) => ({type: 'CARDS/SET-ERROR', error} as const)\r\nconst setSortParamsAC = (sortParams: GetSortedCardsType) => ({type: 'CARDS/SET-SORT-PARAMS', sortParams} as const)\r\nconst setCardsAC = (cards: Array<CardDataType>, packUserId: string, page: number, cardsTotalCount: number, pageCount: number) =>\r\n    ({type: 'CARDS/SET-CARDS', cards, packUserId, page, cardsTotalCount, pageCount} as const)\r\n\r\n//thunk\r\nexport const getCardsTC = (packId: string, params: GetSortedCardsType = {}) => (dispatch: ThunkCustomDispatch, getState: () => AppRootStateType) => {\r\n    if (params) dispatch(setSortParamsAC(params))\r\n    const sortParams = getState().cards.sortParams\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.getCards(packId, sortParams)\r\n        .then(res => {\r\n            dispatch(setCardsAC(res.data.cards, res.data.packUserId, res.data.page, res.data.cardsTotalCount, res.data.pageCount))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const addCardTC = (packId: string, params?: GetSortedCardsType) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.addCard(packId, params)\r\n        .then(() => {\r\n            dispatch(getCardsTC(packId, params))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const deleteCardTC = (packId: string, cardId: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.deleteCard(cardId)\r\n        .then(() => {\r\n            dispatch(getCardsTC(packId))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const updateCardTC = (packId: string, cardId: string, params: NewCardDataType = {}, comments?: string) => (dispatch: ThunkDispatch<AppRootStateType, void, ActionsType>) => {\r\n    dispatch(setRequestStatusAC('loading'))\r\n    cardsAPI.updateCard(cardId, params, comments)\r\n        .then(() => {\r\n            dispatch(getCardsTC(packId))\r\n            dispatch(setRequestStatusAC('success'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setErrorAC(error))\r\n            dispatch(setRequestStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type CardsStateType = typeof initialState\r\n//объединение типов actionов:\r\nexport type ActionsType =\r\n    | ReturnType<typeof setRequestStatusAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | ReturnType<typeof setSortParamsAC>\r\n    | ReturnType<typeof setCardsAC>\r\n\r\n// тип диспатча:\r\ntype ThunkCustomDispatch = Dispatch<ActionsType>","import React from \"react\";\r\nimport {CardDataType} from \"../../../api/api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport style from \"./Card.module.css\";\r\nimport {deleteCardTC, updateCardTC} from \"../cards-reducer\";\r\n\r\ntype CardPropsType = {\r\n    card: CardDataType\r\n    packId: string\r\n    authUserId: string\r\n}\r\nexport const Card = ({packId, card, authUserId}: CardPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onDeleteClick = () => {\r\n        dispatch(deleteCardTC(packId, card._id))\r\n    }\r\n\r\n    const onUpdateClick = () => {\r\n        dispatch(updateCardTC(packId, card._id))\r\n    }\r\n\r\n    return <tr className={style.row}>\r\n        <td>{card.question}</td>\r\n        <td>{card.answer}</td>\r\n        <td>{card.grade}</td>\r\n        <td>{card.updated}</td>\r\n        <td>{card.cardsPack_id}</td>\r\n        <td>\r\n            <button onClick={onDeleteClick} disabled={card.user_id !== authUserId}>Delete\r\n            </button>\r\n            <button onClick={onUpdateClick} disabled={card.user_id !== authUserId}>Update\r\n            </button>\r\n        </td>\r\n    </tr>\r\n}","import React, {KeyboardEvent, useCallback, useEffect, useState} from \"react\";\r\nimport style from \"./Cards.module.css\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {SortButtons} from \"../../common/SortButtons/SortButtons\";\r\nimport {GetSortedCardsType, SortDirections} from \"../../api/api\";\r\nimport {DoubleRange} from \"../../common/DoubleRange/DoubleRange\";\r\nimport {addCardTC, CardsStateType, getCardsTC} from \"./cards-reducer\";\r\nimport {Paginator} from \"../Paginator/Paginator\";\r\nimport {PATH} from \"../../app/App\";\r\nimport {Card} from \"./Card/Card\";\r\n\r\n\r\nexport const Cards = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const authUserId = useSelector<AppRootStateType, string>(state => state.auth._id)\r\n    const {packId} = useParams<{ packId?: any }>()    //читаем id колоды из URL\r\n    const {minGrade, maxGrade} = useSelector<AppRootStateType, GetSortedCardsType>(state => state.cards.sortParams)\r\n    const {\r\n        cards,\r\n        packUserId,\r\n        cardsTotalCount,\r\n        page,\r\n        pageCount,\r\n        error\r\n    } = useSelector<AppRootStateType, CardsStateType>(state => state.cards)\r\n    const dispatch = useDispatch()\r\n\r\n    const [answer, setAnswer] = useState<string>(\"\")\r\n    const [question, setQuestion] = useState<string>(\"\")\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn && packId) dispatch(getCardsTC(packId))   //запрашиваем карточки, если залогинен и есть packId\r\n    }, [])\r\n\r\n    const onSortByGrade = useCallback((sortDirection: SortDirections) => {\r\n        dispatch(getCardsTC(packId, {sortDirection, propToSortBy: \"grade\"}))\r\n    }, [packId, dispatch])\r\n\r\n    const onGradeRangeChange = useCallback(([minValue, maxValue]: Array<number | undefined>) => {\r\n        dispatch(getCardsTC(packId, {minGrade: minValue, maxGrade: maxValue}))\r\n    }, [packId, dispatch])\r\n\r\n    const onSearchByQuestion = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            dispatch(getCardsTC(packId, {question: question}))\r\n        }\r\n    }\r\n    const onSearchByAnswer = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            dispatch(getCardsTC(packId, {answer: answer}))\r\n        }\r\n    }\r\n    const onAddBtnClick = (packId: string) => {\r\n        dispatch(addCardTC(packId))\r\n    }\r\n    const paginatorPage = useCallback((page: number, pageCount: number | undefined) => {\r\n        dispatch(getCardsTC(packId, {page, pageCount}))\r\n    }, [packId, dispatch])\r\n\r\n    if (!isLoggedIn) return <Redirect to={PATH.LOGIN}/>\r\n    if (isLoggedIn && !packId) return <Redirect to={PATH.PACKS}/>\r\n\r\n    return (\r\n        <div className={style.cards}>\r\n            <h2>Cards</h2>\r\n            <div className={style.filter}>\r\n                {/*фильтр карточек по вопросу*/}\r\n                <label>Search cards by question: <input placeholder={'Press Enter to search'}\r\n                                                        onKeyPress={onSearchByQuestion}\r\n                                                        value={question}\r\n                                                        onChange={e => setQuestion(e.currentTarget.value)}/></label>\r\n                {/*фильтр карточек по ответу*/}\r\n                <label>Search cards by answer: <input placeholder={'Press Enter to search'}\r\n                                                      onKeyPress={onSearchByAnswer}\r\n                                                      value={answer}\r\n                                                      onChange={e => setAnswer(e.currentTarget.value)}/></label>\r\n                {/*двойной range для сортировки по оценкам (grade)*/}\r\n                <div style={{display: \"flex\"}}>Search cards by grade:\r\n                    <DoubleRange minValue={minGrade} maxValue={maxGrade} onValuesChange={onGradeRangeChange}\r\n                                 maxRangeLimit={5}/></div>\r\n            </div>\r\n            {error && <div style={{color: 'red', margin: '0 auto'}}>{error}</div>}\r\n            <table width=\"100%\" cellPadding=\"4\" className={style.table}>\r\n                <thead style={{outline: 'medium solid'}}>\r\n                <tr>\r\n                    <th>Question</th>\r\n                    <th>Answer</th>\r\n                    <th>\r\n                        <div className={style.cellWithButtons}>Grade<SortButtons onClick={onSortByGrade}/></div>\r\n                    </th>\r\n                    <th>Last Update</th>\r\n                    <th>Pack ID</th>\r\n                    <th>\r\n                        <button onClick={() => {\r\n                            onAddBtnClick(packId)\r\n                        }} disabled={packUserId !== authUserId}>Add\r\n                        </button>\r\n                    </th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {/*мапим карточки, чтобы они появились в таблице*/}\r\n                {cards.map(c => <Card key={c._id} card={c} packId={packId} authUserId={authUserId}/>)}\r\n                </tbody>\r\n            </table>\r\n            {/*Pagination*/}\r\n            <div className={style.pagination}>\r\n                <Paginator current={page}\r\n                           pageCount={pageCount}\r\n                           total={cardsTotalCount}\r\n                           onChange={paginatorPage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {RequestStatusType, setAuthUserDataAC} from \"../features/Login/auth-reducer\";\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialAppStateType = initialState, action: AppActionsType): InitialAppStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {type: 'APP/SET-STATUS', status} as const\r\n}\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {type: 'APP/SET-ERROR', error} as const\r\n}\r\nexport const setIsInitializedAC = (isInitialized: boolean) => {\r\n    return {type: 'APP/SET-INITIALIZED', isInitialized} as const\r\n}\r\n\r\n//thunk\r\nexport const initializeAppTC = () => (dispatch: ThunkCustomDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.me()\r\n        .then(res => {\r\n            dispatch(setAuthUserDataAC(res.data._id, res.data.email, res.data.name, res.data.avatar, true))\r\n            dispatch(setAppStatusAC('success'))\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setAppErrorAC(error))\r\n            dispatch(setAppStatusAC('failed'))\r\n            setTimeout(() => {\r\n                dispatch(setAppErrorAC(''))\r\n            }, 3000)\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n}\r\n\r\n//types\r\nexport type InitialAppStateType = typeof initialState\r\n\r\nexport type AppActionsType =\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setIsInitializedAC>\r\n\r\ntype ThunkCustomDispatch = Dispatch<AppActionsType | ReturnType<typeof setAuthUserDataAC>>","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Forgot} from \"../features/Forgot/Forgot\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Register} from \"../features/Register/Register\";\r\nimport {SetPassword} from \"../features/SetPassword/SetPassword\";\r\nimport {Profile} from \"../features/Profile/Profile\";\r\nimport {Header} from \"../features/Header/Header\";\r\nimport {Packs} from \"../features/Packs/Packs\";\r\nimport {Cards} from \"../features/Cards/Cards\";\r\nimport {initializeAppTC} from \"./app-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {Spin} from 'antd';\r\nimport {LoadingOutlined} from '@ant-design/icons';\r\n\r\nexport const PATH = {\r\n    LOGIN: \"/login\",\r\n    REGISTER: \"/register\",\r\n    FORGOT: \"/forgot\",\r\n    SET_PASSWORD: \"/set-new-password\",\r\n    PROFILE: \"/profile\",\r\n    PACKS: \"/packs\",\r\n    CARDS: \"/cards\",\r\n}\r\n\r\nconst App = () => {\r\n    let isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    let dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '50%', textAlign: 'center', width: '100%'}}>\r\n            <Spin indicator={antIcon} />\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <Switch>\r\n                <Route exact path={['/', `${PATH.PROFILE}`]} render={() => <Profile/>}/>\r\n                <Route path={PATH.REGISTER} render={() => <Register/>}/>\r\n                <Route path={PATH.FORGOT} render={() => <Forgot/>}/>\r\n                <Route path={`${PATH.SET_PASSWORD}/:token?`} render={() => <SetPassword/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.PACKS} render={() => <Packs/>}/>\r\n                <Route path={`${PATH.CARDS}/:packId?`} render={() => <Cards/>}/>\r\n                <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                <Redirect from={'*'} to={'/404'}/>\r\n\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    //\r\n}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        //cases\r\n        default:\r\n            return state\r\n    }\r\n} // (при создании кейсов заменить \"action: any\" на общий тип actionов (ниже) \"action: ActionsType\")\r\n\r\n//action creators\r\n// export const setSomethingAC = () => ({type: 'PROFILE/SET-SOMETHING'} as const)\r\n\r\n//thunk\r\n// export const doSomethingTC = () => (dispatch: ThunkDispatch) => {\r\n//\r\n// }\r\n\r\n//types\r\nexport type InitialStateType = typeof initialState\r\n//объединение типов actionов:\r\n// export type ActionsType = ReturnType<typeof setSomethingAC>\r\n// тип диспатча:\r\n// type ThunkDispatch = Dispatch<ReturnType<typeof setSomethingAC>>","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {registerReducer} from \"../features/Register/register-reducer\";\r\nimport {setPasswordReducer} from \"../features/SetPassword/set-password-reducer\";\r\nimport {profileReducer} from \"../features/Profile/profile-reducer\";\r\nimport {forgotReducer} from \"../features/Forgot/forgot-reducer\";\r\nimport {packsReducer} from \"../features/Packs/packs-reducer\";\r\nimport {cardsReducer} from \"../features/Cards/cards-reducer\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n// комбайним редюсеры\r\nconst rootReducer = combineReducers({  //стейт\r\n    auth: authReducer,\r\n    register: registerReducer,\r\n    forgot: forgotReducer,\r\n    setPassword: setPasswordReducer,\r\n    profile: profileReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer,\r\n    app: appReducer\r\n})\r\n//создаем store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n//тип стейта\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// для вызова store из консоли\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__10VB5\",\"active\":\"Header_active__3B1Kt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packs\":\"Packs_packs__11aat\",\"filter\":\"Packs_filter__3-7jv\",\"table\":\"Packs_table__3gfqm\",\"cellWithButtons\":\"Packs_cellWithButtons__i3Ikn\",\"pagination\":\"Packs_pagination__3tqEx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2ck6i\",\"error\":\"Login_error__1oq8R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cards\":\"Cards_cards__1nz5C\",\"filter\":\"Cards_filter__3iNkp\",\"table\":\"Cards_table__39AGJ\",\"cellWithButtons\":\"Cards_cellWithButtons__1wX-M\",\"pagination\":\"Cards_pagination__34Qpn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgot\":\"Forgot_forgot__3iT7N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Register_register__298wP\"};"],"sourceRoot":""}